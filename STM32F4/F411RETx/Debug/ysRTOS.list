
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d8  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  000103d8  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  000103d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d8  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080003d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003d8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117d  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000497  00000000  00000000  00011585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00011a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000017a0  00000000  00000000  00011b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e1a  00000000  00000000  00013328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000543fe  00000000  00000000  00015142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00069540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a4  00000000  00000000  00069590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003b8 	.word	0x080003b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003b8 	.word	0x080003b8

080001d8 <__init__>:


#include "init.h"
#include "../kernel/kernel.h"

void __init__(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
		UART_INIT();
	}

	/* Initialise the kernel */

	kernel_init();
 80001dc:	f000 f82c 	bl	8000238 <kernel_init>


}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	6039      	str	r1, [r7, #0]
 80001ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	db0a      	blt.n	800020e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	490c      	ldr	r1, [pc, #48]	; (8000230 <__NVIC_SetPriority+0x4c>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	0112      	lsls	r2, r2, #4
 8000204:	b2d2      	uxtb	r2, r2
 8000206:	440b      	add	r3, r1
 8000208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800020c:	e00a      	b.n	8000224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4908      	ldr	r1, [pc, #32]	; (8000234 <__NVIC_SetPriority+0x50>)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	f003 030f 	and.w	r3, r3, #15
 800021a:	3b04      	subs	r3, #4
 800021c:	0112      	lsls	r2, r2, #4
 800021e:	b2d2      	uxtb	r2, r2
 8000220:	440b      	add	r3, r1
 8000222:	761a      	strb	r2, [r3, #24]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000e100 	.word	0xe000e100
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <kernel_init>:
/*
 * Note: Thread ID is simply the index of the TCB_STACK in which the thread's content is stored.
 * */


void kernel_init(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <kernel_init+0x20>)
 800023e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000242:	601a      	str	r2, [r3, #0]
	recently_added_thread_id = -1; /* no threads active currently */
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <kernel_init+0x24>)
 8000246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000020 	.word	0x20000020
 800025c:	20000024 	.word	0x20000024

08000260 <kernel_launch>:
			(FOR DEBUGGING PURPOSES)
		*/

}

void kernel_launch(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
		 *
		 * We load the time quanta into the SysTick LOAD register and when it counts down to 0, we perform the context switch.
		 *
		 * */

		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <kernel_launch+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <kernel_launch+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <kernel_launch+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4613      	mov	r3, r2
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	4413      	add	r3, r2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <kernel_launch+0x4c>)
 800027e:	3b01      	subs	r3, #1
 8000280:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, 15); /* Set SysTick to low-priority */
 8000282:	210f      	movs	r1, #15
 8000284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000288:	f7ff ffac 	bl	80001e4 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <kernel_launch+0x4c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <kernel_launch+0x4c>)
 8000292:	f043 0305 	orr.w	r3, r3, #5
 8000296:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <kernel_launch+0x4c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <kernel_launch+0x4c>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6013      	str	r3, [r2, #0]

		scheduler_launch();
 80002a4:	f000 f806 	bl	80002b4 <scheduler_launch>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	e000e010 	.word	0xe000e010
 80002b0:	20000020 	.word	0x20000020

080002b4 <scheduler_launch>:
/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */


void scheduler_launch(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 80002ba:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 80002bc:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 80002c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 80002c4:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 80002c8:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 80002ca:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 80002cc:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 80002d0:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 80002d2:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 80002d4:	4770      	bx	lr

}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <SysTick_Handler>:
			 *	-> Restore all the Registers.
			 * */

			/* SUSPEND CURRENT THREAD */

			__asm("CPSID I");		/* disable global interrupts */
 80002e4:	b672      	cpsid	i
			__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 80002e6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
			__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <SysTick_Handler+0x20>)
			__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 80002ec:	6801      	ldr	r1, [r0, #0]
			__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 80002ee:	f8c1 d000 	str.w	sp, [r1]
	//
	//		__asm("push {r0-lr}");
	//		__asm("bl osSchedulerPeriodic"); // for the periodic scheduler
	//		__asm("pop {r0-lr}");

			__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 80002f2:	6849      	ldr	r1, [r1, #4]
			__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 80002f4:	6001      	str	r1, [r0, #0]
			__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 80002f6:	f8d1 d000 	ldr.w	sp, [r1]
			__asm("POP {R4-R11}");			/* restore r4-r11 */
 80002fa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
			__asm("CPSIE I");				/* enable global interrupts */
 80002fe:	b662      	cpsie	i
			__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 8000300:	4770      	bx	lr
}
 8000302:	bf00      	nop
 8000304:	2000001c 	.word	0x2000001c

08000308 <main>:
#include "init/init.h"
#include "kernel/kernel.h"


int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	******************/




	__init__(); /* ysRTOS initialisation */
 800030c:	f7ff ff64 	bl	80001d8 <__init__>

	 // add_thread(&your_thread);

	/*  */

	kernel_launch();
 8000310:	f7ff ffa6 	bl	8000260 <kernel_launch>
 8000314:	2300      	movs	r3, #0


}
 8000316:	4618      	mov	r0, r3
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ffdb 	bl	8000308 <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000360:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000364:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000368:	20000028 	.word	0x20000028

0800036c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	; (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	; (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	; (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	; (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
