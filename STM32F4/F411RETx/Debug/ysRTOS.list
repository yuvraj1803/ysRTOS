
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001894  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08001a34  08001a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b40  08001b40  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001b40  08001b40  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b40  08001b40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b44  08001b44  00011b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  20000064  08001bac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08001bac  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b8a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b5c  00000000  00000000  00022c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00023780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  000239f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106d1  00000000  00000000  00023bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000042d4  00000000  00000000  00034299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055f1e  00000000  00000000  0003856d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef4  00000000  00000000  0008e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001a1c 	.word	0x08001a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001a1c 	.word	0x08001a1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LED_INIT+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LED_INIT+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <LED_INIT+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <LED_INIT+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 10);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <LED_INIT+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <LED_INIT+0x38>)
 80002a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002a6:	6013      	str	r3, [r2, #0]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <LED_ON>:

void LED_ON(void){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

	GPIOA -> ODR |= LED_PIN; /* Set LED_PIN high in GPIOA's output data register */
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <LED_ON+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <LED_ON+0x1c>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020000 	.word	0x40020000

080002dc <LED_OFF>:

void LED_OFF(void){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// set LED pin LOW

	GPIOA -> ODR &= ~LED_PIN; /* Set LED_PIN low in GPIOA's output data register */
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <LED_OFF+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <LED_OFF+0x1c>)
 80002e6:	f023 0320 	bic.w	r3, r3, #32
 80002ea:	6153      	str	r3, [r2, #20]

}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <__io_putchar>:
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);
void uart_tx_init(void);

int __io_putchar(int ch){ /* defined in syscalls.c */
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f805 	bl	8000314 <uart_write>

	return ch;
 800030a:	687b      	ldr	r3, [r7, #4]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <uart_write>:

	USART2 -> CR1 |= CR1_UE; /* enable UART module */

}

static void uart_write(int ch){
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]

	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 800031c:	bf00      	nop
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <uart_write+0x2c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <uart_write+0x2c>)
 800032e:	b2db      	uxtb	r3, r3
 8000330:	6053      	str	r3, [r2, #4]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40004400 	.word	0x40004400

08000344 <__init__>:


#include "init.h"


void __init__(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000348:	f7ff ff9a 	bl	8000280 <LED_INIT>



	/* Initialise the kernel */

	kernel_init();
 800034c:	f000 f82c 	bl	80003a8 <kernel_init>


}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	db0a      	blt.n	800037e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	490c      	ldr	r1, [pc, #48]	; (80003a0 <__NVIC_SetPriority+0x4c>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800037c:	e00a      	b.n	8000394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4908      	ldr	r1, [pc, #32]	; (80003a4 <__NVIC_SetPriority+0x50>)
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	f003 030f 	and.w	r3, r3, #15
 800038a:	3b04      	subs	r3, #4
 800038c:	0112      	lsls	r2, r2, #4
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	440b      	add	r3, r1
 8000392:	761a      	strb	r2, [r3, #24]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <kernel_init>:
/*
 * Note: Thread ID is simply the index of the TCB_STACK in which the thread's content is stored.
 * */


void kernel_init(void){
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <kernel_init+0x48>)
 80003ae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003b2:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <kernel_init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <kernel_init+0x50>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <kernel_init+0x54>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	601a      	str	r2, [r3, #0]

	min_periodic_thread_id = MAX_THREADS;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <kernel_init+0x58>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <kernel_init+0x5c>)
 80003ce:	2209      	movs	r2, #9
 80003d0:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <kernel_init+0x50>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <kernel_init+0x60>)
 80003da:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <kernel_init+0x58>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <kernel_init+0x64>)
 80003e4:	6013      	str	r3, [r2, #0]


}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	20001114 	.word	0x20001114
 80003f4:	20001130 	.word	0x20001130
 80003f8:	20001120 	.word	0x20001120
 80003fc:	20001124 	.word	0x20001124
 8000400:	20001128 	.word	0x20001128
 8000404:	2000112c 	.word	0x2000112c
 8000408:	20001118 	.word	0x20001118
 800040c:	2000111c 	.word	0x2000111c

08000410 <stk_init>:

void stk_init(uint32_t thread_id){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800041e:	fb02 f303 	mul.w	r3, r2, r3
 8000422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <stk_init+0x50>)
 8000428:	1899      	adds	r1, r3, r2
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <stk_init+0x54>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	4403      	add	r3, r0
 8000438:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <stk_init+0x50>)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000442:	fb01 f303 	mul.w	r3, r1, r3
 8000446:	4413      	add	r3, r2
 8000448:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800044c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000450:	601a      	str	r2, [r3, #0]
		TCB_STACK[THREAD_NO][STACK_SIZE-16] = 0xAAAAAAAA; // R4

			(FOR DEBUGGING PURPOSES)
		*/

}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000174 	.word	0x20000174
 8000464:	20000080 	.word	0x20000080

08000468 <kernel_launch>:

void kernel_launch(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <kernel_launch+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <kernel_launch+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <kernel_launch+0x54>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4613      	mov	r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4413      	add	r3, r2
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <kernel_launch+0x50>)
 8000486:	3b01      	subs	r3, #1
 8000488:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, 15); /* Set SysTick to low-priority */
 800048a:	210f      	movs	r1, #15
 800048c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000490:	f7ff ff60 	bl	8000354 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <kernel_launch+0x50>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <kernel_launch+0x50>)
 800049a:	f043 0305 	orr.w	r3, r3, #5
 800049e:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <kernel_launch+0x50>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <kernel_launch+0x50>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	6013      	str	r3, [r2, #0]
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 80004ac:	f000 fa4e 	bl	800094c <tim2_1ms_interrupt_init>
		}

		scheduler_launch();
 80004b0:	f000 f906 	bl	80006c0 <scheduler_launch>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	e000e010 	.word	0xe000e010
 80004bc:	20001114 	.word	0x20001114

080004c0 <add_thread>:

void add_thread(void (*thread)(void)){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <add_thread+0x114>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <add_thread+0x118>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d10a      	bne.n	80004ea <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 80004d4:	4b41      	ldr	r3, [pc, #260]	; (80005dc <add_thread+0x11c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	1d3a      	adds	r2, r7, #4
 80004dc:	4940      	ldr	r1, [pc, #256]	; (80005e0 <add_thread+0x120>)
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fae8 	bl	8000ab4 <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fad1 	bl	8000a8c <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 80004ea:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <add_thread+0x114>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f2:	b672      	cpsid	i
}
 80004f4:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 80004f6:	493b      	ldr	r1, [pc, #236]	; (80005e4 <add_thread+0x124>)
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	4613      	mov	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	440b      	add	r3, r1
 8000504:	3308      	adds	r3, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 800050a:	4936      	ldr	r1, [pc, #216]	; (80005e4 <add_thread+0x124>)
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	4613      	mov	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	4413      	add	r3, r2
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	440b      	add	r3, r1
 8000518:	330c      	adds	r3, #12
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0;
 800051e:	4931      	ldr	r1, [pc, #196]	; (80005e4 <add_thread+0x124>)
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	4613      	mov	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4413      	add	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	440b      	add	r3, r1
 800052c:	3310      	adds	r3, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 8000532:	492c      	ldr	r1, [pc, #176]	; (80005e4 <add_thread+0x124>)
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	440b      	add	r3, r1
 8000540:	3314      	adds	r3, #20
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f7ff ff62 	bl	8000410 <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4618      	mov	r0, r3
 8000550:	4a25      	ldr	r2, [pc, #148]	; (80005e8 <add_thread+0x128>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000558:	fb01 f303 	mul.w	r3, r1, r3
 800055c:	4413      	add	r3, r2
 800055e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000562:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d106      	bne.n	8000578 <add_thread+0xb8>
		__current_ptr__ = &__tcbs__[0];
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <add_thread+0x12c>)
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <add_thread+0x124>)
 800056e:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <add_thread+0x124>)
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <add_thread+0x124>)
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	e023      	b.n	80005c0 <add_thread+0x100>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <add_thread+0x114>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4919      	ldr	r1, [pc, #100]	; (80005e4 <add_thread+0x124>)
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	3304      	adds	r3, #4
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <add_thread+0x124>)
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4613      	mov	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4403      	add	r3, r0
 800059a:	3304      	adds	r3, #4
 800059c:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <add_thread+0x114>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	68f9      	ldr	r1, [r7, #12]
 80005a4:	460b      	mov	r3, r1
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	440b      	add	r3, r1
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	490d      	ldr	r1, [pc, #52]	; (80005e4 <add_thread+0x124>)
 80005ae:	4419      	add	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <add_thread+0x124>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4403      	add	r3, r0
 80005bc:	3304      	adds	r3, #4
 80005be:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <add_thread+0x114>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005c6:	b662      	cpsie	i
}
 80005c8:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20001118 	.word	0x20001118
 80005d8:	20001124 	.word	0x20001124
 80005dc:	20000000 	.word	0x20000000
 80005e0:	08001a34 	.word	0x08001a34
 80005e4:	20000080 	.word	0x20000080
 80005e8:	20000174 	.word	0x20000174
 80005ec:	20000170 	.word	0x20000170

080005f0 <add_periodic_thread>:

void add_periodic_thread(void (*pthread)(void), uint32_t period){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	 * TIM2_IRQHandler will be called when TIM2->CNT hits 0. This will initiate the context switching process.
	 *
	 *
	 * */

	if(recently_added_periodic_thread_id == max_periodic_thread_id){
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <add_periodic_thread+0xb8>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <add_periodic_thread+0xbc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d10a      	bne.n	800061c <add_periodic_thread+0x2c>
		fprintf(stderr, "Cannot add periodic thread %p, max periodic thread limit reached", &pthread);
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <add_periodic_thread+0xc0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	1d3a      	adds	r2, r7, #4
 800060e:	4929      	ldr	r1, [pc, #164]	; (80006b4 <add_periodic_thread+0xc4>)
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fa4f 	bl	8000ab4 <fiprintf>
		exit(__ADD_PERIODIC_THREAD_FAILURE__);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fa38 	bl	8000a8c <exit>
	}

	uint32_t pthread_id = recently_added_periodic_thread_id + 1;
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <add_periodic_thread+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop

	__disable_irq();

	__tcbs__[pthread_id].sleeptime = 0;
 8000628:	4923      	ldr	r1, [pc, #140]	; (80006b8 <add_periodic_thread+0xc8>)
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	440b      	add	r3, r1
 8000636:	3308      	adds	r3, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].thread_id = pthread_id;
 800063c:	491e      	ldr	r1, [pc, #120]	; (80006b8 <add_periodic_thread+0xc8>)
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	330c      	adds	r3, #12
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].period = period;
 8000650:	4919      	ldr	r1, [pc, #100]	; (80006b8 <add_periodic_thread+0xc8>)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	440b      	add	r3, r1
 800065e:	3310      	adds	r3, #16
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].status = THREAD_ACTIVE;
 8000664:	4914      	ldr	r1, [pc, #80]	; (80006b8 <add_periodic_thread+0xc8>)
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	440b      	add	r3, r1
 8000672:	3314      	adds	r3, #20
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]

	stk_init(pthread_id);
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff fec9 	bl	8000410 <stk_init>
	TCB_STACK[pthread_id][STACK_SIZE-2] = (uint32_t) pthread;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4618      	mov	r0, r3
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <add_periodic_thread+0xcc>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800068a:	fb01 f303 	mul.w	r3, r1, r3
 800068e:	4413      	add	r3, r2
 8000690:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000694:	6018      	str	r0, [r3, #0]

	recently_added_periodic_thread_id = pthread_id;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <add_periodic_thread+0xb8>)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800069c:	b662      	cpsie	i
}
 800069e:	bf00      	nop

	__enable_irq();



}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000111c 	.word	0x2000111c
 80006ac:	2000112c 	.word	0x2000112c
 80006b0:	20000000 	.word	0x20000000
 80006b4:	08001a64 	.word	0x08001a64
 80006b8:	20000080 	.word	0x20000080
 80006bc:	20000174 	.word	0x20000174

080006c0 <scheduler_launch>:
/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */


void scheduler_launch(void){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 80006c6:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 80006c8:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 80006cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 80006d0:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 80006d4:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 80006d6:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 80006d8:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 80006dc:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 80006de:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 80006e0:	4770      	bx	lr

}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	20000170 	.word	0x20000170

080006f0 <SysTick_Handler>:
			 *	-> Restore all the Registers.
			 * */

			/* SUSPEND CURRENT THREAD */

			__asm("CPSID I");		/* disable global interrupts */
 80006f0:	b672      	cpsid	i
			__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 80006f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
			__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <SysTick_Handler+0x20>)
			__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 80006f8:	6801      	ldr	r1, [r0, #0]
			__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 80006fa:	f8c1 d000 	str.w	sp, [r1]
	//
	//		__asm("push {r0-lr}");
	//		__asm("bl osSchedulerPeriodic"); // for the periodic scheduler
	//		__asm("pop {r0-lr}");

			__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 80006fe:	6849      	ldr	r1, [r1, #4]
			__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 8000700:	6001      	str	r1, [r0, #0]
			__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 8000702:	f8d1 d000 	ldr.w	sp, [r1]
			__asm("POP {R4-R11}");			/* restore r4-r11 */
 8000706:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
			__asm("CPSIE I");				/* enable global interrupts */
 800070a:	b662      	cpsie	i
			__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 800070c:	4770      	bx	lr
}
 800070e:	bf00      	nop
 8000710:	20000170 	.word	0x20000170

08000714 <pa>:
#include "kernel/kernel.h"

int a = 0;
int b = 0;

void pa(void){
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	while(1){
		a++;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <pa+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a01      	ldr	r2, [pc, #4]	; (8000724 <pa+0x10>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e7f9      	b.n	8000718 <pa+0x4>
 8000724:	20001134 	.word	0x20001134

08000728 <pb>:
	}
}

void pb(void){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	while(1){
		b++;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <pb+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a01      	ldr	r2, [pc, #4]	; (8000738 <pb+0x10>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e7f9      	b.n	800072c <pb+0x4>
 8000738:	20001138 	.word	0x20001138

0800073c <on>:
	}
}

void on(void){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	LED_ON();
 8000740:	f7ff fdbc 	bl	80002bc <LED_ON>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <off>:
void off(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	LED_OFF();
 800074c:	f7ff fdc6 	bl	80002dc <LED_OFF>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <main>:


int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	******************/




	__init__(); /* ysRTOS initialisation */
 8000758:	f7ff fdf4 	bl	8000344 <__init__>


	/* Add all your threads below */

	 add_thread(&pa);
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <main+0x30>)
 800075e:	f7ff feaf 	bl	80004c0 <add_thread>
	 add_thread(&pb);
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <main+0x34>)
 8000764:	f7ff feac 	bl	80004c0 <add_thread>
	 add_periodic_thread(&on,1);
 8000768:	2101      	movs	r1, #1
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <main+0x38>)
 800076c:	f7ff ff40 	bl	80005f0 <add_periodic_thread>
	 add_periodic_thread(&off,200);
 8000770:	21c8      	movs	r1, #200	; 0xc8
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <main+0x3c>)
 8000774:	f7ff ff3c 	bl	80005f0 <add_periodic_thread>

	/*  */

	kernel_launch();
 8000778:	f7ff fe76 	bl	8000468 <kernel_launch>
 800077c:	2300      	movs	r3, #0


}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08000715 	.word	0x08000715
 8000788:	08000729 	.word	0x08000729
 800078c:	0800073d 	.word	0x0800073d
 8000790:	08000749 	.word	0x08000749

08000794 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800079e:	f000 f96f 	bl	8000a80 <__errno>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2216      	movs	r2, #22
 80007a6:	601a      	str	r2, [r3, #0]
  return -1;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_exit>:

void _exit (int status)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ffe7 	bl	8000794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007c6:	e7fe      	b.n	80007c6 <_exit+0x12>

080007c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00a      	b.n	80007f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007da:	f3af 8000 	nop.w
 80007de:	4601      	mov	r1, r0
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	b2ca      	uxtb	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf0      	blt.n	80007da <_read+0x12>
  }

  return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	e009      	b.n	8000828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fd6d 	bl	80002fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf1      	blt.n	8000814 <_write+0x12>
  }
  return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_close>:

int _close(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000862:	605a      	str	r2, [r3, #4]
  return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_isatty>:

int _isatty(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f000 f8d4 	bl	8000a80 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20020000 	.word	0x20020000
 8000904:	00000400 	.word	0x00000400
 8000908:	2000113c 	.word	0x2000113c
 800090c:	20001150 	.word	0x20001150

08000910 <__NVIC_EnableIRQ>:
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0b      	blt.n	800093a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 021f 	and.w	r2, r3, #31
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <__NVIC_EnableIRQ+0x38>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2001      	movs	r0, #1
 8000932:	fa00 f202 	lsl.w	r2, r0, r2
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000e100 	.word	0xe000e100

0800094c <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <tim2_1ms_interrupt_init+0x4c>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a10      	ldr	r2, [pc, #64]	; (8000998 <tim2_1ms_interrupt_init+0x4c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 16000 - 1;	 /*Set timer prescaler*/
 800095c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000960:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 8000966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800096a:	2209      	movs	r2, #9
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 800096e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 8000976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 800097e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 800098e:	201c      	movs	r0, #28
 8000990:	f7ff ffbe 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <TIM2_IRQHandler+0x7c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <TIM2_IRQHandler+0x80>)
 80009aa:	fba3 1302 	umull	r1, r3, r3, r2
 80009ae:	0a9b      	lsrs	r3, r3, #10
 80009b0:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <TIM2_IRQHandler+0x7c>)
 80009bc:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 80009be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	6113      	str	r3, [r2, #16]

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <TIM2_IRQHandler+0x84>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	e013      	b.n	80009fe <TIM2_IRQHandler+0x62>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if(sys_counter % __tcbs__[current_thread_id].period == 0 && __tcbs__[current_thread_id].status == THREAD_ACTIVE){
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <TIM2_IRQHandler+0x7c>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <TIM2_IRQHandler+0x88>)
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	440b      	add	r3, r1
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4403      	add	r3, r0
 80009e8:	3310      	adds	r3, #16
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b00      	cmp	r3, #0
			current_thread_id++)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <TIM2_IRQHandler+0x8c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d9e6      	bls.n	80009d6 <TIM2_IRQHandler+0x3a>

		}
	}


}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20001130 	.word	0x20001130
 8000a1c:	10624dd3 	.word	0x10624dd3
 8000a20:	20001128 	.word	0x20001128
 8000a24:	20000080 	.word	0x20000080
 8000a28:	2000112c 	.word	0x2000112c

08000a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5a:	f000 f83d 	bl	8000ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fe79 	bl	8000754 <main>

08000a62 <LoopForever>:

LoopForever:
  b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   r0, =_estack
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a70:	08001b48 	.word	0x08001b48
  ldr r2, =_sbss
 8000a74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a78:	20001150 	.word	0x20001150

08000a7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <__errno>:
 8000a80:	4b01      	ldr	r3, [pc, #4]	; (8000a88 <__errno+0x8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000000 	.word	0x20000000

08000a8c <exit>:
 8000a8c:	b508      	push	{r3, lr}
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <exit+0x20>)
 8000a90:	4604      	mov	r4, r0
 8000a92:	b113      	cbz	r3, 8000a9a <exit+0xe>
 8000a94:	2100      	movs	r1, #0
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <exit+0x24>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000aa0:	b103      	cbz	r3, 8000aa4 <exit+0x18>
 8000aa2:	4798      	blx	r3
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fe85 	bl	80007b4 <_exit>
 8000aaa:	bf00      	nop
 8000aac:	00000000 	.word	0x00000000
 8000ab0:	08001aa8 	.word	0x08001aa8

08000ab4 <fiprintf>:
 8000ab4:	b40e      	push	{r1, r2, r3}
 8000ab6:	b503      	push	{r0, r1, lr}
 8000ab8:	4601      	mov	r1, r0
 8000aba:	ab03      	add	r3, sp, #12
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <fiprintf+0x20>)
 8000abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ac2:	6800      	ldr	r0, [r0, #0]
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	f000 f85d 	bl	8000b84 <_vfiprintf_r>
 8000aca:	b002      	add	sp, #8
 8000acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ad0:	b003      	add	sp, #12
 8000ad2:	4770      	bx	lr
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <__libc_init_array>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4d0d      	ldr	r5, [pc, #52]	; (8000b10 <__libc_init_array+0x38>)
 8000adc:	4c0d      	ldr	r4, [pc, #52]	; (8000b14 <__libc_init_array+0x3c>)
 8000ade:	1b64      	subs	r4, r4, r5
 8000ae0:	10a4      	asrs	r4, r4, #2
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	42a6      	cmp	r6, r4
 8000ae6:	d109      	bne.n	8000afc <__libc_init_array+0x24>
 8000ae8:	4d0b      	ldr	r5, [pc, #44]	; (8000b18 <__libc_init_array+0x40>)
 8000aea:	4c0c      	ldr	r4, [pc, #48]	; (8000b1c <__libc_init_array+0x44>)
 8000aec:	f000 ff96 	bl	8001a1c <_init>
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	10a4      	asrs	r4, r4, #2
 8000af4:	2600      	movs	r6, #0
 8000af6:	42a6      	cmp	r6, r4
 8000af8:	d105      	bne.n	8000b06 <__libc_init_array+0x2e>
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b00:	4798      	blx	r3
 8000b02:	3601      	adds	r6, #1
 8000b04:	e7ee      	b.n	8000ae4 <__libc_init_array+0xc>
 8000b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0a:	4798      	blx	r3
 8000b0c:	3601      	adds	r6, #1
 8000b0e:	e7f2      	b.n	8000af6 <__libc_init_array+0x1e>
 8000b10:	08001b40 	.word	0x08001b40
 8000b14:	08001b40 	.word	0x08001b40
 8000b18:	08001b40 	.word	0x08001b40
 8000b1c:	08001b44 	.word	0x08001b44

08000b20 <memset>:
 8000b20:	4402      	add	r2, r0
 8000b22:	4603      	mov	r3, r0
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d100      	bne.n	8000b2a <memset+0xa>
 8000b28:	4770      	bx	lr
 8000b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8000b2e:	e7f9      	b.n	8000b24 <memset+0x4>

08000b30 <__sfputc_r>:
 8000b30:	6893      	ldr	r3, [r2, #8]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	b410      	push	{r4}
 8000b38:	6093      	str	r3, [r2, #8]
 8000b3a:	da08      	bge.n	8000b4e <__sfputc_r+0x1e>
 8000b3c:	6994      	ldr	r4, [r2, #24]
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	db01      	blt.n	8000b46 <__sfputc_r+0x16>
 8000b42:	290a      	cmp	r1, #10
 8000b44:	d103      	bne.n	8000b4e <__sfputc_r+0x1e>
 8000b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b4a:	f000 badf 	b.w	800110c <__swbuf_r>
 8000b4e:	6813      	ldr	r3, [r2, #0]
 8000b50:	1c58      	adds	r0, r3, #1
 8000b52:	6010      	str	r0, [r2, #0]
 8000b54:	7019      	strb	r1, [r3, #0]
 8000b56:	4608      	mov	r0, r1
 8000b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <__sfputs_r>:
 8000b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b60:	4606      	mov	r6, r0
 8000b62:	460f      	mov	r7, r1
 8000b64:	4614      	mov	r4, r2
 8000b66:	18d5      	adds	r5, r2, r3
 8000b68:	42ac      	cmp	r4, r5
 8000b6a:	d101      	bne.n	8000b70 <__sfputs_r+0x12>
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	e007      	b.n	8000b80 <__sfputs_r+0x22>
 8000b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b74:	463a      	mov	r2, r7
 8000b76:	4630      	mov	r0, r6
 8000b78:	f7ff ffda 	bl	8000b30 <__sfputc_r>
 8000b7c:	1c43      	adds	r3, r0, #1
 8000b7e:	d1f3      	bne.n	8000b68 <__sfputs_r+0xa>
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b84 <_vfiprintf_r>:
 8000b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b88:	460d      	mov	r5, r1
 8000b8a:	b09d      	sub	sp, #116	; 0x74
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	4698      	mov	r8, r3
 8000b90:	4606      	mov	r6, r0
 8000b92:	b118      	cbz	r0, 8000b9c <_vfiprintf_r+0x18>
 8000b94:	6983      	ldr	r3, [r0, #24]
 8000b96:	b90b      	cbnz	r3, 8000b9c <_vfiprintf_r+0x18>
 8000b98:	f000 fc92 	bl	80014c0 <__sinit>
 8000b9c:	4b89      	ldr	r3, [pc, #548]	; (8000dc4 <_vfiprintf_r+0x240>)
 8000b9e:	429d      	cmp	r5, r3
 8000ba0:	d11b      	bne.n	8000bda <_vfiprintf_r+0x56>
 8000ba2:	6875      	ldr	r5, [r6, #4]
 8000ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba6:	07d9      	lsls	r1, r3, #31
 8000ba8:	d405      	bmi.n	8000bb6 <_vfiprintf_r+0x32>
 8000baa:	89ab      	ldrh	r3, [r5, #12]
 8000bac:	059a      	lsls	r2, r3, #22
 8000bae:	d402      	bmi.n	8000bb6 <_vfiprintf_r+0x32>
 8000bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bb2:	f000 fd23 	bl	80015fc <__retarget_lock_acquire_recursive>
 8000bb6:	89ab      	ldrh	r3, [r5, #12]
 8000bb8:	071b      	lsls	r3, r3, #28
 8000bba:	d501      	bpl.n	8000bc0 <_vfiprintf_r+0x3c>
 8000bbc:	692b      	ldr	r3, [r5, #16]
 8000bbe:	b9eb      	cbnz	r3, 8000bfc <_vfiprintf_r+0x78>
 8000bc0:	4629      	mov	r1, r5
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f000 faf4 	bl	80011b0 <__swsetup_r>
 8000bc8:	b1c0      	cbz	r0, 8000bfc <_vfiprintf_r+0x78>
 8000bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bcc:	07dc      	lsls	r4, r3, #31
 8000bce:	d50e      	bpl.n	8000bee <_vfiprintf_r+0x6a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	b01d      	add	sp, #116	; 0x74
 8000bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <_vfiprintf_r+0x244>)
 8000bdc:	429d      	cmp	r5, r3
 8000bde:	d101      	bne.n	8000be4 <_vfiprintf_r+0x60>
 8000be0:	68b5      	ldr	r5, [r6, #8]
 8000be2:	e7df      	b.n	8000ba4 <_vfiprintf_r+0x20>
 8000be4:	4b79      	ldr	r3, [pc, #484]	; (8000dcc <_vfiprintf_r+0x248>)
 8000be6:	429d      	cmp	r5, r3
 8000be8:	bf08      	it	eq
 8000bea:	68f5      	ldreq	r5, [r6, #12]
 8000bec:	e7da      	b.n	8000ba4 <_vfiprintf_r+0x20>
 8000bee:	89ab      	ldrh	r3, [r5, #12]
 8000bf0:	0598      	lsls	r0, r3, #22
 8000bf2:	d4ed      	bmi.n	8000bd0 <_vfiprintf_r+0x4c>
 8000bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bf6:	f000 fd02 	bl	80015fe <__retarget_lock_release_recursive>
 8000bfa:	e7e9      	b.n	8000bd0 <_vfiprintf_r+0x4c>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8000c00:	2320      	movs	r3, #32
 8000c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c0a:	2330      	movs	r3, #48	; 0x30
 8000c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000dd0 <_vfiprintf_r+0x24c>
 8000c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c14:	f04f 0901 	mov.w	r9, #1
 8000c18:	4623      	mov	r3, r4
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c20:	b10a      	cbz	r2, 8000c26 <_vfiprintf_r+0xa2>
 8000c22:	2a25      	cmp	r2, #37	; 0x25
 8000c24:	d1f9      	bne.n	8000c1a <_vfiprintf_r+0x96>
 8000c26:	ebba 0b04 	subs.w	fp, sl, r4
 8000c2a:	d00b      	beq.n	8000c44 <_vfiprintf_r+0xc0>
 8000c2c:	465b      	mov	r3, fp
 8000c2e:	4622      	mov	r2, r4
 8000c30:	4629      	mov	r1, r5
 8000c32:	4630      	mov	r0, r6
 8000c34:	f7ff ff93 	bl	8000b5e <__sfputs_r>
 8000c38:	3001      	adds	r0, #1
 8000c3a:	f000 80aa 	beq.w	8000d92 <_vfiprintf_r+0x20e>
 8000c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c40:	445a      	add	r2, fp
 8000c42:	9209      	str	r2, [sp, #36]	; 0x24
 8000c44:	f89a 3000 	ldrb.w	r3, [sl]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80a2 	beq.w	8000d92 <_vfiprintf_r+0x20e>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c58:	f10a 0a01 	add.w	sl, sl, #1
 8000c5c:	9304      	str	r3, [sp, #16]
 8000c5e:	9307      	str	r3, [sp, #28]
 8000c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c64:	931a      	str	r3, [sp, #104]	; 0x68
 8000c66:	4654      	mov	r4, sl
 8000c68:	2205      	movs	r2, #5
 8000c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c6e:	4858      	ldr	r0, [pc, #352]	; (8000dd0 <_vfiprintf_r+0x24c>)
 8000c70:	f7ff fab6 	bl	80001e0 <memchr>
 8000c74:	9a04      	ldr	r2, [sp, #16]
 8000c76:	b9d8      	cbnz	r0, 8000cb0 <_vfiprintf_r+0x12c>
 8000c78:	06d1      	lsls	r1, r2, #27
 8000c7a:	bf44      	itt	mi
 8000c7c:	2320      	movmi	r3, #32
 8000c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c82:	0713      	lsls	r3, r2, #28
 8000c84:	bf44      	itt	mi
 8000c86:	232b      	movmi	r3, #43	; 0x2b
 8000c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c90:	2b2a      	cmp	r3, #42	; 0x2a
 8000c92:	d015      	beq.n	8000cc0 <_vfiprintf_r+0x13c>
 8000c94:	9a07      	ldr	r2, [sp, #28]
 8000c96:	4654      	mov	r4, sl
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f04f 0c0a 	mov.w	ip, #10
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ca4:	3b30      	subs	r3, #48	; 0x30
 8000ca6:	2b09      	cmp	r3, #9
 8000ca8:	d94e      	bls.n	8000d48 <_vfiprintf_r+0x1c4>
 8000caa:	b1b0      	cbz	r0, 8000cda <_vfiprintf_r+0x156>
 8000cac:	9207      	str	r2, [sp, #28]
 8000cae:	e014      	b.n	8000cda <_vfiprintf_r+0x156>
 8000cb0:	eba0 0308 	sub.w	r3, r0, r8
 8000cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	9304      	str	r3, [sp, #16]
 8000cbc:	46a2      	mov	sl, r4
 8000cbe:	e7d2      	b.n	8000c66 <_vfiprintf_r+0xe2>
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	1d19      	adds	r1, r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	9103      	str	r1, [sp, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bfbb      	ittet	lt
 8000ccc:	425b      	neglt	r3, r3
 8000cce:	f042 0202 	orrlt.w	r2, r2, #2
 8000cd2:	9307      	strge	r3, [sp, #28]
 8000cd4:	9307      	strlt	r3, [sp, #28]
 8000cd6:	bfb8      	it	lt
 8000cd8:	9204      	strlt	r2, [sp, #16]
 8000cda:	7823      	ldrb	r3, [r4, #0]
 8000cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cde:	d10c      	bne.n	8000cfa <_vfiprintf_r+0x176>
 8000ce0:	7863      	ldrb	r3, [r4, #1]
 8000ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ce4:	d135      	bne.n	8000d52 <_vfiprintf_r+0x1ce>
 8000ce6:	9b03      	ldr	r3, [sp, #12]
 8000ce8:	1d1a      	adds	r2, r3, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	9203      	str	r2, [sp, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bfb8      	it	lt
 8000cf2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cf6:	3402      	adds	r4, #2
 8000cf8:	9305      	str	r3, [sp, #20]
 8000cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000de0 <_vfiprintf_r+0x25c>
 8000cfe:	7821      	ldrb	r1, [r4, #0]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4650      	mov	r0, sl
 8000d04:	f7ff fa6c 	bl	80001e0 <memchr>
 8000d08:	b140      	cbz	r0, 8000d1c <_vfiprintf_r+0x198>
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	eba0 000a 	sub.w	r0, r0, sl
 8000d10:	fa03 f000 	lsl.w	r0, r3, r0
 8000d14:	9b04      	ldr	r3, [sp, #16]
 8000d16:	4303      	orrs	r3, r0
 8000d18:	3401      	adds	r4, #1
 8000d1a:	9304      	str	r3, [sp, #16]
 8000d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d20:	482c      	ldr	r0, [pc, #176]	; (8000dd4 <_vfiprintf_r+0x250>)
 8000d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d26:	2206      	movs	r2, #6
 8000d28:	f7ff fa5a 	bl	80001e0 <memchr>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d03f      	beq.n	8000db0 <_vfiprintf_r+0x22c>
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <_vfiprintf_r+0x254>)
 8000d32:	bb1b      	cbnz	r3, 8000d7c <_vfiprintf_r+0x1f8>
 8000d34:	9b03      	ldr	r3, [sp, #12]
 8000d36:	3307      	adds	r3, #7
 8000d38:	f023 0307 	bic.w	r3, r3, #7
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	9303      	str	r3, [sp, #12]
 8000d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d42:	443b      	add	r3, r7
 8000d44:	9309      	str	r3, [sp, #36]	; 0x24
 8000d46:	e767      	b.n	8000c18 <_vfiprintf_r+0x94>
 8000d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	2001      	movs	r0, #1
 8000d50:	e7a5      	b.n	8000c9e <_vfiprintf_r+0x11a>
 8000d52:	2300      	movs	r3, #0
 8000d54:	3401      	adds	r4, #1
 8000d56:	9305      	str	r3, [sp, #20]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 0c0a 	mov.w	ip, #10
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d64:	3a30      	subs	r2, #48	; 0x30
 8000d66:	2a09      	cmp	r2, #9
 8000d68:	d903      	bls.n	8000d72 <_vfiprintf_r+0x1ee>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0c5      	beq.n	8000cfa <_vfiprintf_r+0x176>
 8000d6e:	9105      	str	r1, [sp, #20]
 8000d70:	e7c3      	b.n	8000cfa <_vfiprintf_r+0x176>
 8000d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d76:	4604      	mov	r4, r0
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e7f0      	b.n	8000d5e <_vfiprintf_r+0x1da>
 8000d7c:	ab03      	add	r3, sp, #12
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	462a      	mov	r2, r5
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <_vfiprintf_r+0x258>)
 8000d84:	a904      	add	r1, sp, #16
 8000d86:	4630      	mov	r0, r6
 8000d88:	f3af 8000 	nop.w
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	1c78      	adds	r0, r7, #1
 8000d90:	d1d6      	bne.n	8000d40 <_vfiprintf_r+0x1bc>
 8000d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d94:	07d9      	lsls	r1, r3, #31
 8000d96:	d405      	bmi.n	8000da4 <_vfiprintf_r+0x220>
 8000d98:	89ab      	ldrh	r3, [r5, #12]
 8000d9a:	059a      	lsls	r2, r3, #22
 8000d9c:	d402      	bmi.n	8000da4 <_vfiprintf_r+0x220>
 8000d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000da0:	f000 fc2d 	bl	80015fe <__retarget_lock_release_recursive>
 8000da4:	89ab      	ldrh	r3, [r5, #12]
 8000da6:	065b      	lsls	r3, r3, #25
 8000da8:	f53f af12 	bmi.w	8000bd0 <_vfiprintf_r+0x4c>
 8000dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dae:	e711      	b.n	8000bd4 <_vfiprintf_r+0x50>
 8000db0:	ab03      	add	r3, sp, #12
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	462a      	mov	r2, r5
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <_vfiprintf_r+0x258>)
 8000db8:	a904      	add	r1, sp, #16
 8000dba:	4630      	mov	r0, r6
 8000dbc:	f000 f880 	bl	8000ec0 <_printf_i>
 8000dc0:	e7e4      	b.n	8000d8c <_vfiprintf_r+0x208>
 8000dc2:	bf00      	nop
 8000dc4:	08001b00 	.word	0x08001b00
 8000dc8:	08001b20 	.word	0x08001b20
 8000dcc:	08001ae0 	.word	0x08001ae0
 8000dd0:	08001aac 	.word	0x08001aac
 8000dd4:	08001ab6 	.word	0x08001ab6
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	08000b5f 	.word	0x08000b5f
 8000de0:	08001ab2 	.word	0x08001ab2

08000de4 <_printf_common>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	4616      	mov	r6, r2
 8000dea:	4699      	mov	r9, r3
 8000dec:	688a      	ldr	r2, [r1, #8]
 8000dee:	690b      	ldr	r3, [r1, #16]
 8000df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000df4:	4293      	cmp	r3, r2
 8000df6:	bfb8      	it	lt
 8000df8:	4613      	movlt	r3, r2
 8000dfa:	6033      	str	r3, [r6, #0]
 8000dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e00:	4607      	mov	r7, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	b10a      	cbz	r2, 8000e0a <_printf_common+0x26>
 8000e06:	3301      	adds	r3, #1
 8000e08:	6033      	str	r3, [r6, #0]
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	0699      	lsls	r1, r3, #26
 8000e0e:	bf42      	ittt	mi
 8000e10:	6833      	ldrmi	r3, [r6, #0]
 8000e12:	3302      	addmi	r3, #2
 8000e14:	6033      	strmi	r3, [r6, #0]
 8000e16:	6825      	ldr	r5, [r4, #0]
 8000e18:	f015 0506 	ands.w	r5, r5, #6
 8000e1c:	d106      	bne.n	8000e2c <_printf_common+0x48>
 8000e1e:	f104 0a19 	add.w	sl, r4, #25
 8000e22:	68e3      	ldr	r3, [r4, #12]
 8000e24:	6832      	ldr	r2, [r6, #0]
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	dc26      	bgt.n	8000e7a <_printf_common+0x96>
 8000e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e30:	1e13      	subs	r3, r2, #0
 8000e32:	6822      	ldr	r2, [r4, #0]
 8000e34:	bf18      	it	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	0692      	lsls	r2, r2, #26
 8000e3a:	d42b      	bmi.n	8000e94 <_printf_common+0xb0>
 8000e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e40:	4649      	mov	r1, r9
 8000e42:	4638      	mov	r0, r7
 8000e44:	47c0      	blx	r8
 8000e46:	3001      	adds	r0, #1
 8000e48:	d01e      	beq.n	8000e88 <_printf_common+0xa4>
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	68e5      	ldr	r5, [r4, #12]
 8000e4e:	6832      	ldr	r2, [r6, #0]
 8000e50:	f003 0306 	and.w	r3, r3, #6
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	bf08      	it	eq
 8000e58:	1aad      	subeq	r5, r5, r2
 8000e5a:	68a3      	ldr	r3, [r4, #8]
 8000e5c:	6922      	ldr	r2, [r4, #16]
 8000e5e:	bf0c      	ite	eq
 8000e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e64:	2500      	movne	r5, #0
 8000e66:	4293      	cmp	r3, r2
 8000e68:	bfc4      	itt	gt
 8000e6a:	1a9b      	subgt	r3, r3, r2
 8000e6c:	18ed      	addgt	r5, r5, r3
 8000e6e:	2600      	movs	r6, #0
 8000e70:	341a      	adds	r4, #26
 8000e72:	42b5      	cmp	r5, r6
 8000e74:	d11a      	bne.n	8000eac <_printf_common+0xc8>
 8000e76:	2000      	movs	r0, #0
 8000e78:	e008      	b.n	8000e8c <_printf_common+0xa8>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	4649      	mov	r1, r9
 8000e80:	4638      	mov	r0, r7
 8000e82:	47c0      	blx	r8
 8000e84:	3001      	adds	r0, #1
 8000e86:	d103      	bne.n	8000e90 <_printf_common+0xac>
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	3501      	adds	r5, #1
 8000e92:	e7c6      	b.n	8000e22 <_printf_common+0x3e>
 8000e94:	18e1      	adds	r1, r4, r3
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	2030      	movs	r0, #48	; 0x30
 8000e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e9e:	4422      	add	r2, r4
 8000ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	e7c7      	b.n	8000e3c <_printf_common+0x58>
 8000eac:	2301      	movs	r3, #1
 8000eae:	4622      	mov	r2, r4
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	47c0      	blx	r8
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d0e6      	beq.n	8000e88 <_printf_common+0xa4>
 8000eba:	3601      	adds	r6, #1
 8000ebc:	e7d9      	b.n	8000e72 <_printf_common+0x8e>
	...

08000ec0 <_printf_i>:
 8000ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec4:	7e0f      	ldrb	r7, [r1, #24]
 8000ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ec8:	2f78      	cmp	r7, #120	; 0x78
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4680      	mov	r8, r0
 8000ece:	460c      	mov	r4, r1
 8000ed0:	469a      	mov	sl, r3
 8000ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ed6:	d807      	bhi.n	8000ee8 <_printf_i+0x28>
 8000ed8:	2f62      	cmp	r7, #98	; 0x62
 8000eda:	d80a      	bhi.n	8000ef2 <_printf_i+0x32>
 8000edc:	2f00      	cmp	r7, #0
 8000ede:	f000 80d8 	beq.w	8001092 <_printf_i+0x1d2>
 8000ee2:	2f58      	cmp	r7, #88	; 0x58
 8000ee4:	f000 80a3 	beq.w	800102e <_printf_i+0x16e>
 8000ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ef0:	e03a      	b.n	8000f68 <_printf_i+0xa8>
 8000ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ef6:	2b15      	cmp	r3, #21
 8000ef8:	d8f6      	bhi.n	8000ee8 <_printf_i+0x28>
 8000efa:	a101      	add	r1, pc, #4	; (adr r1, 8000f00 <_printf_i+0x40>)
 8000efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f00:	08000f59 	.word	0x08000f59
 8000f04:	08000f6d 	.word	0x08000f6d
 8000f08:	08000ee9 	.word	0x08000ee9
 8000f0c:	08000ee9 	.word	0x08000ee9
 8000f10:	08000ee9 	.word	0x08000ee9
 8000f14:	08000ee9 	.word	0x08000ee9
 8000f18:	08000f6d 	.word	0x08000f6d
 8000f1c:	08000ee9 	.word	0x08000ee9
 8000f20:	08000ee9 	.word	0x08000ee9
 8000f24:	08000ee9 	.word	0x08000ee9
 8000f28:	08000ee9 	.word	0x08000ee9
 8000f2c:	08001079 	.word	0x08001079
 8000f30:	08000f9d 	.word	0x08000f9d
 8000f34:	0800105b 	.word	0x0800105b
 8000f38:	08000ee9 	.word	0x08000ee9
 8000f3c:	08000ee9 	.word	0x08000ee9
 8000f40:	0800109b 	.word	0x0800109b
 8000f44:	08000ee9 	.word	0x08000ee9
 8000f48:	08000f9d 	.word	0x08000f9d
 8000f4c:	08000ee9 	.word	0x08000ee9
 8000f50:	08000ee9 	.word	0x08000ee9
 8000f54:	08001063 	.word	0x08001063
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	1d1a      	adds	r2, r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	602a      	str	r2, [r5, #0]
 8000f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0a3      	b.n	80010b4 <_printf_i+0x1f4>
 8000f6c:	6820      	ldr	r0, [r4, #0]
 8000f6e:	6829      	ldr	r1, [r5, #0]
 8000f70:	0606      	lsls	r6, r0, #24
 8000f72:	f101 0304 	add.w	r3, r1, #4
 8000f76:	d50a      	bpl.n	8000f8e <_printf_i+0xce>
 8000f78:	680e      	ldr	r6, [r1, #0]
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	da03      	bge.n	8000f88 <_printf_i+0xc8>
 8000f80:	232d      	movs	r3, #45	; 0x2d
 8000f82:	4276      	negs	r6, r6
 8000f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f88:	485e      	ldr	r0, [pc, #376]	; (8001104 <_printf_i+0x244>)
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	e019      	b.n	8000fc2 <_printf_i+0x102>
 8000f8e:	680e      	ldr	r6, [r1, #0]
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f96:	bf18      	it	ne
 8000f98:	b236      	sxthne	r6, r6
 8000f9a:	e7ef      	b.n	8000f7c <_printf_i+0xbc>
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	6820      	ldr	r0, [r4, #0]
 8000fa0:	1d19      	adds	r1, r3, #4
 8000fa2:	6029      	str	r1, [r5, #0]
 8000fa4:	0601      	lsls	r1, r0, #24
 8000fa6:	d501      	bpl.n	8000fac <_printf_i+0xec>
 8000fa8:	681e      	ldr	r6, [r3, #0]
 8000faa:	e002      	b.n	8000fb2 <_printf_i+0xf2>
 8000fac:	0646      	lsls	r6, r0, #25
 8000fae:	d5fb      	bpl.n	8000fa8 <_printf_i+0xe8>
 8000fb0:	881e      	ldrh	r6, [r3, #0]
 8000fb2:	4854      	ldr	r0, [pc, #336]	; (8001104 <_printf_i+0x244>)
 8000fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8000fb6:	bf0c      	ite	eq
 8000fb8:	2308      	moveq	r3, #8
 8000fba:	230a      	movne	r3, #10
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fc2:	6865      	ldr	r5, [r4, #4]
 8000fc4:	60a5      	str	r5, [r4, #8]
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	bfa2      	ittt	ge
 8000fca:	6821      	ldrge	r1, [r4, #0]
 8000fcc:	f021 0104 	bicge.w	r1, r1, #4
 8000fd0:	6021      	strge	r1, [r4, #0]
 8000fd2:	b90e      	cbnz	r6, 8000fd8 <_printf_i+0x118>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d04d      	beq.n	8001074 <_printf_i+0x1b4>
 8000fd8:	4615      	mov	r5, r2
 8000fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fde:	fb03 6711 	mls	r7, r3, r1, r6
 8000fe2:	5dc7      	ldrb	r7, [r0, r7]
 8000fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fe8:	4637      	mov	r7, r6
 8000fea:	42bb      	cmp	r3, r7
 8000fec:	460e      	mov	r6, r1
 8000fee:	d9f4      	bls.n	8000fda <_printf_i+0x11a>
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d10b      	bne.n	800100c <_printf_i+0x14c>
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	07de      	lsls	r6, r3, #31
 8000ff8:	d508      	bpl.n	800100c <_printf_i+0x14c>
 8000ffa:	6923      	ldr	r3, [r4, #16]
 8000ffc:	6861      	ldr	r1, [r4, #4]
 8000ffe:	4299      	cmp	r1, r3
 8001000:	bfde      	ittt	le
 8001002:	2330      	movle	r3, #48	; 0x30
 8001004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001008:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800100c:	1b52      	subs	r2, r2, r5
 800100e:	6122      	str	r2, [r4, #16]
 8001010:	f8cd a000 	str.w	sl, [sp]
 8001014:	464b      	mov	r3, r9
 8001016:	aa03      	add	r2, sp, #12
 8001018:	4621      	mov	r1, r4
 800101a:	4640      	mov	r0, r8
 800101c:	f7ff fee2 	bl	8000de4 <_printf_common>
 8001020:	3001      	adds	r0, #1
 8001022:	d14c      	bne.n	80010be <_printf_i+0x1fe>
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	b004      	add	sp, #16
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	4835      	ldr	r0, [pc, #212]	; (8001104 <_printf_i+0x244>)
 8001030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001034:	6829      	ldr	r1, [r5, #0]
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f851 6b04 	ldr.w	r6, [r1], #4
 800103c:	6029      	str	r1, [r5, #0]
 800103e:	061d      	lsls	r5, r3, #24
 8001040:	d514      	bpl.n	800106c <_printf_i+0x1ac>
 8001042:	07df      	lsls	r7, r3, #31
 8001044:	bf44      	itt	mi
 8001046:	f043 0320 	orrmi.w	r3, r3, #32
 800104a:	6023      	strmi	r3, [r4, #0]
 800104c:	b91e      	cbnz	r6, 8001056 <_printf_i+0x196>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	f023 0320 	bic.w	r3, r3, #32
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	2310      	movs	r3, #16
 8001058:	e7b0      	b.n	8000fbc <_printf_i+0xfc>
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6023      	str	r3, [r4, #0]
 8001062:	2378      	movs	r3, #120	; 0x78
 8001064:	4828      	ldr	r0, [pc, #160]	; (8001108 <_printf_i+0x248>)
 8001066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800106a:	e7e3      	b.n	8001034 <_printf_i+0x174>
 800106c:	0659      	lsls	r1, r3, #25
 800106e:	bf48      	it	mi
 8001070:	b2b6      	uxthmi	r6, r6
 8001072:	e7e6      	b.n	8001042 <_printf_i+0x182>
 8001074:	4615      	mov	r5, r2
 8001076:	e7bb      	b.n	8000ff0 <_printf_i+0x130>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	6826      	ldr	r6, [r4, #0]
 800107c:	6961      	ldr	r1, [r4, #20]
 800107e:	1d18      	adds	r0, r3, #4
 8001080:	6028      	str	r0, [r5, #0]
 8001082:	0635      	lsls	r5, r6, #24
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	d501      	bpl.n	800108c <_printf_i+0x1cc>
 8001088:	6019      	str	r1, [r3, #0]
 800108a:	e002      	b.n	8001092 <_printf_i+0x1d2>
 800108c:	0670      	lsls	r0, r6, #25
 800108e:	d5fb      	bpl.n	8001088 <_printf_i+0x1c8>
 8001090:	8019      	strh	r1, [r3, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	6123      	str	r3, [r4, #16]
 8001096:	4615      	mov	r5, r2
 8001098:	e7ba      	b.n	8001010 <_printf_i+0x150>
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	1d1a      	adds	r2, r3, #4
 800109e:	602a      	str	r2, [r5, #0]
 80010a0:	681d      	ldr	r5, [r3, #0]
 80010a2:	6862      	ldr	r2, [r4, #4]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4628      	mov	r0, r5
 80010a8:	f7ff f89a 	bl	80001e0 <memchr>
 80010ac:	b108      	cbz	r0, 80010b2 <_printf_i+0x1f2>
 80010ae:	1b40      	subs	r0, r0, r5
 80010b0:	6060      	str	r0, [r4, #4]
 80010b2:	6863      	ldr	r3, [r4, #4]
 80010b4:	6123      	str	r3, [r4, #16]
 80010b6:	2300      	movs	r3, #0
 80010b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010bc:	e7a8      	b.n	8001010 <_printf_i+0x150>
 80010be:	6923      	ldr	r3, [r4, #16]
 80010c0:	462a      	mov	r2, r5
 80010c2:	4649      	mov	r1, r9
 80010c4:	4640      	mov	r0, r8
 80010c6:	47d0      	blx	sl
 80010c8:	3001      	adds	r0, #1
 80010ca:	d0ab      	beq.n	8001024 <_printf_i+0x164>
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	079b      	lsls	r3, r3, #30
 80010d0:	d413      	bmi.n	80010fa <_printf_i+0x23a>
 80010d2:	68e0      	ldr	r0, [r4, #12]
 80010d4:	9b03      	ldr	r3, [sp, #12]
 80010d6:	4298      	cmp	r0, r3
 80010d8:	bfb8      	it	lt
 80010da:	4618      	movlt	r0, r3
 80010dc:	e7a4      	b.n	8001028 <_printf_i+0x168>
 80010de:	2301      	movs	r3, #1
 80010e0:	4632      	mov	r2, r6
 80010e2:	4649      	mov	r1, r9
 80010e4:	4640      	mov	r0, r8
 80010e6:	47d0      	blx	sl
 80010e8:	3001      	adds	r0, #1
 80010ea:	d09b      	beq.n	8001024 <_printf_i+0x164>
 80010ec:	3501      	adds	r5, #1
 80010ee:	68e3      	ldr	r3, [r4, #12]
 80010f0:	9903      	ldr	r1, [sp, #12]
 80010f2:	1a5b      	subs	r3, r3, r1
 80010f4:	42ab      	cmp	r3, r5
 80010f6:	dcf2      	bgt.n	80010de <_printf_i+0x21e>
 80010f8:	e7eb      	b.n	80010d2 <_printf_i+0x212>
 80010fa:	2500      	movs	r5, #0
 80010fc:	f104 0619 	add.w	r6, r4, #25
 8001100:	e7f5      	b.n	80010ee <_printf_i+0x22e>
 8001102:	bf00      	nop
 8001104:	08001abd 	.word	0x08001abd
 8001108:	08001ace 	.word	0x08001ace

0800110c <__swbuf_r>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	460e      	mov	r6, r1
 8001110:	4614      	mov	r4, r2
 8001112:	4605      	mov	r5, r0
 8001114:	b118      	cbz	r0, 800111e <__swbuf_r+0x12>
 8001116:	6983      	ldr	r3, [r0, #24]
 8001118:	b90b      	cbnz	r3, 800111e <__swbuf_r+0x12>
 800111a:	f000 f9d1 	bl	80014c0 <__sinit>
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <__swbuf_r+0x98>)
 8001120:	429c      	cmp	r4, r3
 8001122:	d12b      	bne.n	800117c <__swbuf_r+0x70>
 8001124:	686c      	ldr	r4, [r5, #4]
 8001126:	69a3      	ldr	r3, [r4, #24]
 8001128:	60a3      	str	r3, [r4, #8]
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	071a      	lsls	r2, r3, #28
 800112e:	d52f      	bpl.n	8001190 <__swbuf_r+0x84>
 8001130:	6923      	ldr	r3, [r4, #16]
 8001132:	b36b      	cbz	r3, 8001190 <__swbuf_r+0x84>
 8001134:	6923      	ldr	r3, [r4, #16]
 8001136:	6820      	ldr	r0, [r4, #0]
 8001138:	1ac0      	subs	r0, r0, r3
 800113a:	6963      	ldr	r3, [r4, #20]
 800113c:	b2f6      	uxtb	r6, r6
 800113e:	4283      	cmp	r3, r0
 8001140:	4637      	mov	r7, r6
 8001142:	dc04      	bgt.n	800114e <__swbuf_r+0x42>
 8001144:	4621      	mov	r1, r4
 8001146:	4628      	mov	r0, r5
 8001148:	f000 f926 	bl	8001398 <_fflush_r>
 800114c:	bb30      	cbnz	r0, 800119c <__swbuf_r+0x90>
 800114e:	68a3      	ldr	r3, [r4, #8]
 8001150:	3b01      	subs	r3, #1
 8001152:	60a3      	str	r3, [r4, #8]
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	6022      	str	r2, [r4, #0]
 800115a:	701e      	strb	r6, [r3, #0]
 800115c:	6963      	ldr	r3, [r4, #20]
 800115e:	3001      	adds	r0, #1
 8001160:	4283      	cmp	r3, r0
 8001162:	d004      	beq.n	800116e <__swbuf_r+0x62>
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	07db      	lsls	r3, r3, #31
 8001168:	d506      	bpl.n	8001178 <__swbuf_r+0x6c>
 800116a:	2e0a      	cmp	r6, #10
 800116c:	d104      	bne.n	8001178 <__swbuf_r+0x6c>
 800116e:	4621      	mov	r1, r4
 8001170:	4628      	mov	r0, r5
 8001172:	f000 f911 	bl	8001398 <_fflush_r>
 8001176:	b988      	cbnz	r0, 800119c <__swbuf_r+0x90>
 8001178:	4638      	mov	r0, r7
 800117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <__swbuf_r+0x9c>)
 800117e:	429c      	cmp	r4, r3
 8001180:	d101      	bne.n	8001186 <__swbuf_r+0x7a>
 8001182:	68ac      	ldr	r4, [r5, #8]
 8001184:	e7cf      	b.n	8001126 <__swbuf_r+0x1a>
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <__swbuf_r+0xa0>)
 8001188:	429c      	cmp	r4, r3
 800118a:	bf08      	it	eq
 800118c:	68ec      	ldreq	r4, [r5, #12]
 800118e:	e7ca      	b.n	8001126 <__swbuf_r+0x1a>
 8001190:	4621      	mov	r1, r4
 8001192:	4628      	mov	r0, r5
 8001194:	f000 f80c 	bl	80011b0 <__swsetup_r>
 8001198:	2800      	cmp	r0, #0
 800119a:	d0cb      	beq.n	8001134 <__swbuf_r+0x28>
 800119c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80011a0:	e7ea      	b.n	8001178 <__swbuf_r+0x6c>
 80011a2:	bf00      	nop
 80011a4:	08001b00 	.word	0x08001b00
 80011a8:	08001b20 	.word	0x08001b20
 80011ac:	08001ae0 	.word	0x08001ae0

080011b0 <__swsetup_r>:
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <__swsetup_r+0xcc>)
 80011b2:	b570      	push	{r4, r5, r6, lr}
 80011b4:	681d      	ldr	r5, [r3, #0]
 80011b6:	4606      	mov	r6, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	b125      	cbz	r5, 80011c6 <__swsetup_r+0x16>
 80011bc:	69ab      	ldr	r3, [r5, #24]
 80011be:	b913      	cbnz	r3, 80011c6 <__swsetup_r+0x16>
 80011c0:	4628      	mov	r0, r5
 80011c2:	f000 f97d 	bl	80014c0 <__sinit>
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <__swsetup_r+0xd0>)
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d10f      	bne.n	80011ec <__swsetup_r+0x3c>
 80011cc:	686c      	ldr	r4, [r5, #4]
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011d4:	0719      	lsls	r1, r3, #28
 80011d6:	d42c      	bmi.n	8001232 <__swsetup_r+0x82>
 80011d8:	06dd      	lsls	r5, r3, #27
 80011da:	d411      	bmi.n	8001200 <__swsetup_r+0x50>
 80011dc:	2309      	movs	r3, #9
 80011de:	6033      	str	r3, [r6, #0]
 80011e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011e4:	81a3      	strh	r3, [r4, #12]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ea:	e03e      	b.n	800126a <__swsetup_r+0xba>
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <__swsetup_r+0xd4>)
 80011ee:	429c      	cmp	r4, r3
 80011f0:	d101      	bne.n	80011f6 <__swsetup_r+0x46>
 80011f2:	68ac      	ldr	r4, [r5, #8]
 80011f4:	e7eb      	b.n	80011ce <__swsetup_r+0x1e>
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <__swsetup_r+0xd8>)
 80011f8:	429c      	cmp	r4, r3
 80011fa:	bf08      	it	eq
 80011fc:	68ec      	ldreq	r4, [r5, #12]
 80011fe:	e7e6      	b.n	80011ce <__swsetup_r+0x1e>
 8001200:	0758      	lsls	r0, r3, #29
 8001202:	d512      	bpl.n	800122a <__swsetup_r+0x7a>
 8001204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001206:	b141      	cbz	r1, 800121a <__swsetup_r+0x6a>
 8001208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800120c:	4299      	cmp	r1, r3
 800120e:	d002      	beq.n	8001216 <__swsetup_r+0x66>
 8001210:	4630      	mov	r0, r6
 8001212:	f000 fa5b 	bl	80016cc <_free_r>
 8001216:	2300      	movs	r3, #0
 8001218:	6363      	str	r3, [r4, #52]	; 0x34
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001220:	81a3      	strh	r3, [r4, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	6063      	str	r3, [r4, #4]
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	89a3      	ldrh	r3, [r4, #12]
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	b94b      	cbnz	r3, 800124a <__swsetup_r+0x9a>
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001240:	d003      	beq.n	800124a <__swsetup_r+0x9a>
 8001242:	4621      	mov	r1, r4
 8001244:	4630      	mov	r0, r6
 8001246:	f000 fa01 	bl	800164c <__smakebuf_r>
 800124a:	89a0      	ldrh	r0, [r4, #12]
 800124c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001250:	f010 0301 	ands.w	r3, r0, #1
 8001254:	d00a      	beq.n	800126c <__swsetup_r+0xbc>
 8001256:	2300      	movs	r3, #0
 8001258:	60a3      	str	r3, [r4, #8]
 800125a:	6963      	ldr	r3, [r4, #20]
 800125c:	425b      	negs	r3, r3
 800125e:	61a3      	str	r3, [r4, #24]
 8001260:	6923      	ldr	r3, [r4, #16]
 8001262:	b943      	cbnz	r3, 8001276 <__swsetup_r+0xc6>
 8001264:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001268:	d1ba      	bne.n	80011e0 <__swsetup_r+0x30>
 800126a:	bd70      	pop	{r4, r5, r6, pc}
 800126c:	0781      	lsls	r1, r0, #30
 800126e:	bf58      	it	pl
 8001270:	6963      	ldrpl	r3, [r4, #20]
 8001272:	60a3      	str	r3, [r4, #8]
 8001274:	e7f4      	b.n	8001260 <__swsetup_r+0xb0>
 8001276:	2000      	movs	r0, #0
 8001278:	e7f7      	b.n	800126a <__swsetup_r+0xba>
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	08001b00 	.word	0x08001b00
 8001284:	08001b20 	.word	0x08001b20
 8001288:	08001ae0 	.word	0x08001ae0

0800128c <__sflush_r>:
 800128c:	898a      	ldrh	r2, [r1, #12]
 800128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001292:	4605      	mov	r5, r0
 8001294:	0710      	lsls	r0, r2, #28
 8001296:	460c      	mov	r4, r1
 8001298:	d458      	bmi.n	800134c <__sflush_r+0xc0>
 800129a:	684b      	ldr	r3, [r1, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc05      	bgt.n	80012ac <__sflush_r+0x20>
 80012a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dc02      	bgt.n	80012ac <__sflush_r+0x20>
 80012a6:	2000      	movs	r0, #0
 80012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ae:	2e00      	cmp	r6, #0
 80012b0:	d0f9      	beq.n	80012a6 <__sflush_r+0x1a>
 80012b2:	2300      	movs	r3, #0
 80012b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012b8:	682f      	ldr	r7, [r5, #0]
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	d032      	beq.n	8001324 <__sflush_r+0x98>
 80012be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012c0:	89a3      	ldrh	r3, [r4, #12]
 80012c2:	075a      	lsls	r2, r3, #29
 80012c4:	d505      	bpl.n	80012d2 <__sflush_r+0x46>
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	1ac0      	subs	r0, r0, r3
 80012ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012cc:	b10b      	cbz	r3, 80012d2 <__sflush_r+0x46>
 80012ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d0:	1ac0      	subs	r0, r0, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	4602      	mov	r2, r0
 80012d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012d8:	6a21      	ldr	r1, [r4, #32]
 80012da:	4628      	mov	r0, r5
 80012dc:	47b0      	blx	r6
 80012de:	1c43      	adds	r3, r0, #1
 80012e0:	89a3      	ldrh	r3, [r4, #12]
 80012e2:	d106      	bne.n	80012f2 <__sflush_r+0x66>
 80012e4:	6829      	ldr	r1, [r5, #0]
 80012e6:	291d      	cmp	r1, #29
 80012e8:	d82c      	bhi.n	8001344 <__sflush_r+0xb8>
 80012ea:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <__sflush_r+0x108>)
 80012ec:	40ca      	lsrs	r2, r1
 80012ee:	07d6      	lsls	r6, r2, #31
 80012f0:	d528      	bpl.n	8001344 <__sflush_r+0xb8>
 80012f2:	2200      	movs	r2, #0
 80012f4:	6062      	str	r2, [r4, #4]
 80012f6:	04d9      	lsls	r1, r3, #19
 80012f8:	6922      	ldr	r2, [r4, #16]
 80012fa:	6022      	str	r2, [r4, #0]
 80012fc:	d504      	bpl.n	8001308 <__sflush_r+0x7c>
 80012fe:	1c42      	adds	r2, r0, #1
 8001300:	d101      	bne.n	8001306 <__sflush_r+0x7a>
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	b903      	cbnz	r3, 8001308 <__sflush_r+0x7c>
 8001306:	6560      	str	r0, [r4, #84]	; 0x54
 8001308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800130a:	602f      	str	r7, [r5, #0]
 800130c:	2900      	cmp	r1, #0
 800130e:	d0ca      	beq.n	80012a6 <__sflush_r+0x1a>
 8001310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001314:	4299      	cmp	r1, r3
 8001316:	d002      	beq.n	800131e <__sflush_r+0x92>
 8001318:	4628      	mov	r0, r5
 800131a:	f000 f9d7 	bl	80016cc <_free_r>
 800131e:	2000      	movs	r0, #0
 8001320:	6360      	str	r0, [r4, #52]	; 0x34
 8001322:	e7c1      	b.n	80012a8 <__sflush_r+0x1c>
 8001324:	6a21      	ldr	r1, [r4, #32]
 8001326:	2301      	movs	r3, #1
 8001328:	4628      	mov	r0, r5
 800132a:	47b0      	blx	r6
 800132c:	1c41      	adds	r1, r0, #1
 800132e:	d1c7      	bne.n	80012c0 <__sflush_r+0x34>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0c4      	beq.n	80012c0 <__sflush_r+0x34>
 8001336:	2b1d      	cmp	r3, #29
 8001338:	d001      	beq.n	800133e <__sflush_r+0xb2>
 800133a:	2b16      	cmp	r3, #22
 800133c:	d101      	bne.n	8001342 <__sflush_r+0xb6>
 800133e:	602f      	str	r7, [r5, #0]
 8001340:	e7b1      	b.n	80012a6 <__sflush_r+0x1a>
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001348:	81a3      	strh	r3, [r4, #12]
 800134a:	e7ad      	b.n	80012a8 <__sflush_r+0x1c>
 800134c:	690f      	ldr	r7, [r1, #16]
 800134e:	2f00      	cmp	r7, #0
 8001350:	d0a9      	beq.n	80012a6 <__sflush_r+0x1a>
 8001352:	0793      	lsls	r3, r2, #30
 8001354:	680e      	ldr	r6, [r1, #0]
 8001356:	bf08      	it	eq
 8001358:	694b      	ldreq	r3, [r1, #20]
 800135a:	600f      	str	r7, [r1, #0]
 800135c:	bf18      	it	ne
 800135e:	2300      	movne	r3, #0
 8001360:	eba6 0807 	sub.w	r8, r6, r7
 8001364:	608b      	str	r3, [r1, #8]
 8001366:	f1b8 0f00 	cmp.w	r8, #0
 800136a:	dd9c      	ble.n	80012a6 <__sflush_r+0x1a>
 800136c:	6a21      	ldr	r1, [r4, #32]
 800136e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001370:	4643      	mov	r3, r8
 8001372:	463a      	mov	r2, r7
 8001374:	4628      	mov	r0, r5
 8001376:	47b0      	blx	r6
 8001378:	2800      	cmp	r0, #0
 800137a:	dc06      	bgt.n	800138a <__sflush_r+0xfe>
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	81a3      	strh	r3, [r4, #12]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001388:	e78e      	b.n	80012a8 <__sflush_r+0x1c>
 800138a:	4407      	add	r7, r0
 800138c:	eba8 0800 	sub.w	r8, r8, r0
 8001390:	e7e9      	b.n	8001366 <__sflush_r+0xda>
 8001392:	bf00      	nop
 8001394:	20400001 	.word	0x20400001

08001398 <_fflush_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	690b      	ldr	r3, [r1, #16]
 800139c:	4605      	mov	r5, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	b913      	cbnz	r3, 80013a8 <_fflush_r+0x10>
 80013a2:	2500      	movs	r5, #0
 80013a4:	4628      	mov	r0, r5
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	b118      	cbz	r0, 80013b2 <_fflush_r+0x1a>
 80013aa:	6983      	ldr	r3, [r0, #24]
 80013ac:	b90b      	cbnz	r3, 80013b2 <_fflush_r+0x1a>
 80013ae:	f000 f887 	bl	80014c0 <__sinit>
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <_fflush_r+0x6c>)
 80013b4:	429c      	cmp	r4, r3
 80013b6:	d11b      	bne.n	80013f0 <_fflush_r+0x58>
 80013b8:	686c      	ldr	r4, [r5, #4]
 80013ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ef      	beq.n	80013a2 <_fflush_r+0xa>
 80013c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013c4:	07d0      	lsls	r0, r2, #31
 80013c6:	d404      	bmi.n	80013d2 <_fflush_r+0x3a>
 80013c8:	0599      	lsls	r1, r3, #22
 80013ca:	d402      	bmi.n	80013d2 <_fflush_r+0x3a>
 80013cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ce:	f000 f915 	bl	80015fc <__retarget_lock_acquire_recursive>
 80013d2:	4628      	mov	r0, r5
 80013d4:	4621      	mov	r1, r4
 80013d6:	f7ff ff59 	bl	800128c <__sflush_r>
 80013da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013dc:	07da      	lsls	r2, r3, #31
 80013de:	4605      	mov	r5, r0
 80013e0:	d4e0      	bmi.n	80013a4 <_fflush_r+0xc>
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	059b      	lsls	r3, r3, #22
 80013e6:	d4dd      	bmi.n	80013a4 <_fflush_r+0xc>
 80013e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ea:	f000 f908 	bl	80015fe <__retarget_lock_release_recursive>
 80013ee:	e7d9      	b.n	80013a4 <_fflush_r+0xc>
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <_fflush_r+0x70>)
 80013f2:	429c      	cmp	r4, r3
 80013f4:	d101      	bne.n	80013fa <_fflush_r+0x62>
 80013f6:	68ac      	ldr	r4, [r5, #8]
 80013f8:	e7df      	b.n	80013ba <_fflush_r+0x22>
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <_fflush_r+0x74>)
 80013fc:	429c      	cmp	r4, r3
 80013fe:	bf08      	it	eq
 8001400:	68ec      	ldreq	r4, [r5, #12]
 8001402:	e7da      	b.n	80013ba <_fflush_r+0x22>
 8001404:	08001b00 	.word	0x08001b00
 8001408:	08001b20 	.word	0x08001b20
 800140c:	08001ae0 	.word	0x08001ae0

08001410 <std>:
 8001410:	2300      	movs	r3, #0
 8001412:	b510      	push	{r4, lr}
 8001414:	4604      	mov	r4, r0
 8001416:	e9c0 3300 	strd	r3, r3, [r0]
 800141a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800141e:	6083      	str	r3, [r0, #8]
 8001420:	8181      	strh	r1, [r0, #12]
 8001422:	6643      	str	r3, [r0, #100]	; 0x64
 8001424:	81c2      	strh	r2, [r0, #14]
 8001426:	6183      	str	r3, [r0, #24]
 8001428:	4619      	mov	r1, r3
 800142a:	2208      	movs	r2, #8
 800142c:	305c      	adds	r0, #92	; 0x5c
 800142e:	f7ff fb77 	bl	8000b20 <memset>
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <std+0x38>)
 8001434:	6263      	str	r3, [r4, #36]	; 0x24
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <std+0x3c>)
 8001438:	62a3      	str	r3, [r4, #40]	; 0x28
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <std+0x40>)
 800143c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <std+0x44>)
 8001440:	6224      	str	r4, [r4, #32]
 8001442:	6323      	str	r3, [r4, #48]	; 0x30
 8001444:	bd10      	pop	{r4, pc}
 8001446:	bf00      	nop
 8001448:	080018ad 	.word	0x080018ad
 800144c:	080018cf 	.word	0x080018cf
 8001450:	08001907 	.word	0x08001907
 8001454:	0800192b 	.word	0x0800192b

08001458 <_cleanup_r>:
 8001458:	4901      	ldr	r1, [pc, #4]	; (8001460 <_cleanup_r+0x8>)
 800145a:	f000 b8af 	b.w	80015bc <_fwalk_reent>
 800145e:	bf00      	nop
 8001460:	08001399 	.word	0x08001399

08001464 <__sfmoreglue>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	2268      	movs	r2, #104	; 0x68
 8001468:	1e4d      	subs	r5, r1, #1
 800146a:	4355      	muls	r5, r2
 800146c:	460e      	mov	r6, r1
 800146e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001472:	f000 f997 	bl	80017a4 <_malloc_r>
 8001476:	4604      	mov	r4, r0
 8001478:	b140      	cbz	r0, 800148c <__sfmoreglue+0x28>
 800147a:	2100      	movs	r1, #0
 800147c:	e9c0 1600 	strd	r1, r6, [r0]
 8001480:	300c      	adds	r0, #12
 8001482:	60a0      	str	r0, [r4, #8]
 8001484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001488:	f7ff fb4a 	bl	8000b20 <memset>
 800148c:	4620      	mov	r0, r4
 800148e:	bd70      	pop	{r4, r5, r6, pc}

08001490 <__sfp_lock_acquire>:
 8001490:	4801      	ldr	r0, [pc, #4]	; (8001498 <__sfp_lock_acquire+0x8>)
 8001492:	f000 b8b3 	b.w	80015fc <__retarget_lock_acquire_recursive>
 8001496:	bf00      	nop
 8001498:	20001141 	.word	0x20001141

0800149c <__sfp_lock_release>:
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <__sfp_lock_release+0x8>)
 800149e:	f000 b8ae 	b.w	80015fe <__retarget_lock_release_recursive>
 80014a2:	bf00      	nop
 80014a4:	20001141 	.word	0x20001141

080014a8 <__sinit_lock_acquire>:
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__sinit_lock_acquire+0x8>)
 80014aa:	f000 b8a7 	b.w	80015fc <__retarget_lock_acquire_recursive>
 80014ae:	bf00      	nop
 80014b0:	20001142 	.word	0x20001142

080014b4 <__sinit_lock_release>:
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <__sinit_lock_release+0x8>)
 80014b6:	f000 b8a2 	b.w	80015fe <__retarget_lock_release_recursive>
 80014ba:	bf00      	nop
 80014bc:	20001142 	.word	0x20001142

080014c0 <__sinit>:
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4604      	mov	r4, r0
 80014c4:	f7ff fff0 	bl	80014a8 <__sinit_lock_acquire>
 80014c8:	69a3      	ldr	r3, [r4, #24]
 80014ca:	b11b      	cbz	r3, 80014d4 <__sinit+0x14>
 80014cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d0:	f7ff bff0 	b.w	80014b4 <__sinit_lock_release>
 80014d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80014d8:	6523      	str	r3, [r4, #80]	; 0x50
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <__sinit+0x68>)
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <__sinit+0x6c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	bf04      	itt	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	61a3      	streq	r3, [r4, #24]
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 f820 	bl	8001530 <__sfp>
 80014f0:	6060      	str	r0, [r4, #4]
 80014f2:	4620      	mov	r0, r4
 80014f4:	f000 f81c 	bl	8001530 <__sfp>
 80014f8:	60a0      	str	r0, [r4, #8]
 80014fa:	4620      	mov	r0, r4
 80014fc:	f000 f818 	bl	8001530 <__sfp>
 8001500:	2200      	movs	r2, #0
 8001502:	60e0      	str	r0, [r4, #12]
 8001504:	2104      	movs	r1, #4
 8001506:	6860      	ldr	r0, [r4, #4]
 8001508:	f7ff ff82 	bl	8001410 <std>
 800150c:	68a0      	ldr	r0, [r4, #8]
 800150e:	2201      	movs	r2, #1
 8001510:	2109      	movs	r1, #9
 8001512:	f7ff ff7d 	bl	8001410 <std>
 8001516:	68e0      	ldr	r0, [r4, #12]
 8001518:	2202      	movs	r2, #2
 800151a:	2112      	movs	r1, #18
 800151c:	f7ff ff78 	bl	8001410 <std>
 8001520:	2301      	movs	r3, #1
 8001522:	61a3      	str	r3, [r4, #24]
 8001524:	e7d2      	b.n	80014cc <__sinit+0xc>
 8001526:	bf00      	nop
 8001528:	08001aa8 	.word	0x08001aa8
 800152c:	08001459 	.word	0x08001459

08001530 <__sfp>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	4607      	mov	r7, r0
 8001534:	f7ff ffac 	bl	8001490 <__sfp_lock_acquire>
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <__sfp+0x84>)
 800153a:	681e      	ldr	r6, [r3, #0]
 800153c:	69b3      	ldr	r3, [r6, #24]
 800153e:	b913      	cbnz	r3, 8001546 <__sfp+0x16>
 8001540:	4630      	mov	r0, r6
 8001542:	f7ff ffbd 	bl	80014c0 <__sinit>
 8001546:	3648      	adds	r6, #72	; 0x48
 8001548:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800154c:	3b01      	subs	r3, #1
 800154e:	d503      	bpl.n	8001558 <__sfp+0x28>
 8001550:	6833      	ldr	r3, [r6, #0]
 8001552:	b30b      	cbz	r3, 8001598 <__sfp+0x68>
 8001554:	6836      	ldr	r6, [r6, #0]
 8001556:	e7f7      	b.n	8001548 <__sfp+0x18>
 8001558:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800155c:	b9d5      	cbnz	r5, 8001594 <__sfp+0x64>
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <__sfp+0x88>)
 8001560:	60e3      	str	r3, [r4, #12]
 8001562:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001566:	6665      	str	r5, [r4, #100]	; 0x64
 8001568:	f000 f847 	bl	80015fa <__retarget_lock_init_recursive>
 800156c:	f7ff ff96 	bl	800149c <__sfp_lock_release>
 8001570:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001574:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001578:	6025      	str	r5, [r4, #0]
 800157a:	61a5      	str	r5, [r4, #24]
 800157c:	2208      	movs	r2, #8
 800157e:	4629      	mov	r1, r5
 8001580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001584:	f7ff facc 	bl	8000b20 <memset>
 8001588:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800158c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001590:	4620      	mov	r0, r4
 8001592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001594:	3468      	adds	r4, #104	; 0x68
 8001596:	e7d9      	b.n	800154c <__sfp+0x1c>
 8001598:	2104      	movs	r1, #4
 800159a:	4638      	mov	r0, r7
 800159c:	f7ff ff62 	bl	8001464 <__sfmoreglue>
 80015a0:	4604      	mov	r4, r0
 80015a2:	6030      	str	r0, [r6, #0]
 80015a4:	2800      	cmp	r0, #0
 80015a6:	d1d5      	bne.n	8001554 <__sfp+0x24>
 80015a8:	f7ff ff78 	bl	800149c <__sfp_lock_release>
 80015ac:	230c      	movs	r3, #12
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	e7ee      	b.n	8001590 <__sfp+0x60>
 80015b2:	bf00      	nop
 80015b4:	08001aa8 	.word	0x08001aa8
 80015b8:	ffff0001 	.word	0xffff0001

080015bc <_fwalk_reent>:
 80015bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015c0:	4606      	mov	r6, r0
 80015c2:	4688      	mov	r8, r1
 80015c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015c8:	2700      	movs	r7, #0
 80015ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015ce:	f1b9 0901 	subs.w	r9, r9, #1
 80015d2:	d505      	bpl.n	80015e0 <_fwalk_reent+0x24>
 80015d4:	6824      	ldr	r4, [r4, #0]
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	d1f7      	bne.n	80015ca <_fwalk_reent+0xe>
 80015da:	4638      	mov	r0, r7
 80015dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015e0:	89ab      	ldrh	r3, [r5, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d907      	bls.n	80015f6 <_fwalk_reent+0x3a>
 80015e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015ea:	3301      	adds	r3, #1
 80015ec:	d003      	beq.n	80015f6 <_fwalk_reent+0x3a>
 80015ee:	4629      	mov	r1, r5
 80015f0:	4630      	mov	r0, r6
 80015f2:	47c0      	blx	r8
 80015f4:	4307      	orrs	r7, r0
 80015f6:	3568      	adds	r5, #104	; 0x68
 80015f8:	e7e9      	b.n	80015ce <_fwalk_reent+0x12>

080015fa <__retarget_lock_init_recursive>:
 80015fa:	4770      	bx	lr

080015fc <__retarget_lock_acquire_recursive>:
 80015fc:	4770      	bx	lr

080015fe <__retarget_lock_release_recursive>:
 80015fe:	4770      	bx	lr

08001600 <__swhatbuf_r>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	460e      	mov	r6, r1
 8001604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001608:	2900      	cmp	r1, #0
 800160a:	b096      	sub	sp, #88	; 0x58
 800160c:	4614      	mov	r4, r2
 800160e:	461d      	mov	r5, r3
 8001610:	da08      	bge.n	8001624 <__swhatbuf_r+0x24>
 8001612:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	602a      	str	r2, [r5, #0]
 800161a:	061a      	lsls	r2, r3, #24
 800161c:	d410      	bmi.n	8001640 <__swhatbuf_r+0x40>
 800161e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001622:	e00e      	b.n	8001642 <__swhatbuf_r+0x42>
 8001624:	466a      	mov	r2, sp
 8001626:	f000 f9a7 	bl	8001978 <_fstat_r>
 800162a:	2800      	cmp	r0, #0
 800162c:	dbf1      	blt.n	8001612 <__swhatbuf_r+0x12>
 800162e:	9a01      	ldr	r2, [sp, #4]
 8001630:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001634:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001638:	425a      	negs	r2, r3
 800163a:	415a      	adcs	r2, r3
 800163c:	602a      	str	r2, [r5, #0]
 800163e:	e7ee      	b.n	800161e <__swhatbuf_r+0x1e>
 8001640:	2340      	movs	r3, #64	; 0x40
 8001642:	2000      	movs	r0, #0
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	b016      	add	sp, #88	; 0x58
 8001648:	bd70      	pop	{r4, r5, r6, pc}
	...

0800164c <__smakebuf_r>:
 800164c:	898b      	ldrh	r3, [r1, #12]
 800164e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001650:	079d      	lsls	r5, r3, #30
 8001652:	4606      	mov	r6, r0
 8001654:	460c      	mov	r4, r1
 8001656:	d507      	bpl.n	8001668 <__smakebuf_r+0x1c>
 8001658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	6123      	str	r3, [r4, #16]
 8001660:	2301      	movs	r3, #1
 8001662:	6163      	str	r3, [r4, #20]
 8001664:	b002      	add	sp, #8
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	ab01      	add	r3, sp, #4
 800166a:	466a      	mov	r2, sp
 800166c:	f7ff ffc8 	bl	8001600 <__swhatbuf_r>
 8001670:	9900      	ldr	r1, [sp, #0]
 8001672:	4605      	mov	r5, r0
 8001674:	4630      	mov	r0, r6
 8001676:	f000 f895 	bl	80017a4 <_malloc_r>
 800167a:	b948      	cbnz	r0, 8001690 <__smakebuf_r+0x44>
 800167c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001680:	059a      	lsls	r2, r3, #22
 8001682:	d4ef      	bmi.n	8001664 <__smakebuf_r+0x18>
 8001684:	f023 0303 	bic.w	r3, r3, #3
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	81a3      	strh	r3, [r4, #12]
 800168e:	e7e3      	b.n	8001658 <__smakebuf_r+0xc>
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <__smakebuf_r+0x7c>)
 8001692:	62b3      	str	r3, [r6, #40]	; 0x28
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	6020      	str	r0, [r4, #0]
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	81a3      	strh	r3, [r4, #12]
 800169e:	9b00      	ldr	r3, [sp, #0]
 80016a0:	6163      	str	r3, [r4, #20]
 80016a2:	9b01      	ldr	r3, [sp, #4]
 80016a4:	6120      	str	r0, [r4, #16]
 80016a6:	b15b      	cbz	r3, 80016c0 <__smakebuf_r+0x74>
 80016a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ac:	4630      	mov	r0, r6
 80016ae:	f000 f975 	bl	800199c <_isatty_r>
 80016b2:	b128      	cbz	r0, 80016c0 <__smakebuf_r+0x74>
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	89a0      	ldrh	r0, [r4, #12]
 80016c2:	4305      	orrs	r5, r0
 80016c4:	81a5      	strh	r5, [r4, #12]
 80016c6:	e7cd      	b.n	8001664 <__smakebuf_r+0x18>
 80016c8:	08001459 	.word	0x08001459

080016cc <_free_r>:
 80016cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016ce:	2900      	cmp	r1, #0
 80016d0:	d044      	beq.n	800175c <_free_r+0x90>
 80016d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d6:	9001      	str	r0, [sp, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f1a1 0404 	sub.w	r4, r1, #4
 80016de:	bfb8      	it	lt
 80016e0:	18e4      	addlt	r4, r4, r3
 80016e2:	f000 f97d 	bl	80019e0 <__malloc_lock>
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <_free_r+0x94>)
 80016e8:	9801      	ldr	r0, [sp, #4]
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	b933      	cbnz	r3, 80016fc <_free_r+0x30>
 80016ee:	6063      	str	r3, [r4, #4]
 80016f0:	6014      	str	r4, [r2, #0]
 80016f2:	b003      	add	sp, #12
 80016f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016f8:	f000 b978 	b.w	80019ec <__malloc_unlock>
 80016fc:	42a3      	cmp	r3, r4
 80016fe:	d908      	bls.n	8001712 <_free_r+0x46>
 8001700:	6825      	ldr	r5, [r4, #0]
 8001702:	1961      	adds	r1, r4, r5
 8001704:	428b      	cmp	r3, r1
 8001706:	bf01      	itttt	eq
 8001708:	6819      	ldreq	r1, [r3, #0]
 800170a:	685b      	ldreq	r3, [r3, #4]
 800170c:	1949      	addeq	r1, r1, r5
 800170e:	6021      	streq	r1, [r4, #0]
 8001710:	e7ed      	b.n	80016ee <_free_r+0x22>
 8001712:	461a      	mov	r2, r3
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	b10b      	cbz	r3, 800171c <_free_r+0x50>
 8001718:	42a3      	cmp	r3, r4
 800171a:	d9fa      	bls.n	8001712 <_free_r+0x46>
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	1855      	adds	r5, r2, r1
 8001720:	42a5      	cmp	r5, r4
 8001722:	d10b      	bne.n	800173c <_free_r+0x70>
 8001724:	6824      	ldr	r4, [r4, #0]
 8001726:	4421      	add	r1, r4
 8001728:	1854      	adds	r4, r2, r1
 800172a:	42a3      	cmp	r3, r4
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	d1e0      	bne.n	80016f2 <_free_r+0x26>
 8001730:	681c      	ldr	r4, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	6053      	str	r3, [r2, #4]
 8001736:	4421      	add	r1, r4
 8001738:	6011      	str	r1, [r2, #0]
 800173a:	e7da      	b.n	80016f2 <_free_r+0x26>
 800173c:	d902      	bls.n	8001744 <_free_r+0x78>
 800173e:	230c      	movs	r3, #12
 8001740:	6003      	str	r3, [r0, #0]
 8001742:	e7d6      	b.n	80016f2 <_free_r+0x26>
 8001744:	6825      	ldr	r5, [r4, #0]
 8001746:	1961      	adds	r1, r4, r5
 8001748:	428b      	cmp	r3, r1
 800174a:	bf04      	itt	eq
 800174c:	6819      	ldreq	r1, [r3, #0]
 800174e:	685b      	ldreq	r3, [r3, #4]
 8001750:	6063      	str	r3, [r4, #4]
 8001752:	bf04      	itt	eq
 8001754:	1949      	addeq	r1, r1, r5
 8001756:	6021      	streq	r1, [r4, #0]
 8001758:	6054      	str	r4, [r2, #4]
 800175a:	e7ca      	b.n	80016f2 <_free_r+0x26>
 800175c:	b003      	add	sp, #12
 800175e:	bd30      	pop	{r4, r5, pc}
 8001760:	20001144 	.word	0x20001144

08001764 <sbrk_aligned>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	4e0e      	ldr	r6, [pc, #56]	; (80017a0 <sbrk_aligned+0x3c>)
 8001768:	460c      	mov	r4, r1
 800176a:	6831      	ldr	r1, [r6, #0]
 800176c:	4605      	mov	r5, r0
 800176e:	b911      	cbnz	r1, 8001776 <sbrk_aligned+0x12>
 8001770:	f000 f88c 	bl	800188c <_sbrk_r>
 8001774:	6030      	str	r0, [r6, #0]
 8001776:	4621      	mov	r1, r4
 8001778:	4628      	mov	r0, r5
 800177a:	f000 f887 	bl	800188c <_sbrk_r>
 800177e:	1c43      	adds	r3, r0, #1
 8001780:	d00a      	beq.n	8001798 <sbrk_aligned+0x34>
 8001782:	1cc4      	adds	r4, r0, #3
 8001784:	f024 0403 	bic.w	r4, r4, #3
 8001788:	42a0      	cmp	r0, r4
 800178a:	d007      	beq.n	800179c <sbrk_aligned+0x38>
 800178c:	1a21      	subs	r1, r4, r0
 800178e:	4628      	mov	r0, r5
 8001790:	f000 f87c 	bl	800188c <_sbrk_r>
 8001794:	3001      	adds	r0, #1
 8001796:	d101      	bne.n	800179c <sbrk_aligned+0x38>
 8001798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800179c:	4620      	mov	r0, r4
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	20001148 	.word	0x20001148

080017a4 <_malloc_r>:
 80017a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017a8:	1ccd      	adds	r5, r1, #3
 80017aa:	f025 0503 	bic.w	r5, r5, #3
 80017ae:	3508      	adds	r5, #8
 80017b0:	2d0c      	cmp	r5, #12
 80017b2:	bf38      	it	cc
 80017b4:	250c      	movcc	r5, #12
 80017b6:	2d00      	cmp	r5, #0
 80017b8:	4607      	mov	r7, r0
 80017ba:	db01      	blt.n	80017c0 <_malloc_r+0x1c>
 80017bc:	42a9      	cmp	r1, r5
 80017be:	d905      	bls.n	80017cc <_malloc_r+0x28>
 80017c0:	230c      	movs	r3, #12
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	2600      	movs	r6, #0
 80017c6:	4630      	mov	r0, r6
 80017c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017cc:	4e2e      	ldr	r6, [pc, #184]	; (8001888 <_malloc_r+0xe4>)
 80017ce:	f000 f907 	bl	80019e0 <__malloc_lock>
 80017d2:	6833      	ldr	r3, [r6, #0]
 80017d4:	461c      	mov	r4, r3
 80017d6:	bb34      	cbnz	r4, 8001826 <_malloc_r+0x82>
 80017d8:	4629      	mov	r1, r5
 80017da:	4638      	mov	r0, r7
 80017dc:	f7ff ffc2 	bl	8001764 <sbrk_aligned>
 80017e0:	1c43      	adds	r3, r0, #1
 80017e2:	4604      	mov	r4, r0
 80017e4:	d14d      	bne.n	8001882 <_malloc_r+0xde>
 80017e6:	6834      	ldr	r4, [r6, #0]
 80017e8:	4626      	mov	r6, r4
 80017ea:	2e00      	cmp	r6, #0
 80017ec:	d140      	bne.n	8001870 <_malloc_r+0xcc>
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	4631      	mov	r1, r6
 80017f2:	4638      	mov	r0, r7
 80017f4:	eb04 0803 	add.w	r8, r4, r3
 80017f8:	f000 f848 	bl	800188c <_sbrk_r>
 80017fc:	4580      	cmp	r8, r0
 80017fe:	d13a      	bne.n	8001876 <_malloc_r+0xd2>
 8001800:	6821      	ldr	r1, [r4, #0]
 8001802:	3503      	adds	r5, #3
 8001804:	1a6d      	subs	r5, r5, r1
 8001806:	f025 0503 	bic.w	r5, r5, #3
 800180a:	3508      	adds	r5, #8
 800180c:	2d0c      	cmp	r5, #12
 800180e:	bf38      	it	cc
 8001810:	250c      	movcc	r5, #12
 8001812:	4629      	mov	r1, r5
 8001814:	4638      	mov	r0, r7
 8001816:	f7ff ffa5 	bl	8001764 <sbrk_aligned>
 800181a:	3001      	adds	r0, #1
 800181c:	d02b      	beq.n	8001876 <_malloc_r+0xd2>
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	442b      	add	r3, r5
 8001822:	6023      	str	r3, [r4, #0]
 8001824:	e00e      	b.n	8001844 <_malloc_r+0xa0>
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	1b52      	subs	r2, r2, r5
 800182a:	d41e      	bmi.n	800186a <_malloc_r+0xc6>
 800182c:	2a0b      	cmp	r2, #11
 800182e:	d916      	bls.n	800185e <_malloc_r+0xba>
 8001830:	1961      	adds	r1, r4, r5
 8001832:	42a3      	cmp	r3, r4
 8001834:	6025      	str	r5, [r4, #0]
 8001836:	bf18      	it	ne
 8001838:	6059      	strne	r1, [r3, #4]
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	bf08      	it	eq
 800183e:	6031      	streq	r1, [r6, #0]
 8001840:	5162      	str	r2, [r4, r5]
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	4638      	mov	r0, r7
 8001846:	f104 060b 	add.w	r6, r4, #11
 800184a:	f000 f8cf 	bl	80019ec <__malloc_unlock>
 800184e:	f026 0607 	bic.w	r6, r6, #7
 8001852:	1d23      	adds	r3, r4, #4
 8001854:	1af2      	subs	r2, r6, r3
 8001856:	d0b6      	beq.n	80017c6 <_malloc_r+0x22>
 8001858:	1b9b      	subs	r3, r3, r6
 800185a:	50a3      	str	r3, [r4, r2]
 800185c:	e7b3      	b.n	80017c6 <_malloc_r+0x22>
 800185e:	6862      	ldr	r2, [r4, #4]
 8001860:	42a3      	cmp	r3, r4
 8001862:	bf0c      	ite	eq
 8001864:	6032      	streq	r2, [r6, #0]
 8001866:	605a      	strne	r2, [r3, #4]
 8001868:	e7ec      	b.n	8001844 <_malloc_r+0xa0>
 800186a:	4623      	mov	r3, r4
 800186c:	6864      	ldr	r4, [r4, #4]
 800186e:	e7b2      	b.n	80017d6 <_malloc_r+0x32>
 8001870:	4634      	mov	r4, r6
 8001872:	6876      	ldr	r6, [r6, #4]
 8001874:	e7b9      	b.n	80017ea <_malloc_r+0x46>
 8001876:	230c      	movs	r3, #12
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4638      	mov	r0, r7
 800187c:	f000 f8b6 	bl	80019ec <__malloc_unlock>
 8001880:	e7a1      	b.n	80017c6 <_malloc_r+0x22>
 8001882:	6025      	str	r5, [r4, #0]
 8001884:	e7de      	b.n	8001844 <_malloc_r+0xa0>
 8001886:	bf00      	nop
 8001888:	20001144 	.word	0x20001144

0800188c <_sbrk_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d06      	ldr	r5, [pc, #24]	; (80018a8 <_sbrk_r+0x1c>)
 8001890:	2300      	movs	r3, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	602b      	str	r3, [r5, #0]
 8001898:	f7ff f804 	bl	80008a4 <_sbrk>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_sbrk_r+0x1a>
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_sbrk_r+0x1a>
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	2000114c 	.word	0x2000114c

080018ac <__sread>:
 80018ac:	b510      	push	{r4, lr}
 80018ae:	460c      	mov	r4, r1
 80018b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b4:	f000 f8a0 	bl	80019f8 <_read_r>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	bfab      	itete	ge
 80018bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80018be:	89a3      	ldrhlt	r3, [r4, #12]
 80018c0:	181b      	addge	r3, r3, r0
 80018c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018c6:	bfac      	ite	ge
 80018c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80018ca:	81a3      	strhlt	r3, [r4, #12]
 80018cc:	bd10      	pop	{r4, pc}

080018ce <__swrite>:
 80018ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d2:	461f      	mov	r7, r3
 80018d4:	898b      	ldrh	r3, [r1, #12]
 80018d6:	05db      	lsls	r3, r3, #23
 80018d8:	4605      	mov	r5, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4616      	mov	r6, r2
 80018de:	d505      	bpl.n	80018ec <__swrite+0x1e>
 80018e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e4:	2302      	movs	r3, #2
 80018e6:	2200      	movs	r2, #0
 80018e8:	f000 f868 	bl	80019bc <_lseek_r>
 80018ec:	89a3      	ldrh	r3, [r4, #12]
 80018ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018f6:	81a3      	strh	r3, [r4, #12]
 80018f8:	4632      	mov	r2, r6
 80018fa:	463b      	mov	r3, r7
 80018fc:	4628      	mov	r0, r5
 80018fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001902:	f000 b817 	b.w	8001934 <_write_r>

08001906 <__sseek>:
 8001906:	b510      	push	{r4, lr}
 8001908:	460c      	mov	r4, r1
 800190a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800190e:	f000 f855 	bl	80019bc <_lseek_r>
 8001912:	1c43      	adds	r3, r0, #1
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	bf15      	itete	ne
 8001918:	6560      	strne	r0, [r4, #84]	; 0x54
 800191a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800191e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001922:	81a3      	strheq	r3, [r4, #12]
 8001924:	bf18      	it	ne
 8001926:	81a3      	strhne	r3, [r4, #12]
 8001928:	bd10      	pop	{r4, pc}

0800192a <__sclose>:
 800192a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800192e:	f000 b813 	b.w	8001958 <_close_r>
	...

08001934 <_write_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4d07      	ldr	r5, [pc, #28]	; (8001954 <_write_r+0x20>)
 8001938:	4604      	mov	r4, r0
 800193a:	4608      	mov	r0, r1
 800193c:	4611      	mov	r1, r2
 800193e:	2200      	movs	r2, #0
 8001940:	602a      	str	r2, [r5, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f7fe ff5d 	bl	8000802 <_write>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_write_r+0x1e>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	b103      	cbz	r3, 8001952 <_write_r+0x1e>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	2000114c 	.word	0x2000114c

08001958 <_close_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4d06      	ldr	r5, [pc, #24]	; (8001974 <_close_r+0x1c>)
 800195c:	2300      	movs	r3, #0
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	602b      	str	r3, [r5, #0]
 8001964:	f7fe ff69 	bl	800083a <_close>
 8001968:	1c43      	adds	r3, r0, #1
 800196a:	d102      	bne.n	8001972 <_close_r+0x1a>
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	b103      	cbz	r3, 8001972 <_close_r+0x1a>
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	bd38      	pop	{r3, r4, r5, pc}
 8001974:	2000114c 	.word	0x2000114c

08001978 <_fstat_r>:
 8001978:	b538      	push	{r3, r4, r5, lr}
 800197a:	4d07      	ldr	r5, [pc, #28]	; (8001998 <_fstat_r+0x20>)
 800197c:	2300      	movs	r3, #0
 800197e:	4604      	mov	r4, r0
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	602b      	str	r3, [r5, #0]
 8001986:	f7fe ff64 	bl	8000852 <_fstat>
 800198a:	1c43      	adds	r3, r0, #1
 800198c:	d102      	bne.n	8001994 <_fstat_r+0x1c>
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	b103      	cbz	r3, 8001994 <_fstat_r+0x1c>
 8001992:	6023      	str	r3, [r4, #0]
 8001994:	bd38      	pop	{r3, r4, r5, pc}
 8001996:	bf00      	nop
 8001998:	2000114c 	.word	0x2000114c

0800199c <_isatty_r>:
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	4d06      	ldr	r5, [pc, #24]	; (80019b8 <_isatty_r+0x1c>)
 80019a0:	2300      	movs	r3, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	602b      	str	r3, [r5, #0]
 80019a8:	f7fe ff63 	bl	8000872 <_isatty>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_isatty_r+0x1a>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_isatty_r+0x1a>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	2000114c 	.word	0x2000114c

080019bc <_lseek_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4d07      	ldr	r5, [pc, #28]	; (80019dc <_lseek_r+0x20>)
 80019c0:	4604      	mov	r4, r0
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	602a      	str	r2, [r5, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7fe ff5c 	bl	8000888 <_lseek>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_lseek_r+0x1e>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_lseek_r+0x1e>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	2000114c 	.word	0x2000114c

080019e0 <__malloc_lock>:
 80019e0:	4801      	ldr	r0, [pc, #4]	; (80019e8 <__malloc_lock+0x8>)
 80019e2:	f7ff be0b 	b.w	80015fc <__retarget_lock_acquire_recursive>
 80019e6:	bf00      	nop
 80019e8:	20001140 	.word	0x20001140

080019ec <__malloc_unlock>:
 80019ec:	4801      	ldr	r0, [pc, #4]	; (80019f4 <__malloc_unlock+0x8>)
 80019ee:	f7ff be06 	b.w	80015fe <__retarget_lock_release_recursive>
 80019f2:	bf00      	nop
 80019f4:	20001140 	.word	0x20001140

080019f8 <_read_r>:
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	4d07      	ldr	r5, [pc, #28]	; (8001a18 <_read_r+0x20>)
 80019fc:	4604      	mov	r4, r0
 80019fe:	4608      	mov	r0, r1
 8001a00:	4611      	mov	r1, r2
 8001a02:	2200      	movs	r2, #0
 8001a04:	602a      	str	r2, [r5, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7fe fede 	bl	80007c8 <_read>
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	d102      	bne.n	8001a16 <_read_r+0x1e>
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	b103      	cbz	r3, 8001a16 <_read_r+0x1e>
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	2000114c 	.word	0x2000114c

08001a1c <_init>:
 8001a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1e:	bf00      	nop
 8001a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a22:	bc08      	pop	{r3}
 8001a24:	469e      	mov	lr, r3
 8001a26:	4770      	bx	lr

08001a28 <_fini>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr
