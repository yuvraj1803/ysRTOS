
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d90  08001d90  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001d90  08001d90  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d90  08001d90  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000064  08001dfc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  08001dfc  00021184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003940  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e75  00000000  00000000  000239d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00024850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00024b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031e1  00000000  00000000  00024dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059f1  00000000  00000000  00027fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000561b2  00000000  00000000  0002d99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083b4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e8  00000000  00000000  00083b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c6c 	.word	0x08001c6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001c6c 	.word	0x08001c6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EXTI15_10_IRQHandler>:

	__enable_irq();

}

void EXTI15_10_IRQHandler(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	EXTI->PR |= EXTI_PR13;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6153      	str	r3, [r2, #20]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40013c00 	.word	0x40013c00

080002a0 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <LED_INIT+0x34>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LED_INIT+0x34>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <LED_INIT+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <LED_INIT+0x38>)
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 11);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <LED_INIT+0x38>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <LED_INIT+0x38>)
 80002c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002c6:	6013      	str	r3, [r2, #0]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000

080002dc <__io_putchar>:
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);
void uart_tx_init(void);

int __io_putchar(int ch){ /* defined in syscalls.c */
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f000 f855 	bl	8000394 <uart_write>

	return ch;
 80002ea:	687b      	ldr	r3, [r7, #4]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <UART_INIT>:


void UART_INIT(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	uart_tx_init();
 80002f8:	f000 f802 	bl	8000300 <uart_tx_init>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <uart_tx_init>:

void uart_tx_init(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0


	RCC -> AHB1ENR |= GPIOAEN; /* enable clock access to GPIOA */
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <uart_tx_init+0x84>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a1e      	ldr	r2, [pc, #120]	; (8000384 <uart_tx_init+0x84>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set Pin 2 in GPIOA to alternate function mode */
	GPIOA -> MODER &= ~(1U << 4);
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <uart_tx_init+0x88>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <uart_tx_init+0x88>)
 8000316:	f023 0310 	bic.w	r3, r3, #16
 800031a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=  (1U << 5);
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <uart_tx_init+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a19      	ldr	r2, [pc, #100]	; (8000388 <uart_tx_init+0x88>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6013      	str	r3, [r2, #0]

	/* set alternate function type to AF07 (uart2_tx) */
	GPIOA -> AFR[0] |=  (1U << 8);
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <uart_tx_init+0x88>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <uart_tx_init+0x88>)
 800032e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000332:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 9);
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <uart_tx_init+0x88>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <uart_tx_init+0x88>)
 800033a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 10);
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <uart_tx_init+0x88>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <uart_tx_init+0x88>)
 8000346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <uart_tx_init+0x88>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <uart_tx_init+0x88>)
 8000352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000356:	6213      	str	r3, [r2, #32]

	RCC -> APB1ENR |= UART2EN; /* enable clock access to UART2 */
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <uart_tx_init+0x84>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <uart_tx_init+0x84>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000362:	6413      	str	r3, [r2, #64]	; 0x40

	set_uart_baudrate(APB1_CLK, UART_BAUDRATE); /* configure UART baudrate) */
 8000364:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000368:	4808      	ldr	r0, [pc, #32]	; (800038c <uart_tx_init+0x8c>)
 800036a:	f000 f82b 	bl	80003c4 <set_uart_baudrate>

	USART2 -> CR1 = CR1_TE; /* configure transfer direction */
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <uart_tx_init+0x90>)
 8000370:	2208      	movs	r2, #8
 8000372:	60da      	str	r2, [r3, #12]

	USART2 -> CR1 |= CR1_UE; /* enable UART module */
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <uart_tx_init+0x90>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <uart_tx_init+0x90>)
 800037a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800037e:	60d3      	str	r3, [r2, #12]

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40023800 	.word	0x40023800
 8000388:	40020000 	.word	0x40020000
 800038c:	00f42400 	.word	0x00f42400
 8000390:	40004400 	.word	0x40004400

08000394 <uart_write>:

static void uart_write(int ch){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 800039c:	bf00      	nop
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <uart_write+0x2c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <uart_write+0x2c>)
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	6053      	str	r3, [r2, #4]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40004400 	.word	0x40004400

080003c4 <set_uart_baudrate>:

static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = compute_uart_baudrate(periph_clk, baudrate);
 80003ce:	4c05      	ldr	r4, [pc, #20]	; (80003e4 <set_uart_baudrate+0x20>)
 80003d0:	6839      	ldr	r1, [r7, #0]
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f808 	bl	80003e8 <compute_uart_baudrate>
 80003d8:	4603      	mov	r3, r0
 80003da:	60a3      	str	r3, [r4, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40004400 	.word	0x40004400

080003e8 <compute_uart_baudrate>:

static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	085a      	lsrs	r2, r3, #1
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	441a      	add	r2, r3
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <__init__>:


#include "init.h"


void __init__(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000410:	f7ff ff46 	bl	80002a0 <LED_INIT>
	}
	if(__UART_INIT__ == 0x1){
		UART_INIT();
 8000414:	f7ff ff6e 	bl	80002f4 <UART_INIT>



	/* Initialise the kernel */

	kernel_init();
 8000418:	f000 f830 	bl	800047c <kernel_init>


}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	db0a      	blt.n	800044a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	490c      	ldr	r1, [pc, #48]	; (800046c <__NVIC_SetPriority+0x4c>)
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000448:	e00a      	b.n	8000460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4908      	ldr	r1, [pc, #32]	; (8000470 <__NVIC_SetPriority+0x50>)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	f003 030f 	and.w	r3, r3, #15
 8000456:	3b04      	subs	r3, #4
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	440b      	add	r3, r1
 800045e:	761a      	strb	r2, [r3, #24]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000e100 	.word	0xe000e100
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <_loop_>:

/*
 * Note: Thread ID is simply the index of the TCB_STACK in which the thread's content is stored.
 * */

void _loop_(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	/*
	 * If no threads are given, __current_ptr__ shall point at this function and run here until 'something' is done ;)
	 * */
	while(1){}
 8000478:	e7fe      	b.n	8000478 <_loop_+0x4>
	...

0800047c <kernel_init>:
}

void kernel_init(void){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <kernel_init+0x50>)
 8000482:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000486:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <kernel_init+0x54>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <kernel_init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <kernel_init+0x5c>)
 8000496:	2204      	movs	r2, #4
 8000498:	601a      	str	r2, [r3, #0]

	min_periodic_thread_id = MAX_THREADS;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <kernel_init+0x60>)
 800049c:	2205      	movs	r2, #5
 800049e:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <kernel_init+0x64>)
 80004a2:	2209      	movs	r2, #9
 80004a4:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <kernel_init+0x58>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <kernel_init+0x68>)
 80004ae:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <kernel_init+0x60>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <kernel_init+0x6c>)
 80004b8:	6013      	str	r3, [r2, #0]

	__current_ptr__ = NULL;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <kernel_init+0x70>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]

}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	2000113c 	.word	0x2000113c
 80004d0:	20001158 	.word	0x20001158
 80004d4:	20001148 	.word	0x20001148
 80004d8:	2000114c 	.word	0x2000114c
 80004dc:	20001150 	.word	0x20001150
 80004e0:	20001154 	.word	0x20001154
 80004e4:	20001140 	.word	0x20001140
 80004e8:	20001144 	.word	0x20001144
 80004ec:	20000198 	.word	0x20000198

080004f0 <stk_init>:

void stk_init(uint32_t thread_id){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <stk_init+0x50>)
 8000508:	1899      	adds	r1, r3, r2
 800050a:	480e      	ldr	r0, [pc, #56]	; (8000544 <stk_init+0x54>)
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4403      	add	r3, r0
 8000518:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <stk_init+0x50>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000522:	fb01 f303 	mul.w	r3, r1, r3
 8000526:	4413      	add	r3, r2
 8000528:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800052c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000530:	601a      	str	r2, [r3, #0]


			(FOR DEBUGGING PURPOSES)
		*/

}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000019c 	.word	0x2000019c
 8000544:	20000080 	.word	0x20000080

08000548 <kernel_launch>:

void kernel_launch(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <kernel_launch+0x6c>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <kernel_launch+0x6c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <kernel_launch+0x70>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	4413      	add	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <kernel_launch+0x6c>)
 8000566:	3b01      	subs	r3, #1
 8000568:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, SYSTICK_PRIO); /* Set SysTick to low-priority */
 800056a:	210f      	movs	r1, #15
 800056c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000570:	f7ff ff56 	bl	8000420 <__NVIC_SetPriority>
		NVIC_SetPriority(PendSV_IRQn,  PENDSV_PRIO); /* Set  PendSV to high-priority */
 8000574:	2100      	movs	r1, #0
 8000576:	f06f 0001 	mvn.w	r0, #1
 800057a:	f7ff ff51 	bl	8000420 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <kernel_launch+0x6c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <kernel_launch+0x6c>)
 8000584:	f043 0305 	orr.w	r3, r3, #5
 8000588:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <kernel_launch+0x6c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <kernel_launch+0x6c>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000596:	b672      	cpsid	i
}
 8000598:	bf00      	nop
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 800059a:	f000 fab7 	bl	8000b0c <tim2_1ms_interrupt_init>
		}


		if(__current_ptr__ == NULL){
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <kernel_launch+0x74>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d102      	bne.n	80005ac <kernel_launch+0x64>
			/* no threads specified, we spin in an infinite loop until processor is taken away */
			add_thread(&_loop_);
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <kernel_launch+0x78>)
 80005a8:	f000 f80c 	bl	80005c4 <add_thread>
		}

		scheduler_launch();
 80005ac:	f000 f922 	bl	80007f4 <scheduler_launch>




}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	e000e010 	.word	0xe000e010
 80005b8:	2000113c 	.word	0x2000113c
 80005bc:	20000198 	.word	0x20000198
 80005c0:	08000475 	.word	0x08000475

080005c4 <add_thread>:

tid_t add_thread(void (*thread)(void)){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 80005cc:	4b48      	ldr	r3, [pc, #288]	; (80006f0 <add_thread+0x12c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <add_thread+0x130>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d10a      	bne.n	80005ee <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <add_thread+0x134>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	1d3a      	adds	r2, r7, #4
 80005e0:	4946      	ldr	r1, [pc, #280]	; (80006fc <add_thread+0x138>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fb8e 	bl	8000d04 <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fb77 	bl	8000cdc <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <add_thread+0x12c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80005f6:	b672      	cpsid	i
}
 80005f8:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 80005fa:	4941      	ldr	r1, [pc, #260]	; (8000700 <add_thread+0x13c>)
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	3308      	adds	r3, #8
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 800060e:	493c      	ldr	r1, [pc, #240]	; (8000700 <add_thread+0x13c>)
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	4613      	mov	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	330c      	adds	r3, #12
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0xffffffff; /* non periodic threads */
 8000622:	4937      	ldr	r1, [pc, #220]	; (8000700 <add_thread+0x13c>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4613      	mov	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3310      	adds	r3, #16
 8000632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000636:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 8000638:	4931      	ldr	r1, [pc, #196]	; (8000700 <add_thread+0x13c>)
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3314      	adds	r3, #20
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
	__tcbs__[thread_id].periodic_task = NULL;
 800064c:	492c      	ldr	r1, [pc, #176]	; (8000700 <add_thread+0x13c>)
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4613      	mov	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	440b      	add	r3, r1
 800065a:	3318      	adds	r3, #24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ff45 	bl	80004f0 <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4618      	mov	r0, r3
 800066a:	4a26      	ldr	r2, [pc, #152]	; (8000704 <add_thread+0x140>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	4413      	add	r3, r2
 8000678:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800067c:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <add_thread+0xce>
		__current_ptr__ = &__tcbs__[0];
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <add_thread+0x144>)
 8000686:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <add_thread+0x13c>)
 8000688:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <add_thread+0x13c>)
 800068c:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <add_thread+0x13c>)
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	e023      	b.n	80006da <add_thread+0x116>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <add_thread+0x12c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	491a      	ldr	r1, [pc, #104]	; (8000700 <add_thread+0x13c>)
 8000698:	4613      	mov	r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	3304      	adds	r3, #4
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <add_thread+0x13c>)
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4613      	mov	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4403      	add	r3, r0
 80006b4:	3304      	adds	r3, #4
 80006b6:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <add_thread+0x12c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	460b      	mov	r3, r1
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	1a5b      	subs	r3, r3, r1
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <add_thread+0x13c>)
 80006c8:	4419      	add	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <add_thread+0x13c>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4403      	add	r3, r0
 80006d6:	3304      	adds	r3, #4
 80006d8:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <add_thread+0x12c>)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006e0:	b662      	cpsie	i
}
 80006e2:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


	return thread_id;
 80006e4:	68fb      	ldr	r3, [r7, #12]

}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20001140 	.word	0x20001140
 80006f4:	2000114c 	.word	0x2000114c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08001c84 	.word	0x08001c84
 8000700:	20000080 	.word	0x20000080
 8000704:	2000019c 	.word	0x2000019c
 8000708:	20000198 	.word	0x20000198

0800070c <add_periodic_thread>:

tid_t add_periodic_thread(void (*pthread)(void), uint32_t period){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	 * TIM2_IRQHandler will be called when TIM2->CNT hits 0. This will initiate the context switching process.
	 *
	 *
	 * */

	if(recently_added_periodic_thread_id == max_periodic_thread_id){
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <add_periodic_thread+0xd0>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <add_periodic_thread+0xd4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d10a      	bne.n	8000738 <add_periodic_thread+0x2c>
		fprintf(stderr, "Cannot add periodic thread %p, max periodic thread limit reached", &pthread);
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <add_periodic_thread+0xd8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	1d3a      	adds	r2, r7, #4
 800072a:	492f      	ldr	r1, [pc, #188]	; (80007e8 <add_periodic_thread+0xdc>)
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fae9 	bl	8000d04 <fiprintf>
		exit(__ADD_PERIODIC_THREAD_FAILURE__);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fad2 	bl	8000cdc <exit>
	}

	uint32_t pthread_id = recently_added_periodic_thread_id + 1;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <add_periodic_thread+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop

	__disable_irq();

	__tcbs__[pthread_id].sleeptime = 0;
 8000744:	4929      	ldr	r1, [pc, #164]	; (80007ec <add_periodic_thread+0xe0>)
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	4613      	mov	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	3308      	adds	r3, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].thread_id = pthread_id;
 8000758:	4924      	ldr	r1, [pc, #144]	; (80007ec <add_periodic_thread+0xe0>)
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4613      	mov	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	440b      	add	r3, r1
 8000766:	330c      	adds	r3, #12
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].period = period;
 800076c:	491f      	ldr	r1, [pc, #124]	; (80007ec <add_periodic_thread+0xe0>)
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	4613      	mov	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	3310      	adds	r3, #16
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].status = THREAD_ACTIVE;
 8000780:	491a      	ldr	r1, [pc, #104]	; (80007ec <add_periodic_thread+0xe0>)
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	4613      	mov	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	3314      	adds	r3, #20
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
	__tcbs__[pthread_id].periodic_task = pthread;
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <add_periodic_thread+0xe0>)
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4613      	mov	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4403      	add	r3, r0
 80007a4:	3318      	adds	r3, #24
 80007a6:	6019      	str	r1, [r3, #0]

	stk_init(pthread_id);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fea1 	bl	80004f0 <stk_init>
	TCB_STACK[pthread_id][STACK_SIZE-2] = (uint32_t) pthread;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <add_periodic_thread+0xe4>)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80007ba:	fb01 f303 	mul.w	r3, r1, r3
 80007be:	4413      	add	r3, r2
 80007c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80007c4:	6018      	str	r0, [r3, #0]

	recently_added_periodic_thread_id = pthread_id;
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <add_periodic_thread+0xd0>)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007cc:	b662      	cpsie	i
}
 80007ce:	bf00      	nop

	__enable_irq();


	return pthread_id;
 80007d0:	68fb      	ldr	r3, [r7, #12]

}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20001144 	.word	0x20001144
 80007e0:	20001154 	.word	0x20001154
 80007e4:	20000000 	.word	0x20000000
 80007e8:	08001cb4 	.word	0x08001cb4
 80007ec:	20000080 	.word	0x20000080
 80007f0:	2000019c 	.word	0x2000019c

080007f4 <scheduler_launch>:
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */
#define ICSR_PENDSVSET		(1U << 28) 		/* PendSV  Exception pending bit*/


void scheduler_launch(void){
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 80007fa:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 80007fc:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 8000800:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 8000804:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 8000808:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 800080a:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 800080c:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 8000810:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 8000812:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 8000814:	4770      	bx	lr

}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	20000198 	.word	0x20000198

08000824 <PendSV_Handler>:

	/* PendSV_Handler shall be handling the context switch process
	 * in the future versions of the RTOS.
	 */

}
 8000824:	bf00      	nop
	...

08000828 <SysTick_Handler>:
		 *	-> Restore all the Registers.
		 * */

		/* SUSPEND CURRENT THREAD */

		__asm("CPSID I");		/* disable global interrupts */
 8000828:	b672      	cpsid	i
		__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 800082a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <SysTick_Handler+0x20>)
		__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 8000830:	6801      	ldr	r1, [r0, #0]
		__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 8000832:	f8c1 d000 	str.w	sp, [r1]


		/* CHOOSE NEXT THREAD */

		__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 8000836:	6849      	ldr	r1, [r1, #4]
		__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 8000838:	6001      	str	r1, [r0, #0]
		__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 800083a:	f8d1 d000 	ldr.w	sp, [r1]
		__asm("POP {R4-R11}");			/* restore r4-r11 */
 800083e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("CPSIE I");				/* enable global interrupts */
 8000842:	b662      	cpsie	i
		__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 8000844:	4770      	bx	lr


		//	ICSR |= ICSR_PENDSVSET; /* Trigger the PendSV interrupt handler to perform the context switch.*/
}
 8000846:	bf00      	nop
 8000848:	20000198 	.word	0x20000198

0800084c <pa>:
int c = 0;
int d = 0;

int e = 0;

void pa(void){
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
		while(1) a++;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <pa+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a01      	ldr	r2, [pc, #4]	; (800085c <pa+0x10>)
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	e7f9      	b.n	8000850 <pa+0x4>
 800085c:	2000115c 	.word	0x2000115c

08000860 <pb>:
}

void pb(void){
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

		while(1) b++;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <pb+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a01      	ldr	r2, [pc, #4]	; (8000870 <pb+0x10>)
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e7f9      	b.n	8000864 <pb+0x4>
 8000870:	20001160 	.word	0x20001160

08000874 <pc>:

}
void pc(void){
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	while(1) c++;
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <pc+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a01      	ldr	r2, [pc, #4]	; (8000884 <pc+0x10>)
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	e7f9      	b.n	8000878 <pc+0x4>
 8000884:	20001164 	.word	0x20001164

08000888 <pd>:
}

void pd(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	while(1) d++;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <pd+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a01      	ldr	r2, [pc, #4]	; (8000898 <pd+0x10>)
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e7f9      	b.n	800088c <pd+0x4>
 8000898:	20001168 	.word	0x20001168

0800089c <pe>:
}

void pe(void){
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	e++;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <pe+0x18>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <pe+0x18>)
 80008a8:	6013      	str	r3, [r2, #0]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	2000116c 	.word	0x2000116c

080008b8 <main>:
	LED_OFF();
}


int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	 * */




	__init__(); /* ysRTOS initialisation */
 80008bc:	f7ff fda6 	bl	800040c <__init__>
//	 add_periodic_thread(&pa,500);
//	 add_periodic_thread(&pb,1000);

	/*  */

	osAddThread(&pa);
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <main+0x34>)
 80008c2:	f000 f9bf 	bl	8000c44 <osAddThread>
	osAddThread(&pb);
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <main+0x38>)
 80008c8:	f000 f9bc 	bl	8000c44 <osAddThread>
	osAddThread(&pc);
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x3c>)
 80008ce:	f000 f9b9 	bl	8000c44 <osAddThread>
	osAddThread(&pd);
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <main+0x40>)
 80008d4:	f000 f9b6 	bl	8000c44 <osAddThread>
	osAddPeriodicThread(&pe,1000);
 80008d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <main+0x44>)
 80008de:	f000 f9be 	bl	8000c5e <osAddPeriodicThread>



	kernel_launch();
 80008e2:	f7ff fe31 	bl	8000548 <kernel_launch>
 80008e6:	2300      	movs	r3, #0


}
 80008e8:	4618      	mov	r0, r3
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	0800084d 	.word	0x0800084d
 80008f0:	08000861 	.word	0x08000861
 80008f4:	08000875 	.word	0x08000875
 80008f8:	08000889 	.word	0x08000889
 80008fc:	0800089d 	.word	0x0800089d

08000900 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800090a:	f000 f9e1 	bl	8000cd0 <__errno>
 800090e:	4603      	mov	r3, r0
 8000910:	2216      	movs	r2, #22
 8000912:	601a      	str	r2, [r3, #0]
  return -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <_exit>:

void _exit (int status)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffe7 	bl	8000900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000932:	e7fe      	b.n	8000932 <_exit+0x12>

08000934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000946:	f3af 8000 	nop.w
 800094a:	4601      	mov	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
  }

  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fca7 	bl	80002dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf1      	blt.n	8000980 <_write+0x12>
  }
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ce:	605a      	str	r2, [r3, #4]
  return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_isatty>:

int _isatty(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f000 f946 	bl	8000cd0 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20020000 	.word	0x20020000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	20001170 	.word	0x20001170
 8000a78:	20001188 	.word	0x20001188

08000a7c <__NVIC_EnableIRQ>:
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <tim2_1ms_interrupt_init+0x54>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <tim2_1ms_interrupt_init+0x54>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600 - 1;	 /*Set timer prescaler*/
 8000b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b20:	f240 623f 	movw	r2, #1599	; 0x63f
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 8000b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b2a:	2209      	movs	r2, #9
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 8000b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 8000b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 8000b4e:	201c      	movs	r0, #28
 8000b50:	f7ff ff94 	bl	8000a7c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,TIM2_PRIO);
 8000b54:	2107      	movs	r1, #7
 8000b56:	201c      	movs	r0, #28
 8000b58:	f7ff ffae 	bl	8000ab8 <__NVIC_SetPriority>


}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800

08000b64 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 8000b6a:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <TIM2_IRQHandler+0xc8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <TIM2_IRQHandler+0xcc>)
 8000b72:	fba3 1302 	umull	r1, r3, r3, r2
 8000b76:	0a9b      	lsrs	r3, r3, #10
 8000b78:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000b7c:	fb01 f303 	mul.w	r3, r1, r3
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <TIM2_IRQHandler+0xc8>)
 8000b84:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 8000b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b96:	b672      	cpsid	i
}
 8000b98:	bf00      	nop

	__disable_irq();

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <TIM2_IRQHandler+0xd0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	e038      	b.n	8000c14 <TIM2_IRQHandler+0xb0>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000ba2:	4925      	ldr	r1, [pc, #148]	; (8000c38 <TIM2_IRQHandler+0xd4>)
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3314      	adds	r3, #20
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d12a      	bne.n	8000c0e <TIM2_IRQHandler+0xaa>
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000bb8:	491f      	ldr	r1, [pc, #124]	; (8000c38 <TIM2_IRQHandler+0xd4>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	1a9b      	subs	r3, r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3310      	adds	r3, #16
 8000bc8:	681b      	ldr	r3, [r3, #0]
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01f      	beq.n	8000c0e <TIM2_IRQHandler+0xaa>
		   (sys_counter % __tcbs__[current_thread_id].period == 0)){
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <TIM2_IRQHandler+0xc8>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4819      	ldr	r0, [pc, #100]	; (8000c38 <TIM2_IRQHandler+0xd4>)
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	1a5b      	subs	r3, r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4403      	add	r3, r0
 8000be0:	3310      	adds	r3, #16
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	fbb2 f1f3 	udiv	r1, r2, r3
 8000be8:	fb01 f303 	mul.w	r3, r1, r3
 8000bec:	1ad3      	subs	r3, r2, r3
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10d      	bne.n	8000c0e <TIM2_IRQHandler+0xaa>

				SysTick->VAL = SysTick->LOAD;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <TIM2_IRQHandler+0xd8>)
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <TIM2_IRQHandler+0xd8>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	6093      	str	r3, [r2, #8]
				__tcbs__[current_thread_id].periodic_task();
 8000bfa:	490f      	ldr	r1, [pc, #60]	; (8000c38 <TIM2_IRQHandler+0xd4>)
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	3318      	adds	r3, #24
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4798      	blx	r3
			current_thread_id++)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <TIM2_IRQHandler+0xdc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d9c1      	bls.n	8000ba2 <TIM2_IRQHandler+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c1e:	b662      	cpsie	i
}
 8000c20:	bf00      	nop
		}
	}

	__enable_irq();

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20001158 	.word	0x20001158
 8000c30:	10624dd3 	.word	0x10624dd3
 8000c34:	20001150 	.word	0x20001150
 8000c38:	20000080 	.word	0x20000080
 8000c3c:	e000e010 	.word	0xe000e010
 8000c40:	20001154 	.word	0x20001154

08000c44 <osAddThread>:
#include "ysRTOS.h"


tid_t osAddThread(void (*thread)(void)){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	/*
	 * tid_t defined in config/config.h
	 *
	 * */

	tid_t thread_id = add_thread(thread);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fcb9 	bl	80005c4 <add_thread>
 8000c52:	60f8      	str	r0, [r7, #12]

	return thread_id;
 8000c54:	68fb      	ldr	r3, [r7, #12]

}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <osAddPeriodicThread>:

tid_t osAddPeriodicThread(void (*thread)(void), uint32_t period){
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]

	tid_t thread_id = add_periodic_thread(thread, period);
 8000c68:	6839      	ldr	r1, [r7, #0]
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fd4e 	bl	800070c <add_periodic_thread>
 8000c70:	60f8      	str	r0, [r7, #12]

	return thread_id;
 8000c72:	68fb      	ldr	r3, [r7, #12]

}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	; (8000cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <LoopForever+0xe>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <LoopForever+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000caa:	f000 f83d 	bl	8000d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cae:	f7ff fe03 	bl	80008b8 <main>

08000cb2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   r0, =_estack
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cc0:	08001d98 	.word	0x08001d98
  ldr r2, =_sbss
 8000cc4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000cc8:	20001184 	.word	0x20001184

08000ccc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <__errno>:
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <__errno+0x8>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000000 	.word	0x20000000

08000cdc <exit>:
 8000cdc:	b508      	push	{r3, lr}
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <exit+0x20>)
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	b113      	cbz	r3, 8000cea <exit+0xe>
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f3af 8000 	nop.w
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <exit+0x24>)
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000cf0:	b103      	cbz	r3, 8000cf4 <exit+0x18>
 8000cf2:	4798      	blx	r3
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff fe13 	bl	8000920 <_exit>
 8000cfa:	bf00      	nop
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	08001cf8 	.word	0x08001cf8

08000d04 <fiprintf>:
 8000d04:	b40e      	push	{r1, r2, r3}
 8000d06:	b503      	push	{r0, r1, lr}
 8000d08:	4601      	mov	r1, r0
 8000d0a:	ab03      	add	r3, sp, #12
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <fiprintf+0x20>)
 8000d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d12:	6800      	ldr	r0, [r0, #0]
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	f000 f85d 	bl	8000dd4 <_vfiprintf_r>
 8000d1a:	b002      	add	sp, #8
 8000d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d20:	b003      	add	sp, #12
 8000d22:	4770      	bx	lr
 8000d24:	20000000 	.word	0x20000000

08000d28 <__libc_init_array>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	4d0d      	ldr	r5, [pc, #52]	; (8000d60 <__libc_init_array+0x38>)
 8000d2c:	4c0d      	ldr	r4, [pc, #52]	; (8000d64 <__libc_init_array+0x3c>)
 8000d2e:	1b64      	subs	r4, r4, r5
 8000d30:	10a4      	asrs	r4, r4, #2
 8000d32:	2600      	movs	r6, #0
 8000d34:	42a6      	cmp	r6, r4
 8000d36:	d109      	bne.n	8000d4c <__libc_init_array+0x24>
 8000d38:	4d0b      	ldr	r5, [pc, #44]	; (8000d68 <__libc_init_array+0x40>)
 8000d3a:	4c0c      	ldr	r4, [pc, #48]	; (8000d6c <__libc_init_array+0x44>)
 8000d3c:	f000 ff96 	bl	8001c6c <_init>
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	10a4      	asrs	r4, r4, #2
 8000d44:	2600      	movs	r6, #0
 8000d46:	42a6      	cmp	r6, r4
 8000d48:	d105      	bne.n	8000d56 <__libc_init_array+0x2e>
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d50:	4798      	blx	r3
 8000d52:	3601      	adds	r6, #1
 8000d54:	e7ee      	b.n	8000d34 <__libc_init_array+0xc>
 8000d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5a:	4798      	blx	r3
 8000d5c:	3601      	adds	r6, #1
 8000d5e:	e7f2      	b.n	8000d46 <__libc_init_array+0x1e>
 8000d60:	08001d90 	.word	0x08001d90
 8000d64:	08001d90 	.word	0x08001d90
 8000d68:	08001d90 	.word	0x08001d90
 8000d6c:	08001d94 	.word	0x08001d94

08000d70 <memset>:
 8000d70:	4402      	add	r2, r0
 8000d72:	4603      	mov	r3, r0
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d100      	bne.n	8000d7a <memset+0xa>
 8000d78:	4770      	bx	lr
 8000d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d7e:	e7f9      	b.n	8000d74 <memset+0x4>

08000d80 <__sfputc_r>:
 8000d80:	6893      	ldr	r3, [r2, #8]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	b410      	push	{r4}
 8000d88:	6093      	str	r3, [r2, #8]
 8000d8a:	da08      	bge.n	8000d9e <__sfputc_r+0x1e>
 8000d8c:	6994      	ldr	r4, [r2, #24]
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	db01      	blt.n	8000d96 <__sfputc_r+0x16>
 8000d92:	290a      	cmp	r1, #10
 8000d94:	d103      	bne.n	8000d9e <__sfputc_r+0x1e>
 8000d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d9a:	f000 badf 	b.w	800135c <__swbuf_r>
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	1c58      	adds	r0, r3, #1
 8000da2:	6010      	str	r0, [r2, #0]
 8000da4:	7019      	strb	r1, [r3, #0]
 8000da6:	4608      	mov	r0, r1
 8000da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <__sfputs_r>:
 8000dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db0:	4606      	mov	r6, r0
 8000db2:	460f      	mov	r7, r1
 8000db4:	4614      	mov	r4, r2
 8000db6:	18d5      	adds	r5, r2, r3
 8000db8:	42ac      	cmp	r4, r5
 8000dba:	d101      	bne.n	8000dc0 <__sfputs_r+0x12>
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e007      	b.n	8000dd0 <__sfputs_r+0x22>
 8000dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc4:	463a      	mov	r2, r7
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff ffda 	bl	8000d80 <__sfputc_r>
 8000dcc:	1c43      	adds	r3, r0, #1
 8000dce:	d1f3      	bne.n	8000db8 <__sfputs_r+0xa>
 8000dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000dd4 <_vfiprintf_r>:
 8000dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd8:	460d      	mov	r5, r1
 8000dda:	b09d      	sub	sp, #116	; 0x74
 8000ddc:	4614      	mov	r4, r2
 8000dde:	4698      	mov	r8, r3
 8000de0:	4606      	mov	r6, r0
 8000de2:	b118      	cbz	r0, 8000dec <_vfiprintf_r+0x18>
 8000de4:	6983      	ldr	r3, [r0, #24]
 8000de6:	b90b      	cbnz	r3, 8000dec <_vfiprintf_r+0x18>
 8000de8:	f000 fc92 	bl	8001710 <__sinit>
 8000dec:	4b89      	ldr	r3, [pc, #548]	; (8001014 <_vfiprintf_r+0x240>)
 8000dee:	429d      	cmp	r5, r3
 8000df0:	d11b      	bne.n	8000e2a <_vfiprintf_r+0x56>
 8000df2:	6875      	ldr	r5, [r6, #4]
 8000df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d405      	bmi.n	8000e06 <_vfiprintf_r+0x32>
 8000dfa:	89ab      	ldrh	r3, [r5, #12]
 8000dfc:	059a      	lsls	r2, r3, #22
 8000dfe:	d402      	bmi.n	8000e06 <_vfiprintf_r+0x32>
 8000e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e02:	f000 fd23 	bl	800184c <__retarget_lock_acquire_recursive>
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	071b      	lsls	r3, r3, #28
 8000e0a:	d501      	bpl.n	8000e10 <_vfiprintf_r+0x3c>
 8000e0c:	692b      	ldr	r3, [r5, #16]
 8000e0e:	b9eb      	cbnz	r3, 8000e4c <_vfiprintf_r+0x78>
 8000e10:	4629      	mov	r1, r5
 8000e12:	4630      	mov	r0, r6
 8000e14:	f000 faf4 	bl	8001400 <__swsetup_r>
 8000e18:	b1c0      	cbz	r0, 8000e4c <_vfiprintf_r+0x78>
 8000e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e1c:	07dc      	lsls	r4, r3, #31
 8000e1e:	d50e      	bpl.n	8000e3e <_vfiprintf_r+0x6a>
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e24:	b01d      	add	sp, #116	; 0x74
 8000e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <_vfiprintf_r+0x244>)
 8000e2c:	429d      	cmp	r5, r3
 8000e2e:	d101      	bne.n	8000e34 <_vfiprintf_r+0x60>
 8000e30:	68b5      	ldr	r5, [r6, #8]
 8000e32:	e7df      	b.n	8000df4 <_vfiprintf_r+0x20>
 8000e34:	4b79      	ldr	r3, [pc, #484]	; (800101c <_vfiprintf_r+0x248>)
 8000e36:	429d      	cmp	r5, r3
 8000e38:	bf08      	it	eq
 8000e3a:	68f5      	ldreq	r5, [r6, #12]
 8000e3c:	e7da      	b.n	8000df4 <_vfiprintf_r+0x20>
 8000e3e:	89ab      	ldrh	r3, [r5, #12]
 8000e40:	0598      	lsls	r0, r3, #22
 8000e42:	d4ed      	bmi.n	8000e20 <_vfiprintf_r+0x4c>
 8000e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e46:	f000 fd02 	bl	800184e <__retarget_lock_release_recursive>
 8000e4a:	e7e9      	b.n	8000e20 <_vfiprintf_r+0x4c>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e50:	2320      	movs	r3, #32
 8000e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e5a:	2330      	movs	r3, #48	; 0x30
 8000e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001020 <_vfiprintf_r+0x24c>
 8000e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e64:	f04f 0901 	mov.w	r9, #1
 8000e68:	4623      	mov	r3, r4
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e70:	b10a      	cbz	r2, 8000e76 <_vfiprintf_r+0xa2>
 8000e72:	2a25      	cmp	r2, #37	; 0x25
 8000e74:	d1f9      	bne.n	8000e6a <_vfiprintf_r+0x96>
 8000e76:	ebba 0b04 	subs.w	fp, sl, r4
 8000e7a:	d00b      	beq.n	8000e94 <_vfiprintf_r+0xc0>
 8000e7c:	465b      	mov	r3, fp
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4629      	mov	r1, r5
 8000e82:	4630      	mov	r0, r6
 8000e84:	f7ff ff93 	bl	8000dae <__sfputs_r>
 8000e88:	3001      	adds	r0, #1
 8000e8a:	f000 80aa 	beq.w	8000fe2 <_vfiprintf_r+0x20e>
 8000e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e90:	445a      	add	r2, fp
 8000e92:	9209      	str	r2, [sp, #36]	; 0x24
 8000e94:	f89a 3000 	ldrb.w	r3, [sl]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a2 	beq.w	8000fe2 <_vfiprintf_r+0x20e>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ea8:	f10a 0a01 	add.w	sl, sl, #1
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	9307      	str	r3, [sp, #28]
 8000eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8000eb6:	4654      	mov	r4, sl
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ebe:	4858      	ldr	r0, [pc, #352]	; (8001020 <_vfiprintf_r+0x24c>)
 8000ec0:	f7ff f98e 	bl	80001e0 <memchr>
 8000ec4:	9a04      	ldr	r2, [sp, #16]
 8000ec6:	b9d8      	cbnz	r0, 8000f00 <_vfiprintf_r+0x12c>
 8000ec8:	06d1      	lsls	r1, r2, #27
 8000eca:	bf44      	itt	mi
 8000ecc:	2320      	movmi	r3, #32
 8000ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ed2:	0713      	lsls	r3, r2, #28
 8000ed4:	bf44      	itt	mi
 8000ed6:	232b      	movmi	r3, #43	; 0x2b
 8000ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000edc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee2:	d015      	beq.n	8000f10 <_vfiprintf_r+0x13c>
 8000ee4:	9a07      	ldr	r2, [sp, #28]
 8000ee6:	4654      	mov	r4, sl
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f04f 0c0a 	mov.w	ip, #10
 8000eee:	4621      	mov	r1, r4
 8000ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ef4:	3b30      	subs	r3, #48	; 0x30
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d94e      	bls.n	8000f98 <_vfiprintf_r+0x1c4>
 8000efa:	b1b0      	cbz	r0, 8000f2a <_vfiprintf_r+0x156>
 8000efc:	9207      	str	r2, [sp, #28]
 8000efe:	e014      	b.n	8000f2a <_vfiprintf_r+0x156>
 8000f00:	eba0 0308 	sub.w	r3, r0, r8
 8000f04:	fa09 f303 	lsl.w	r3, r9, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	46a2      	mov	sl, r4
 8000f0e:	e7d2      	b.n	8000eb6 <_vfiprintf_r+0xe2>
 8000f10:	9b03      	ldr	r3, [sp, #12]
 8000f12:	1d19      	adds	r1, r3, #4
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	9103      	str	r1, [sp, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bfbb      	ittet	lt
 8000f1c:	425b      	neglt	r3, r3
 8000f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f22:	9307      	strge	r3, [sp, #28]
 8000f24:	9307      	strlt	r3, [sp, #28]
 8000f26:	bfb8      	it	lt
 8000f28:	9204      	strlt	r2, [sp, #16]
 8000f2a:	7823      	ldrb	r3, [r4, #0]
 8000f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f2e:	d10c      	bne.n	8000f4a <_vfiprintf_r+0x176>
 8000f30:	7863      	ldrb	r3, [r4, #1]
 8000f32:	2b2a      	cmp	r3, #42	; 0x2a
 8000f34:	d135      	bne.n	8000fa2 <_vfiprintf_r+0x1ce>
 8000f36:	9b03      	ldr	r3, [sp, #12]
 8000f38:	1d1a      	adds	r2, r3, #4
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	9203      	str	r2, [sp, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bfb8      	it	lt
 8000f42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000f46:	3402      	adds	r4, #2
 8000f48:	9305      	str	r3, [sp, #20]
 8000f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001030 <_vfiprintf_r+0x25c>
 8000f4e:	7821      	ldrb	r1, [r4, #0]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4650      	mov	r0, sl
 8000f54:	f7ff f944 	bl	80001e0 <memchr>
 8000f58:	b140      	cbz	r0, 8000f6c <_vfiprintf_r+0x198>
 8000f5a:	2340      	movs	r3, #64	; 0x40
 8000f5c:	eba0 000a 	sub.w	r0, r0, sl
 8000f60:	fa03 f000 	lsl.w	r0, r3, r0
 8000f64:	9b04      	ldr	r3, [sp, #16]
 8000f66:	4303      	orrs	r3, r0
 8000f68:	3401      	adds	r4, #1
 8000f6a:	9304      	str	r3, [sp, #16]
 8000f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f70:	482c      	ldr	r0, [pc, #176]	; (8001024 <_vfiprintf_r+0x250>)
 8000f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f76:	2206      	movs	r2, #6
 8000f78:	f7ff f932 	bl	80001e0 <memchr>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d03f      	beq.n	8001000 <_vfiprintf_r+0x22c>
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <_vfiprintf_r+0x254>)
 8000f82:	bb1b      	cbnz	r3, 8000fcc <_vfiprintf_r+0x1f8>
 8000f84:	9b03      	ldr	r3, [sp, #12]
 8000f86:	3307      	adds	r3, #7
 8000f88:	f023 0307 	bic.w	r3, r3, #7
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	9303      	str	r3, [sp, #12]
 8000f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f92:	443b      	add	r3, r7
 8000f94:	9309      	str	r3, [sp, #36]	; 0x24
 8000f96:	e767      	b.n	8000e68 <_vfiprintf_r+0x94>
 8000f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	e7a5      	b.n	8000eee <_vfiprintf_r+0x11a>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	3401      	adds	r4, #1
 8000fa6:	9305      	str	r3, [sp, #20]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 0c0a 	mov.w	ip, #10
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fb4:	3a30      	subs	r2, #48	; 0x30
 8000fb6:	2a09      	cmp	r2, #9
 8000fb8:	d903      	bls.n	8000fc2 <_vfiprintf_r+0x1ee>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0c5      	beq.n	8000f4a <_vfiprintf_r+0x176>
 8000fbe:	9105      	str	r1, [sp, #20]
 8000fc0:	e7c3      	b.n	8000f4a <_vfiprintf_r+0x176>
 8000fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e7f0      	b.n	8000fae <_vfiprintf_r+0x1da>
 8000fcc:	ab03      	add	r3, sp, #12
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	462a      	mov	r2, r5
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <_vfiprintf_r+0x258>)
 8000fd4:	a904      	add	r1, sp, #16
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f3af 8000 	nop.w
 8000fdc:	4607      	mov	r7, r0
 8000fde:	1c78      	adds	r0, r7, #1
 8000fe0:	d1d6      	bne.n	8000f90 <_vfiprintf_r+0x1bc>
 8000fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fe4:	07d9      	lsls	r1, r3, #31
 8000fe6:	d405      	bmi.n	8000ff4 <_vfiprintf_r+0x220>
 8000fe8:	89ab      	ldrh	r3, [r5, #12]
 8000fea:	059a      	lsls	r2, r3, #22
 8000fec:	d402      	bmi.n	8000ff4 <_vfiprintf_r+0x220>
 8000fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ff0:	f000 fc2d 	bl	800184e <__retarget_lock_release_recursive>
 8000ff4:	89ab      	ldrh	r3, [r5, #12]
 8000ff6:	065b      	lsls	r3, r3, #25
 8000ff8:	f53f af12 	bmi.w	8000e20 <_vfiprintf_r+0x4c>
 8000ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ffe:	e711      	b.n	8000e24 <_vfiprintf_r+0x50>
 8001000:	ab03      	add	r3, sp, #12
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	462a      	mov	r2, r5
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <_vfiprintf_r+0x258>)
 8001008:	a904      	add	r1, sp, #16
 800100a:	4630      	mov	r0, r6
 800100c:	f000 f880 	bl	8001110 <_printf_i>
 8001010:	e7e4      	b.n	8000fdc <_vfiprintf_r+0x208>
 8001012:	bf00      	nop
 8001014:	08001d50 	.word	0x08001d50
 8001018:	08001d70 	.word	0x08001d70
 800101c:	08001d30 	.word	0x08001d30
 8001020:	08001cfc 	.word	0x08001cfc
 8001024:	08001d06 	.word	0x08001d06
 8001028:	00000000 	.word	0x00000000
 800102c:	08000daf 	.word	0x08000daf
 8001030:	08001d02 	.word	0x08001d02

08001034 <_printf_common>:
 8001034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001038:	4616      	mov	r6, r2
 800103a:	4699      	mov	r9, r3
 800103c:	688a      	ldr	r2, [r1, #8]
 800103e:	690b      	ldr	r3, [r1, #16]
 8001040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001044:	4293      	cmp	r3, r2
 8001046:	bfb8      	it	lt
 8001048:	4613      	movlt	r3, r2
 800104a:	6033      	str	r3, [r6, #0]
 800104c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001050:	4607      	mov	r7, r0
 8001052:	460c      	mov	r4, r1
 8001054:	b10a      	cbz	r2, 800105a <_printf_common+0x26>
 8001056:	3301      	adds	r3, #1
 8001058:	6033      	str	r3, [r6, #0]
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	0699      	lsls	r1, r3, #26
 800105e:	bf42      	ittt	mi
 8001060:	6833      	ldrmi	r3, [r6, #0]
 8001062:	3302      	addmi	r3, #2
 8001064:	6033      	strmi	r3, [r6, #0]
 8001066:	6825      	ldr	r5, [r4, #0]
 8001068:	f015 0506 	ands.w	r5, r5, #6
 800106c:	d106      	bne.n	800107c <_printf_common+0x48>
 800106e:	f104 0a19 	add.w	sl, r4, #25
 8001072:	68e3      	ldr	r3, [r4, #12]
 8001074:	6832      	ldr	r2, [r6, #0]
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	42ab      	cmp	r3, r5
 800107a:	dc26      	bgt.n	80010ca <_printf_common+0x96>
 800107c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001080:	1e13      	subs	r3, r2, #0
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	bf18      	it	ne
 8001086:	2301      	movne	r3, #1
 8001088:	0692      	lsls	r2, r2, #26
 800108a:	d42b      	bmi.n	80010e4 <_printf_common+0xb0>
 800108c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001090:	4649      	mov	r1, r9
 8001092:	4638      	mov	r0, r7
 8001094:	47c0      	blx	r8
 8001096:	3001      	adds	r0, #1
 8001098:	d01e      	beq.n	80010d8 <_printf_common+0xa4>
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	68e5      	ldr	r5, [r4, #12]
 800109e:	6832      	ldr	r2, [r6, #0]
 80010a0:	f003 0306 	and.w	r3, r3, #6
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	bf08      	it	eq
 80010a8:	1aad      	subeq	r5, r5, r2
 80010aa:	68a3      	ldr	r3, [r4, #8]
 80010ac:	6922      	ldr	r2, [r4, #16]
 80010ae:	bf0c      	ite	eq
 80010b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010b4:	2500      	movne	r5, #0
 80010b6:	4293      	cmp	r3, r2
 80010b8:	bfc4      	itt	gt
 80010ba:	1a9b      	subgt	r3, r3, r2
 80010bc:	18ed      	addgt	r5, r5, r3
 80010be:	2600      	movs	r6, #0
 80010c0:	341a      	adds	r4, #26
 80010c2:	42b5      	cmp	r5, r6
 80010c4:	d11a      	bne.n	80010fc <_printf_common+0xc8>
 80010c6:	2000      	movs	r0, #0
 80010c8:	e008      	b.n	80010dc <_printf_common+0xa8>
 80010ca:	2301      	movs	r3, #1
 80010cc:	4652      	mov	r2, sl
 80010ce:	4649      	mov	r1, r9
 80010d0:	4638      	mov	r0, r7
 80010d2:	47c0      	blx	r8
 80010d4:	3001      	adds	r0, #1
 80010d6:	d103      	bne.n	80010e0 <_printf_common+0xac>
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e0:	3501      	adds	r5, #1
 80010e2:	e7c6      	b.n	8001072 <_printf_common+0x3e>
 80010e4:	18e1      	adds	r1, r4, r3
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	2030      	movs	r0, #48	; 0x30
 80010ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80010ee:	4422      	add	r2, r4
 80010f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010f8:	3302      	adds	r3, #2
 80010fa:	e7c7      	b.n	800108c <_printf_common+0x58>
 80010fc:	2301      	movs	r3, #1
 80010fe:	4622      	mov	r2, r4
 8001100:	4649      	mov	r1, r9
 8001102:	4638      	mov	r0, r7
 8001104:	47c0      	blx	r8
 8001106:	3001      	adds	r0, #1
 8001108:	d0e6      	beq.n	80010d8 <_printf_common+0xa4>
 800110a:	3601      	adds	r6, #1
 800110c:	e7d9      	b.n	80010c2 <_printf_common+0x8e>
	...

08001110 <_printf_i>:
 8001110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	7e0f      	ldrb	r7, [r1, #24]
 8001116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001118:	2f78      	cmp	r7, #120	; 0x78
 800111a:	4691      	mov	r9, r2
 800111c:	4680      	mov	r8, r0
 800111e:	460c      	mov	r4, r1
 8001120:	469a      	mov	sl, r3
 8001122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001126:	d807      	bhi.n	8001138 <_printf_i+0x28>
 8001128:	2f62      	cmp	r7, #98	; 0x62
 800112a:	d80a      	bhi.n	8001142 <_printf_i+0x32>
 800112c:	2f00      	cmp	r7, #0
 800112e:	f000 80d8 	beq.w	80012e2 <_printf_i+0x1d2>
 8001132:	2f58      	cmp	r7, #88	; 0x58
 8001134:	f000 80a3 	beq.w	800127e <_printf_i+0x16e>
 8001138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800113c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001140:	e03a      	b.n	80011b8 <_printf_i+0xa8>
 8001142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001146:	2b15      	cmp	r3, #21
 8001148:	d8f6      	bhi.n	8001138 <_printf_i+0x28>
 800114a:	a101      	add	r1, pc, #4	; (adr r1, 8001150 <_printf_i+0x40>)
 800114c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001150:	080011a9 	.word	0x080011a9
 8001154:	080011bd 	.word	0x080011bd
 8001158:	08001139 	.word	0x08001139
 800115c:	08001139 	.word	0x08001139
 8001160:	08001139 	.word	0x08001139
 8001164:	08001139 	.word	0x08001139
 8001168:	080011bd 	.word	0x080011bd
 800116c:	08001139 	.word	0x08001139
 8001170:	08001139 	.word	0x08001139
 8001174:	08001139 	.word	0x08001139
 8001178:	08001139 	.word	0x08001139
 800117c:	080012c9 	.word	0x080012c9
 8001180:	080011ed 	.word	0x080011ed
 8001184:	080012ab 	.word	0x080012ab
 8001188:	08001139 	.word	0x08001139
 800118c:	08001139 	.word	0x08001139
 8001190:	080012eb 	.word	0x080012eb
 8001194:	08001139 	.word	0x08001139
 8001198:	080011ed 	.word	0x080011ed
 800119c:	08001139 	.word	0x08001139
 80011a0:	08001139 	.word	0x08001139
 80011a4:	080012b3 	.word	0x080012b3
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	1d1a      	adds	r2, r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	602a      	str	r2, [r5, #0]
 80011b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0a3      	b.n	8001304 <_printf_i+0x1f4>
 80011bc:	6820      	ldr	r0, [r4, #0]
 80011be:	6829      	ldr	r1, [r5, #0]
 80011c0:	0606      	lsls	r6, r0, #24
 80011c2:	f101 0304 	add.w	r3, r1, #4
 80011c6:	d50a      	bpl.n	80011de <_printf_i+0xce>
 80011c8:	680e      	ldr	r6, [r1, #0]
 80011ca:	602b      	str	r3, [r5, #0]
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	da03      	bge.n	80011d8 <_printf_i+0xc8>
 80011d0:	232d      	movs	r3, #45	; 0x2d
 80011d2:	4276      	negs	r6, r6
 80011d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011d8:	485e      	ldr	r0, [pc, #376]	; (8001354 <_printf_i+0x244>)
 80011da:	230a      	movs	r3, #10
 80011dc:	e019      	b.n	8001212 <_printf_i+0x102>
 80011de:	680e      	ldr	r6, [r1, #0]
 80011e0:	602b      	str	r3, [r5, #0]
 80011e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80011e6:	bf18      	it	ne
 80011e8:	b236      	sxthne	r6, r6
 80011ea:	e7ef      	b.n	80011cc <_printf_i+0xbc>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	1d19      	adds	r1, r3, #4
 80011f2:	6029      	str	r1, [r5, #0]
 80011f4:	0601      	lsls	r1, r0, #24
 80011f6:	d501      	bpl.n	80011fc <_printf_i+0xec>
 80011f8:	681e      	ldr	r6, [r3, #0]
 80011fa:	e002      	b.n	8001202 <_printf_i+0xf2>
 80011fc:	0646      	lsls	r6, r0, #25
 80011fe:	d5fb      	bpl.n	80011f8 <_printf_i+0xe8>
 8001200:	881e      	ldrh	r6, [r3, #0]
 8001202:	4854      	ldr	r0, [pc, #336]	; (8001354 <_printf_i+0x244>)
 8001204:	2f6f      	cmp	r7, #111	; 0x6f
 8001206:	bf0c      	ite	eq
 8001208:	2308      	moveq	r3, #8
 800120a:	230a      	movne	r3, #10
 800120c:	2100      	movs	r1, #0
 800120e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001212:	6865      	ldr	r5, [r4, #4]
 8001214:	60a5      	str	r5, [r4, #8]
 8001216:	2d00      	cmp	r5, #0
 8001218:	bfa2      	ittt	ge
 800121a:	6821      	ldrge	r1, [r4, #0]
 800121c:	f021 0104 	bicge.w	r1, r1, #4
 8001220:	6021      	strge	r1, [r4, #0]
 8001222:	b90e      	cbnz	r6, 8001228 <_printf_i+0x118>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d04d      	beq.n	80012c4 <_printf_i+0x1b4>
 8001228:	4615      	mov	r5, r2
 800122a:	fbb6 f1f3 	udiv	r1, r6, r3
 800122e:	fb03 6711 	mls	r7, r3, r1, r6
 8001232:	5dc7      	ldrb	r7, [r0, r7]
 8001234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001238:	4637      	mov	r7, r6
 800123a:	42bb      	cmp	r3, r7
 800123c:	460e      	mov	r6, r1
 800123e:	d9f4      	bls.n	800122a <_printf_i+0x11a>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d10b      	bne.n	800125c <_printf_i+0x14c>
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	07de      	lsls	r6, r3, #31
 8001248:	d508      	bpl.n	800125c <_printf_i+0x14c>
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	4299      	cmp	r1, r3
 8001250:	bfde      	ittt	le
 8001252:	2330      	movle	r3, #48	; 0x30
 8001254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001258:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800125c:	1b52      	subs	r2, r2, r5
 800125e:	6122      	str	r2, [r4, #16]
 8001260:	f8cd a000 	str.w	sl, [sp]
 8001264:	464b      	mov	r3, r9
 8001266:	aa03      	add	r2, sp, #12
 8001268:	4621      	mov	r1, r4
 800126a:	4640      	mov	r0, r8
 800126c:	f7ff fee2 	bl	8001034 <_printf_common>
 8001270:	3001      	adds	r0, #1
 8001272:	d14c      	bne.n	800130e <_printf_i+0x1fe>
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001278:	b004      	add	sp, #16
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	4835      	ldr	r0, [pc, #212]	; (8001354 <_printf_i+0x244>)
 8001280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001284:	6829      	ldr	r1, [r5, #0]
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	f851 6b04 	ldr.w	r6, [r1], #4
 800128c:	6029      	str	r1, [r5, #0]
 800128e:	061d      	lsls	r5, r3, #24
 8001290:	d514      	bpl.n	80012bc <_printf_i+0x1ac>
 8001292:	07df      	lsls	r7, r3, #31
 8001294:	bf44      	itt	mi
 8001296:	f043 0320 	orrmi.w	r3, r3, #32
 800129a:	6023      	strmi	r3, [r4, #0]
 800129c:	b91e      	cbnz	r6, 80012a6 <_printf_i+0x196>
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	f023 0320 	bic.w	r3, r3, #32
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	2310      	movs	r3, #16
 80012a8:	e7b0      	b.n	800120c <_printf_i+0xfc>
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	2378      	movs	r3, #120	; 0x78
 80012b4:	4828      	ldr	r0, [pc, #160]	; (8001358 <_printf_i+0x248>)
 80012b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012ba:	e7e3      	b.n	8001284 <_printf_i+0x174>
 80012bc:	0659      	lsls	r1, r3, #25
 80012be:	bf48      	it	mi
 80012c0:	b2b6      	uxthmi	r6, r6
 80012c2:	e7e6      	b.n	8001292 <_printf_i+0x182>
 80012c4:	4615      	mov	r5, r2
 80012c6:	e7bb      	b.n	8001240 <_printf_i+0x130>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	6826      	ldr	r6, [r4, #0]
 80012cc:	6961      	ldr	r1, [r4, #20]
 80012ce:	1d18      	adds	r0, r3, #4
 80012d0:	6028      	str	r0, [r5, #0]
 80012d2:	0635      	lsls	r5, r6, #24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	d501      	bpl.n	80012dc <_printf_i+0x1cc>
 80012d8:	6019      	str	r1, [r3, #0]
 80012da:	e002      	b.n	80012e2 <_printf_i+0x1d2>
 80012dc:	0670      	lsls	r0, r6, #25
 80012de:	d5fb      	bpl.n	80012d8 <_printf_i+0x1c8>
 80012e0:	8019      	strh	r1, [r3, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	6123      	str	r3, [r4, #16]
 80012e6:	4615      	mov	r5, r2
 80012e8:	e7ba      	b.n	8001260 <_printf_i+0x150>
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	1d1a      	adds	r2, r3, #4
 80012ee:	602a      	str	r2, [r5, #0]
 80012f0:	681d      	ldr	r5, [r3, #0]
 80012f2:	6862      	ldr	r2, [r4, #4]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4628      	mov	r0, r5
 80012f8:	f7fe ff72 	bl	80001e0 <memchr>
 80012fc:	b108      	cbz	r0, 8001302 <_printf_i+0x1f2>
 80012fe:	1b40      	subs	r0, r0, r5
 8001300:	6060      	str	r0, [r4, #4]
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	6123      	str	r3, [r4, #16]
 8001306:	2300      	movs	r3, #0
 8001308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800130c:	e7a8      	b.n	8001260 <_printf_i+0x150>
 800130e:	6923      	ldr	r3, [r4, #16]
 8001310:	462a      	mov	r2, r5
 8001312:	4649      	mov	r1, r9
 8001314:	4640      	mov	r0, r8
 8001316:	47d0      	blx	sl
 8001318:	3001      	adds	r0, #1
 800131a:	d0ab      	beq.n	8001274 <_printf_i+0x164>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	079b      	lsls	r3, r3, #30
 8001320:	d413      	bmi.n	800134a <_printf_i+0x23a>
 8001322:	68e0      	ldr	r0, [r4, #12]
 8001324:	9b03      	ldr	r3, [sp, #12]
 8001326:	4298      	cmp	r0, r3
 8001328:	bfb8      	it	lt
 800132a:	4618      	movlt	r0, r3
 800132c:	e7a4      	b.n	8001278 <_printf_i+0x168>
 800132e:	2301      	movs	r3, #1
 8001330:	4632      	mov	r2, r6
 8001332:	4649      	mov	r1, r9
 8001334:	4640      	mov	r0, r8
 8001336:	47d0      	blx	sl
 8001338:	3001      	adds	r0, #1
 800133a:	d09b      	beq.n	8001274 <_printf_i+0x164>
 800133c:	3501      	adds	r5, #1
 800133e:	68e3      	ldr	r3, [r4, #12]
 8001340:	9903      	ldr	r1, [sp, #12]
 8001342:	1a5b      	subs	r3, r3, r1
 8001344:	42ab      	cmp	r3, r5
 8001346:	dcf2      	bgt.n	800132e <_printf_i+0x21e>
 8001348:	e7eb      	b.n	8001322 <_printf_i+0x212>
 800134a:	2500      	movs	r5, #0
 800134c:	f104 0619 	add.w	r6, r4, #25
 8001350:	e7f5      	b.n	800133e <_printf_i+0x22e>
 8001352:	bf00      	nop
 8001354:	08001d0d 	.word	0x08001d0d
 8001358:	08001d1e 	.word	0x08001d1e

0800135c <__swbuf_r>:
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135e:	460e      	mov	r6, r1
 8001360:	4614      	mov	r4, r2
 8001362:	4605      	mov	r5, r0
 8001364:	b118      	cbz	r0, 800136e <__swbuf_r+0x12>
 8001366:	6983      	ldr	r3, [r0, #24]
 8001368:	b90b      	cbnz	r3, 800136e <__swbuf_r+0x12>
 800136a:	f000 f9d1 	bl	8001710 <__sinit>
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <__swbuf_r+0x98>)
 8001370:	429c      	cmp	r4, r3
 8001372:	d12b      	bne.n	80013cc <__swbuf_r+0x70>
 8001374:	686c      	ldr	r4, [r5, #4]
 8001376:	69a3      	ldr	r3, [r4, #24]
 8001378:	60a3      	str	r3, [r4, #8]
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	071a      	lsls	r2, r3, #28
 800137e:	d52f      	bpl.n	80013e0 <__swbuf_r+0x84>
 8001380:	6923      	ldr	r3, [r4, #16]
 8001382:	b36b      	cbz	r3, 80013e0 <__swbuf_r+0x84>
 8001384:	6923      	ldr	r3, [r4, #16]
 8001386:	6820      	ldr	r0, [r4, #0]
 8001388:	1ac0      	subs	r0, r0, r3
 800138a:	6963      	ldr	r3, [r4, #20]
 800138c:	b2f6      	uxtb	r6, r6
 800138e:	4283      	cmp	r3, r0
 8001390:	4637      	mov	r7, r6
 8001392:	dc04      	bgt.n	800139e <__swbuf_r+0x42>
 8001394:	4621      	mov	r1, r4
 8001396:	4628      	mov	r0, r5
 8001398:	f000 f926 	bl	80015e8 <_fflush_r>
 800139c:	bb30      	cbnz	r0, 80013ec <__swbuf_r+0x90>
 800139e:	68a3      	ldr	r3, [r4, #8]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60a3      	str	r3, [r4, #8]
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	6022      	str	r2, [r4, #0]
 80013aa:	701e      	strb	r6, [r3, #0]
 80013ac:	6963      	ldr	r3, [r4, #20]
 80013ae:	3001      	adds	r0, #1
 80013b0:	4283      	cmp	r3, r0
 80013b2:	d004      	beq.n	80013be <__swbuf_r+0x62>
 80013b4:	89a3      	ldrh	r3, [r4, #12]
 80013b6:	07db      	lsls	r3, r3, #31
 80013b8:	d506      	bpl.n	80013c8 <__swbuf_r+0x6c>
 80013ba:	2e0a      	cmp	r6, #10
 80013bc:	d104      	bne.n	80013c8 <__swbuf_r+0x6c>
 80013be:	4621      	mov	r1, r4
 80013c0:	4628      	mov	r0, r5
 80013c2:	f000 f911 	bl	80015e8 <_fflush_r>
 80013c6:	b988      	cbnz	r0, 80013ec <__swbuf_r+0x90>
 80013c8:	4638      	mov	r0, r7
 80013ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <__swbuf_r+0x9c>)
 80013ce:	429c      	cmp	r4, r3
 80013d0:	d101      	bne.n	80013d6 <__swbuf_r+0x7a>
 80013d2:	68ac      	ldr	r4, [r5, #8]
 80013d4:	e7cf      	b.n	8001376 <__swbuf_r+0x1a>
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <__swbuf_r+0xa0>)
 80013d8:	429c      	cmp	r4, r3
 80013da:	bf08      	it	eq
 80013dc:	68ec      	ldreq	r4, [r5, #12]
 80013de:	e7ca      	b.n	8001376 <__swbuf_r+0x1a>
 80013e0:	4621      	mov	r1, r4
 80013e2:	4628      	mov	r0, r5
 80013e4:	f000 f80c 	bl	8001400 <__swsetup_r>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d0cb      	beq.n	8001384 <__swbuf_r+0x28>
 80013ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80013f0:	e7ea      	b.n	80013c8 <__swbuf_r+0x6c>
 80013f2:	bf00      	nop
 80013f4:	08001d50 	.word	0x08001d50
 80013f8:	08001d70 	.word	0x08001d70
 80013fc:	08001d30 	.word	0x08001d30

08001400 <__swsetup_r>:
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <__swsetup_r+0xcc>)
 8001402:	b570      	push	{r4, r5, r6, lr}
 8001404:	681d      	ldr	r5, [r3, #0]
 8001406:	4606      	mov	r6, r0
 8001408:	460c      	mov	r4, r1
 800140a:	b125      	cbz	r5, 8001416 <__swsetup_r+0x16>
 800140c:	69ab      	ldr	r3, [r5, #24]
 800140e:	b913      	cbnz	r3, 8001416 <__swsetup_r+0x16>
 8001410:	4628      	mov	r0, r5
 8001412:	f000 f97d 	bl	8001710 <__sinit>
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <__swsetup_r+0xd0>)
 8001418:	429c      	cmp	r4, r3
 800141a:	d10f      	bne.n	800143c <__swsetup_r+0x3c>
 800141c:	686c      	ldr	r4, [r5, #4]
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001424:	0719      	lsls	r1, r3, #28
 8001426:	d42c      	bmi.n	8001482 <__swsetup_r+0x82>
 8001428:	06dd      	lsls	r5, r3, #27
 800142a:	d411      	bmi.n	8001450 <__swsetup_r+0x50>
 800142c:	2309      	movs	r3, #9
 800142e:	6033      	str	r3, [r6, #0]
 8001430:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143a:	e03e      	b.n	80014ba <__swsetup_r+0xba>
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <__swsetup_r+0xd4>)
 800143e:	429c      	cmp	r4, r3
 8001440:	d101      	bne.n	8001446 <__swsetup_r+0x46>
 8001442:	68ac      	ldr	r4, [r5, #8]
 8001444:	e7eb      	b.n	800141e <__swsetup_r+0x1e>
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <__swsetup_r+0xd8>)
 8001448:	429c      	cmp	r4, r3
 800144a:	bf08      	it	eq
 800144c:	68ec      	ldreq	r4, [r5, #12]
 800144e:	e7e6      	b.n	800141e <__swsetup_r+0x1e>
 8001450:	0758      	lsls	r0, r3, #29
 8001452:	d512      	bpl.n	800147a <__swsetup_r+0x7a>
 8001454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001456:	b141      	cbz	r1, 800146a <__swsetup_r+0x6a>
 8001458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800145c:	4299      	cmp	r1, r3
 800145e:	d002      	beq.n	8001466 <__swsetup_r+0x66>
 8001460:	4630      	mov	r0, r6
 8001462:	f000 fa5b 	bl	800191c <_free_r>
 8001466:	2300      	movs	r3, #0
 8001468:	6363      	str	r3, [r4, #52]	; 0x34
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001470:	81a3      	strh	r3, [r4, #12]
 8001472:	2300      	movs	r3, #0
 8001474:	6063      	str	r3, [r4, #4]
 8001476:	6923      	ldr	r3, [r4, #16]
 8001478:	6023      	str	r3, [r4, #0]
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	81a3      	strh	r3, [r4, #12]
 8001482:	6923      	ldr	r3, [r4, #16]
 8001484:	b94b      	cbnz	r3, 800149a <__swsetup_r+0x9a>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800148c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001490:	d003      	beq.n	800149a <__swsetup_r+0x9a>
 8001492:	4621      	mov	r1, r4
 8001494:	4630      	mov	r0, r6
 8001496:	f000 fa01 	bl	800189c <__smakebuf_r>
 800149a:	89a0      	ldrh	r0, [r4, #12]
 800149c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014a0:	f010 0301 	ands.w	r3, r0, #1
 80014a4:	d00a      	beq.n	80014bc <__swsetup_r+0xbc>
 80014a6:	2300      	movs	r3, #0
 80014a8:	60a3      	str	r3, [r4, #8]
 80014aa:	6963      	ldr	r3, [r4, #20]
 80014ac:	425b      	negs	r3, r3
 80014ae:	61a3      	str	r3, [r4, #24]
 80014b0:	6923      	ldr	r3, [r4, #16]
 80014b2:	b943      	cbnz	r3, 80014c6 <__swsetup_r+0xc6>
 80014b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014b8:	d1ba      	bne.n	8001430 <__swsetup_r+0x30>
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	0781      	lsls	r1, r0, #30
 80014be:	bf58      	it	pl
 80014c0:	6963      	ldrpl	r3, [r4, #20]
 80014c2:	60a3      	str	r3, [r4, #8]
 80014c4:	e7f4      	b.n	80014b0 <__swsetup_r+0xb0>
 80014c6:	2000      	movs	r0, #0
 80014c8:	e7f7      	b.n	80014ba <__swsetup_r+0xba>
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000
 80014d0:	08001d50 	.word	0x08001d50
 80014d4:	08001d70 	.word	0x08001d70
 80014d8:	08001d30 	.word	0x08001d30

080014dc <__sflush_r>:
 80014dc:	898a      	ldrh	r2, [r1, #12]
 80014de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e2:	4605      	mov	r5, r0
 80014e4:	0710      	lsls	r0, r2, #28
 80014e6:	460c      	mov	r4, r1
 80014e8:	d458      	bmi.n	800159c <__sflush_r+0xc0>
 80014ea:	684b      	ldr	r3, [r1, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	dc05      	bgt.n	80014fc <__sflush_r+0x20>
 80014f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dc02      	bgt.n	80014fc <__sflush_r+0x20>
 80014f6:	2000      	movs	r0, #0
 80014f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014fe:	2e00      	cmp	r6, #0
 8001500:	d0f9      	beq.n	80014f6 <__sflush_r+0x1a>
 8001502:	2300      	movs	r3, #0
 8001504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001508:	682f      	ldr	r7, [r5, #0]
 800150a:	602b      	str	r3, [r5, #0]
 800150c:	d032      	beq.n	8001574 <__sflush_r+0x98>
 800150e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	075a      	lsls	r2, r3, #29
 8001514:	d505      	bpl.n	8001522 <__sflush_r+0x46>
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	1ac0      	subs	r0, r0, r3
 800151a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800151c:	b10b      	cbz	r3, 8001522 <__sflush_r+0x46>
 800151e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001520:	1ac0      	subs	r0, r0, r3
 8001522:	2300      	movs	r3, #0
 8001524:	4602      	mov	r2, r0
 8001526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001528:	6a21      	ldr	r1, [r4, #32]
 800152a:	4628      	mov	r0, r5
 800152c:	47b0      	blx	r6
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	89a3      	ldrh	r3, [r4, #12]
 8001532:	d106      	bne.n	8001542 <__sflush_r+0x66>
 8001534:	6829      	ldr	r1, [r5, #0]
 8001536:	291d      	cmp	r1, #29
 8001538:	d82c      	bhi.n	8001594 <__sflush_r+0xb8>
 800153a:	4a2a      	ldr	r2, [pc, #168]	; (80015e4 <__sflush_r+0x108>)
 800153c:	40ca      	lsrs	r2, r1
 800153e:	07d6      	lsls	r6, r2, #31
 8001540:	d528      	bpl.n	8001594 <__sflush_r+0xb8>
 8001542:	2200      	movs	r2, #0
 8001544:	6062      	str	r2, [r4, #4]
 8001546:	04d9      	lsls	r1, r3, #19
 8001548:	6922      	ldr	r2, [r4, #16]
 800154a:	6022      	str	r2, [r4, #0]
 800154c:	d504      	bpl.n	8001558 <__sflush_r+0x7c>
 800154e:	1c42      	adds	r2, r0, #1
 8001550:	d101      	bne.n	8001556 <__sflush_r+0x7a>
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	b903      	cbnz	r3, 8001558 <__sflush_r+0x7c>
 8001556:	6560      	str	r0, [r4, #84]	; 0x54
 8001558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800155a:	602f      	str	r7, [r5, #0]
 800155c:	2900      	cmp	r1, #0
 800155e:	d0ca      	beq.n	80014f6 <__sflush_r+0x1a>
 8001560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001564:	4299      	cmp	r1, r3
 8001566:	d002      	beq.n	800156e <__sflush_r+0x92>
 8001568:	4628      	mov	r0, r5
 800156a:	f000 f9d7 	bl	800191c <_free_r>
 800156e:	2000      	movs	r0, #0
 8001570:	6360      	str	r0, [r4, #52]	; 0x34
 8001572:	e7c1      	b.n	80014f8 <__sflush_r+0x1c>
 8001574:	6a21      	ldr	r1, [r4, #32]
 8001576:	2301      	movs	r3, #1
 8001578:	4628      	mov	r0, r5
 800157a:	47b0      	blx	r6
 800157c:	1c41      	adds	r1, r0, #1
 800157e:	d1c7      	bne.n	8001510 <__sflush_r+0x34>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0c4      	beq.n	8001510 <__sflush_r+0x34>
 8001586:	2b1d      	cmp	r3, #29
 8001588:	d001      	beq.n	800158e <__sflush_r+0xb2>
 800158a:	2b16      	cmp	r3, #22
 800158c:	d101      	bne.n	8001592 <__sflush_r+0xb6>
 800158e:	602f      	str	r7, [r5, #0]
 8001590:	e7b1      	b.n	80014f6 <__sflush_r+0x1a>
 8001592:	89a3      	ldrh	r3, [r4, #12]
 8001594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001598:	81a3      	strh	r3, [r4, #12]
 800159a:	e7ad      	b.n	80014f8 <__sflush_r+0x1c>
 800159c:	690f      	ldr	r7, [r1, #16]
 800159e:	2f00      	cmp	r7, #0
 80015a0:	d0a9      	beq.n	80014f6 <__sflush_r+0x1a>
 80015a2:	0793      	lsls	r3, r2, #30
 80015a4:	680e      	ldr	r6, [r1, #0]
 80015a6:	bf08      	it	eq
 80015a8:	694b      	ldreq	r3, [r1, #20]
 80015aa:	600f      	str	r7, [r1, #0]
 80015ac:	bf18      	it	ne
 80015ae:	2300      	movne	r3, #0
 80015b0:	eba6 0807 	sub.w	r8, r6, r7
 80015b4:	608b      	str	r3, [r1, #8]
 80015b6:	f1b8 0f00 	cmp.w	r8, #0
 80015ba:	dd9c      	ble.n	80014f6 <__sflush_r+0x1a>
 80015bc:	6a21      	ldr	r1, [r4, #32]
 80015be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015c0:	4643      	mov	r3, r8
 80015c2:	463a      	mov	r2, r7
 80015c4:	4628      	mov	r0, r5
 80015c6:	47b0      	blx	r6
 80015c8:	2800      	cmp	r0, #0
 80015ca:	dc06      	bgt.n	80015da <__sflush_r+0xfe>
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d2:	81a3      	strh	r3, [r4, #12]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d8:	e78e      	b.n	80014f8 <__sflush_r+0x1c>
 80015da:	4407      	add	r7, r0
 80015dc:	eba8 0800 	sub.w	r8, r8, r0
 80015e0:	e7e9      	b.n	80015b6 <__sflush_r+0xda>
 80015e2:	bf00      	nop
 80015e4:	20400001 	.word	0x20400001

080015e8 <_fflush_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	690b      	ldr	r3, [r1, #16]
 80015ec:	4605      	mov	r5, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	b913      	cbnz	r3, 80015f8 <_fflush_r+0x10>
 80015f2:	2500      	movs	r5, #0
 80015f4:	4628      	mov	r0, r5
 80015f6:	bd38      	pop	{r3, r4, r5, pc}
 80015f8:	b118      	cbz	r0, 8001602 <_fflush_r+0x1a>
 80015fa:	6983      	ldr	r3, [r0, #24]
 80015fc:	b90b      	cbnz	r3, 8001602 <_fflush_r+0x1a>
 80015fe:	f000 f887 	bl	8001710 <__sinit>
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <_fflush_r+0x6c>)
 8001604:	429c      	cmp	r4, r3
 8001606:	d11b      	bne.n	8001640 <_fflush_r+0x58>
 8001608:	686c      	ldr	r4, [r5, #4]
 800160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ef      	beq.n	80015f2 <_fflush_r+0xa>
 8001612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001614:	07d0      	lsls	r0, r2, #31
 8001616:	d404      	bmi.n	8001622 <_fflush_r+0x3a>
 8001618:	0599      	lsls	r1, r3, #22
 800161a:	d402      	bmi.n	8001622 <_fflush_r+0x3a>
 800161c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800161e:	f000 f915 	bl	800184c <__retarget_lock_acquire_recursive>
 8001622:	4628      	mov	r0, r5
 8001624:	4621      	mov	r1, r4
 8001626:	f7ff ff59 	bl	80014dc <__sflush_r>
 800162a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800162c:	07da      	lsls	r2, r3, #31
 800162e:	4605      	mov	r5, r0
 8001630:	d4e0      	bmi.n	80015f4 <_fflush_r+0xc>
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	059b      	lsls	r3, r3, #22
 8001636:	d4dd      	bmi.n	80015f4 <_fflush_r+0xc>
 8001638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800163a:	f000 f908 	bl	800184e <__retarget_lock_release_recursive>
 800163e:	e7d9      	b.n	80015f4 <_fflush_r+0xc>
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <_fflush_r+0x70>)
 8001642:	429c      	cmp	r4, r3
 8001644:	d101      	bne.n	800164a <_fflush_r+0x62>
 8001646:	68ac      	ldr	r4, [r5, #8]
 8001648:	e7df      	b.n	800160a <_fflush_r+0x22>
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <_fflush_r+0x74>)
 800164c:	429c      	cmp	r4, r3
 800164e:	bf08      	it	eq
 8001650:	68ec      	ldreq	r4, [r5, #12]
 8001652:	e7da      	b.n	800160a <_fflush_r+0x22>
 8001654:	08001d50 	.word	0x08001d50
 8001658:	08001d70 	.word	0x08001d70
 800165c:	08001d30 	.word	0x08001d30

08001660 <std>:
 8001660:	2300      	movs	r3, #0
 8001662:	b510      	push	{r4, lr}
 8001664:	4604      	mov	r4, r0
 8001666:	e9c0 3300 	strd	r3, r3, [r0]
 800166a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800166e:	6083      	str	r3, [r0, #8]
 8001670:	8181      	strh	r1, [r0, #12]
 8001672:	6643      	str	r3, [r0, #100]	; 0x64
 8001674:	81c2      	strh	r2, [r0, #14]
 8001676:	6183      	str	r3, [r0, #24]
 8001678:	4619      	mov	r1, r3
 800167a:	2208      	movs	r2, #8
 800167c:	305c      	adds	r0, #92	; 0x5c
 800167e:	f7ff fb77 	bl	8000d70 <memset>
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <std+0x38>)
 8001684:	6263      	str	r3, [r4, #36]	; 0x24
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <std+0x3c>)
 8001688:	62a3      	str	r3, [r4, #40]	; 0x28
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <std+0x40>)
 800168c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <std+0x44>)
 8001690:	6224      	str	r4, [r4, #32]
 8001692:	6323      	str	r3, [r4, #48]	; 0x30
 8001694:	bd10      	pop	{r4, pc}
 8001696:	bf00      	nop
 8001698:	08001afd 	.word	0x08001afd
 800169c:	08001b1f 	.word	0x08001b1f
 80016a0:	08001b57 	.word	0x08001b57
 80016a4:	08001b7b 	.word	0x08001b7b

080016a8 <_cleanup_r>:
 80016a8:	4901      	ldr	r1, [pc, #4]	; (80016b0 <_cleanup_r+0x8>)
 80016aa:	f000 b8af 	b.w	800180c <_fwalk_reent>
 80016ae:	bf00      	nop
 80016b0:	080015e9 	.word	0x080015e9

080016b4 <__sfmoreglue>:
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	2268      	movs	r2, #104	; 0x68
 80016b8:	1e4d      	subs	r5, r1, #1
 80016ba:	4355      	muls	r5, r2
 80016bc:	460e      	mov	r6, r1
 80016be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80016c2:	f000 f997 	bl	80019f4 <_malloc_r>
 80016c6:	4604      	mov	r4, r0
 80016c8:	b140      	cbz	r0, 80016dc <__sfmoreglue+0x28>
 80016ca:	2100      	movs	r1, #0
 80016cc:	e9c0 1600 	strd	r1, r6, [r0]
 80016d0:	300c      	adds	r0, #12
 80016d2:	60a0      	str	r0, [r4, #8]
 80016d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016d8:	f7ff fb4a 	bl	8000d70 <memset>
 80016dc:	4620      	mov	r0, r4
 80016de:	bd70      	pop	{r4, r5, r6, pc}

080016e0 <__sfp_lock_acquire>:
 80016e0:	4801      	ldr	r0, [pc, #4]	; (80016e8 <__sfp_lock_acquire+0x8>)
 80016e2:	f000 b8b3 	b.w	800184c <__retarget_lock_acquire_recursive>
 80016e6:	bf00      	nop
 80016e8:	20001175 	.word	0x20001175

080016ec <__sfp_lock_release>:
 80016ec:	4801      	ldr	r0, [pc, #4]	; (80016f4 <__sfp_lock_release+0x8>)
 80016ee:	f000 b8ae 	b.w	800184e <__retarget_lock_release_recursive>
 80016f2:	bf00      	nop
 80016f4:	20001175 	.word	0x20001175

080016f8 <__sinit_lock_acquire>:
 80016f8:	4801      	ldr	r0, [pc, #4]	; (8001700 <__sinit_lock_acquire+0x8>)
 80016fa:	f000 b8a7 	b.w	800184c <__retarget_lock_acquire_recursive>
 80016fe:	bf00      	nop
 8001700:	20001176 	.word	0x20001176

08001704 <__sinit_lock_release>:
 8001704:	4801      	ldr	r0, [pc, #4]	; (800170c <__sinit_lock_release+0x8>)
 8001706:	f000 b8a2 	b.w	800184e <__retarget_lock_release_recursive>
 800170a:	bf00      	nop
 800170c:	20001176 	.word	0x20001176

08001710 <__sinit>:
 8001710:	b510      	push	{r4, lr}
 8001712:	4604      	mov	r4, r0
 8001714:	f7ff fff0 	bl	80016f8 <__sinit_lock_acquire>
 8001718:	69a3      	ldr	r3, [r4, #24]
 800171a:	b11b      	cbz	r3, 8001724 <__sinit+0x14>
 800171c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001720:	f7ff bff0 	b.w	8001704 <__sinit_lock_release>
 8001724:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001728:	6523      	str	r3, [r4, #80]	; 0x50
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <__sinit+0x68>)
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <__sinit+0x6c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	62a2      	str	r2, [r4, #40]	; 0x28
 8001732:	42a3      	cmp	r3, r4
 8001734:	bf04      	itt	eq
 8001736:	2301      	moveq	r3, #1
 8001738:	61a3      	streq	r3, [r4, #24]
 800173a:	4620      	mov	r0, r4
 800173c:	f000 f820 	bl	8001780 <__sfp>
 8001740:	6060      	str	r0, [r4, #4]
 8001742:	4620      	mov	r0, r4
 8001744:	f000 f81c 	bl	8001780 <__sfp>
 8001748:	60a0      	str	r0, [r4, #8]
 800174a:	4620      	mov	r0, r4
 800174c:	f000 f818 	bl	8001780 <__sfp>
 8001750:	2200      	movs	r2, #0
 8001752:	60e0      	str	r0, [r4, #12]
 8001754:	2104      	movs	r1, #4
 8001756:	6860      	ldr	r0, [r4, #4]
 8001758:	f7ff ff82 	bl	8001660 <std>
 800175c:	68a0      	ldr	r0, [r4, #8]
 800175e:	2201      	movs	r2, #1
 8001760:	2109      	movs	r1, #9
 8001762:	f7ff ff7d 	bl	8001660 <std>
 8001766:	68e0      	ldr	r0, [r4, #12]
 8001768:	2202      	movs	r2, #2
 800176a:	2112      	movs	r1, #18
 800176c:	f7ff ff78 	bl	8001660 <std>
 8001770:	2301      	movs	r3, #1
 8001772:	61a3      	str	r3, [r4, #24]
 8001774:	e7d2      	b.n	800171c <__sinit+0xc>
 8001776:	bf00      	nop
 8001778:	08001cf8 	.word	0x08001cf8
 800177c:	080016a9 	.word	0x080016a9

08001780 <__sfp>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	4607      	mov	r7, r0
 8001784:	f7ff ffac 	bl	80016e0 <__sfp_lock_acquire>
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <__sfp+0x84>)
 800178a:	681e      	ldr	r6, [r3, #0]
 800178c:	69b3      	ldr	r3, [r6, #24]
 800178e:	b913      	cbnz	r3, 8001796 <__sfp+0x16>
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff ffbd 	bl	8001710 <__sinit>
 8001796:	3648      	adds	r6, #72	; 0x48
 8001798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800179c:	3b01      	subs	r3, #1
 800179e:	d503      	bpl.n	80017a8 <__sfp+0x28>
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	b30b      	cbz	r3, 80017e8 <__sfp+0x68>
 80017a4:	6836      	ldr	r6, [r6, #0]
 80017a6:	e7f7      	b.n	8001798 <__sfp+0x18>
 80017a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017ac:	b9d5      	cbnz	r5, 80017e4 <__sfp+0x64>
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <__sfp+0x88>)
 80017b0:	60e3      	str	r3, [r4, #12]
 80017b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017b6:	6665      	str	r5, [r4, #100]	; 0x64
 80017b8:	f000 f847 	bl	800184a <__retarget_lock_init_recursive>
 80017bc:	f7ff ff96 	bl	80016ec <__sfp_lock_release>
 80017c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80017c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017c8:	6025      	str	r5, [r4, #0]
 80017ca:	61a5      	str	r5, [r4, #24]
 80017cc:	2208      	movs	r2, #8
 80017ce:	4629      	mov	r1, r5
 80017d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017d4:	f7ff facc 	bl	8000d70 <memset>
 80017d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017e0:	4620      	mov	r0, r4
 80017e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e4:	3468      	adds	r4, #104	; 0x68
 80017e6:	e7d9      	b.n	800179c <__sfp+0x1c>
 80017e8:	2104      	movs	r1, #4
 80017ea:	4638      	mov	r0, r7
 80017ec:	f7ff ff62 	bl	80016b4 <__sfmoreglue>
 80017f0:	4604      	mov	r4, r0
 80017f2:	6030      	str	r0, [r6, #0]
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1d5      	bne.n	80017a4 <__sfp+0x24>
 80017f8:	f7ff ff78 	bl	80016ec <__sfp_lock_release>
 80017fc:	230c      	movs	r3, #12
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	e7ee      	b.n	80017e0 <__sfp+0x60>
 8001802:	bf00      	nop
 8001804:	08001cf8 	.word	0x08001cf8
 8001808:	ffff0001 	.word	0xffff0001

0800180c <_fwalk_reent>:
 800180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001810:	4606      	mov	r6, r0
 8001812:	4688      	mov	r8, r1
 8001814:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001818:	2700      	movs	r7, #0
 800181a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800181e:	f1b9 0901 	subs.w	r9, r9, #1
 8001822:	d505      	bpl.n	8001830 <_fwalk_reent+0x24>
 8001824:	6824      	ldr	r4, [r4, #0]
 8001826:	2c00      	cmp	r4, #0
 8001828:	d1f7      	bne.n	800181a <_fwalk_reent+0xe>
 800182a:	4638      	mov	r0, r7
 800182c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001830:	89ab      	ldrh	r3, [r5, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d907      	bls.n	8001846 <_fwalk_reent+0x3a>
 8001836:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800183a:	3301      	adds	r3, #1
 800183c:	d003      	beq.n	8001846 <_fwalk_reent+0x3a>
 800183e:	4629      	mov	r1, r5
 8001840:	4630      	mov	r0, r6
 8001842:	47c0      	blx	r8
 8001844:	4307      	orrs	r7, r0
 8001846:	3568      	adds	r5, #104	; 0x68
 8001848:	e7e9      	b.n	800181e <_fwalk_reent+0x12>

0800184a <__retarget_lock_init_recursive>:
 800184a:	4770      	bx	lr

0800184c <__retarget_lock_acquire_recursive>:
 800184c:	4770      	bx	lr

0800184e <__retarget_lock_release_recursive>:
 800184e:	4770      	bx	lr

08001850 <__swhatbuf_r>:
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	460e      	mov	r6, r1
 8001854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001858:	2900      	cmp	r1, #0
 800185a:	b096      	sub	sp, #88	; 0x58
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
 8001860:	da08      	bge.n	8001874 <__swhatbuf_r+0x24>
 8001862:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	602a      	str	r2, [r5, #0]
 800186a:	061a      	lsls	r2, r3, #24
 800186c:	d410      	bmi.n	8001890 <__swhatbuf_r+0x40>
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	e00e      	b.n	8001892 <__swhatbuf_r+0x42>
 8001874:	466a      	mov	r2, sp
 8001876:	f000 f9a7 	bl	8001bc8 <_fstat_r>
 800187a:	2800      	cmp	r0, #0
 800187c:	dbf1      	blt.n	8001862 <__swhatbuf_r+0x12>
 800187e:	9a01      	ldr	r2, [sp, #4]
 8001880:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001884:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001888:	425a      	negs	r2, r3
 800188a:	415a      	adcs	r2, r3
 800188c:	602a      	str	r2, [r5, #0]
 800188e:	e7ee      	b.n	800186e <__swhatbuf_r+0x1e>
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	2000      	movs	r0, #0
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	b016      	add	sp, #88	; 0x58
 8001898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800189c <__smakebuf_r>:
 800189c:	898b      	ldrh	r3, [r1, #12]
 800189e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018a0:	079d      	lsls	r5, r3, #30
 80018a2:	4606      	mov	r6, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	d507      	bpl.n	80018b8 <__smakebuf_r+0x1c>
 80018a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	6123      	str	r3, [r4, #16]
 80018b0:	2301      	movs	r3, #1
 80018b2:	6163      	str	r3, [r4, #20]
 80018b4:	b002      	add	sp, #8
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	ab01      	add	r3, sp, #4
 80018ba:	466a      	mov	r2, sp
 80018bc:	f7ff ffc8 	bl	8001850 <__swhatbuf_r>
 80018c0:	9900      	ldr	r1, [sp, #0]
 80018c2:	4605      	mov	r5, r0
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 f895 	bl	80019f4 <_malloc_r>
 80018ca:	b948      	cbnz	r0, 80018e0 <__smakebuf_r+0x44>
 80018cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018d0:	059a      	lsls	r2, r3, #22
 80018d2:	d4ef      	bmi.n	80018b4 <__smakebuf_r+0x18>
 80018d4:	f023 0303 	bic.w	r3, r3, #3
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	81a3      	strh	r3, [r4, #12]
 80018de:	e7e3      	b.n	80018a8 <__smakebuf_r+0xc>
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <__smakebuf_r+0x7c>)
 80018e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	6020      	str	r0, [r4, #0]
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	81a3      	strh	r3, [r4, #12]
 80018ee:	9b00      	ldr	r3, [sp, #0]
 80018f0:	6163      	str	r3, [r4, #20]
 80018f2:	9b01      	ldr	r3, [sp, #4]
 80018f4:	6120      	str	r0, [r4, #16]
 80018f6:	b15b      	cbz	r3, 8001910 <__smakebuf_r+0x74>
 80018f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018fc:	4630      	mov	r0, r6
 80018fe:	f000 f975 	bl	8001bec <_isatty_r>
 8001902:	b128      	cbz	r0, 8001910 <__smakebuf_r+0x74>
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	81a3      	strh	r3, [r4, #12]
 8001910:	89a0      	ldrh	r0, [r4, #12]
 8001912:	4305      	orrs	r5, r0
 8001914:	81a5      	strh	r5, [r4, #12]
 8001916:	e7cd      	b.n	80018b4 <__smakebuf_r+0x18>
 8001918:	080016a9 	.word	0x080016a9

0800191c <_free_r>:
 800191c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800191e:	2900      	cmp	r1, #0
 8001920:	d044      	beq.n	80019ac <_free_r+0x90>
 8001922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001926:	9001      	str	r0, [sp, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f1a1 0404 	sub.w	r4, r1, #4
 800192e:	bfb8      	it	lt
 8001930:	18e4      	addlt	r4, r4, r3
 8001932:	f000 f97d 	bl	8001c30 <__malloc_lock>
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <_free_r+0x94>)
 8001938:	9801      	ldr	r0, [sp, #4]
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	b933      	cbnz	r3, 800194c <_free_r+0x30>
 800193e:	6063      	str	r3, [r4, #4]
 8001940:	6014      	str	r4, [r2, #0]
 8001942:	b003      	add	sp, #12
 8001944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001948:	f000 b978 	b.w	8001c3c <__malloc_unlock>
 800194c:	42a3      	cmp	r3, r4
 800194e:	d908      	bls.n	8001962 <_free_r+0x46>
 8001950:	6825      	ldr	r5, [r4, #0]
 8001952:	1961      	adds	r1, r4, r5
 8001954:	428b      	cmp	r3, r1
 8001956:	bf01      	itttt	eq
 8001958:	6819      	ldreq	r1, [r3, #0]
 800195a:	685b      	ldreq	r3, [r3, #4]
 800195c:	1949      	addeq	r1, r1, r5
 800195e:	6021      	streq	r1, [r4, #0]
 8001960:	e7ed      	b.n	800193e <_free_r+0x22>
 8001962:	461a      	mov	r2, r3
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	b10b      	cbz	r3, 800196c <_free_r+0x50>
 8001968:	42a3      	cmp	r3, r4
 800196a:	d9fa      	bls.n	8001962 <_free_r+0x46>
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	1855      	adds	r5, r2, r1
 8001970:	42a5      	cmp	r5, r4
 8001972:	d10b      	bne.n	800198c <_free_r+0x70>
 8001974:	6824      	ldr	r4, [r4, #0]
 8001976:	4421      	add	r1, r4
 8001978:	1854      	adds	r4, r2, r1
 800197a:	42a3      	cmp	r3, r4
 800197c:	6011      	str	r1, [r2, #0]
 800197e:	d1e0      	bne.n	8001942 <_free_r+0x26>
 8001980:	681c      	ldr	r4, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	6053      	str	r3, [r2, #4]
 8001986:	4421      	add	r1, r4
 8001988:	6011      	str	r1, [r2, #0]
 800198a:	e7da      	b.n	8001942 <_free_r+0x26>
 800198c:	d902      	bls.n	8001994 <_free_r+0x78>
 800198e:	230c      	movs	r3, #12
 8001990:	6003      	str	r3, [r0, #0]
 8001992:	e7d6      	b.n	8001942 <_free_r+0x26>
 8001994:	6825      	ldr	r5, [r4, #0]
 8001996:	1961      	adds	r1, r4, r5
 8001998:	428b      	cmp	r3, r1
 800199a:	bf04      	itt	eq
 800199c:	6819      	ldreq	r1, [r3, #0]
 800199e:	685b      	ldreq	r3, [r3, #4]
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	bf04      	itt	eq
 80019a4:	1949      	addeq	r1, r1, r5
 80019a6:	6021      	streq	r1, [r4, #0]
 80019a8:	6054      	str	r4, [r2, #4]
 80019aa:	e7ca      	b.n	8001942 <_free_r+0x26>
 80019ac:	b003      	add	sp, #12
 80019ae:	bd30      	pop	{r4, r5, pc}
 80019b0:	20001178 	.word	0x20001178

080019b4 <sbrk_aligned>:
 80019b4:	b570      	push	{r4, r5, r6, lr}
 80019b6:	4e0e      	ldr	r6, [pc, #56]	; (80019f0 <sbrk_aligned+0x3c>)
 80019b8:	460c      	mov	r4, r1
 80019ba:	6831      	ldr	r1, [r6, #0]
 80019bc:	4605      	mov	r5, r0
 80019be:	b911      	cbnz	r1, 80019c6 <sbrk_aligned+0x12>
 80019c0:	f000 f88c 	bl	8001adc <_sbrk_r>
 80019c4:	6030      	str	r0, [r6, #0]
 80019c6:	4621      	mov	r1, r4
 80019c8:	4628      	mov	r0, r5
 80019ca:	f000 f887 	bl	8001adc <_sbrk_r>
 80019ce:	1c43      	adds	r3, r0, #1
 80019d0:	d00a      	beq.n	80019e8 <sbrk_aligned+0x34>
 80019d2:	1cc4      	adds	r4, r0, #3
 80019d4:	f024 0403 	bic.w	r4, r4, #3
 80019d8:	42a0      	cmp	r0, r4
 80019da:	d007      	beq.n	80019ec <sbrk_aligned+0x38>
 80019dc:	1a21      	subs	r1, r4, r0
 80019de:	4628      	mov	r0, r5
 80019e0:	f000 f87c 	bl	8001adc <_sbrk_r>
 80019e4:	3001      	adds	r0, #1
 80019e6:	d101      	bne.n	80019ec <sbrk_aligned+0x38>
 80019e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80019ec:	4620      	mov	r0, r4
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
 80019f0:	2000117c 	.word	0x2000117c

080019f4 <_malloc_r>:
 80019f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f8:	1ccd      	adds	r5, r1, #3
 80019fa:	f025 0503 	bic.w	r5, r5, #3
 80019fe:	3508      	adds	r5, #8
 8001a00:	2d0c      	cmp	r5, #12
 8001a02:	bf38      	it	cc
 8001a04:	250c      	movcc	r5, #12
 8001a06:	2d00      	cmp	r5, #0
 8001a08:	4607      	mov	r7, r0
 8001a0a:	db01      	blt.n	8001a10 <_malloc_r+0x1c>
 8001a0c:	42a9      	cmp	r1, r5
 8001a0e:	d905      	bls.n	8001a1c <_malloc_r+0x28>
 8001a10:	230c      	movs	r3, #12
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	2600      	movs	r6, #0
 8001a16:	4630      	mov	r0, r6
 8001a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a1c:	4e2e      	ldr	r6, [pc, #184]	; (8001ad8 <_malloc_r+0xe4>)
 8001a1e:	f000 f907 	bl	8001c30 <__malloc_lock>
 8001a22:	6833      	ldr	r3, [r6, #0]
 8001a24:	461c      	mov	r4, r3
 8001a26:	bb34      	cbnz	r4, 8001a76 <_malloc_r+0x82>
 8001a28:	4629      	mov	r1, r5
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f7ff ffc2 	bl	80019b4 <sbrk_aligned>
 8001a30:	1c43      	adds	r3, r0, #1
 8001a32:	4604      	mov	r4, r0
 8001a34:	d14d      	bne.n	8001ad2 <_malloc_r+0xde>
 8001a36:	6834      	ldr	r4, [r6, #0]
 8001a38:	4626      	mov	r6, r4
 8001a3a:	2e00      	cmp	r6, #0
 8001a3c:	d140      	bne.n	8001ac0 <_malloc_r+0xcc>
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	4631      	mov	r1, r6
 8001a42:	4638      	mov	r0, r7
 8001a44:	eb04 0803 	add.w	r8, r4, r3
 8001a48:	f000 f848 	bl	8001adc <_sbrk_r>
 8001a4c:	4580      	cmp	r8, r0
 8001a4e:	d13a      	bne.n	8001ac6 <_malloc_r+0xd2>
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	3503      	adds	r5, #3
 8001a54:	1a6d      	subs	r5, r5, r1
 8001a56:	f025 0503 	bic.w	r5, r5, #3
 8001a5a:	3508      	adds	r5, #8
 8001a5c:	2d0c      	cmp	r5, #12
 8001a5e:	bf38      	it	cc
 8001a60:	250c      	movcc	r5, #12
 8001a62:	4629      	mov	r1, r5
 8001a64:	4638      	mov	r0, r7
 8001a66:	f7ff ffa5 	bl	80019b4 <sbrk_aligned>
 8001a6a:	3001      	adds	r0, #1
 8001a6c:	d02b      	beq.n	8001ac6 <_malloc_r+0xd2>
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	442b      	add	r3, r5
 8001a72:	6023      	str	r3, [r4, #0]
 8001a74:	e00e      	b.n	8001a94 <_malloc_r+0xa0>
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	1b52      	subs	r2, r2, r5
 8001a7a:	d41e      	bmi.n	8001aba <_malloc_r+0xc6>
 8001a7c:	2a0b      	cmp	r2, #11
 8001a7e:	d916      	bls.n	8001aae <_malloc_r+0xba>
 8001a80:	1961      	adds	r1, r4, r5
 8001a82:	42a3      	cmp	r3, r4
 8001a84:	6025      	str	r5, [r4, #0]
 8001a86:	bf18      	it	ne
 8001a88:	6059      	strne	r1, [r3, #4]
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	bf08      	it	eq
 8001a8e:	6031      	streq	r1, [r6, #0]
 8001a90:	5162      	str	r2, [r4, r5]
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	4638      	mov	r0, r7
 8001a96:	f104 060b 	add.w	r6, r4, #11
 8001a9a:	f000 f8cf 	bl	8001c3c <__malloc_unlock>
 8001a9e:	f026 0607 	bic.w	r6, r6, #7
 8001aa2:	1d23      	adds	r3, r4, #4
 8001aa4:	1af2      	subs	r2, r6, r3
 8001aa6:	d0b6      	beq.n	8001a16 <_malloc_r+0x22>
 8001aa8:	1b9b      	subs	r3, r3, r6
 8001aaa:	50a3      	str	r3, [r4, r2]
 8001aac:	e7b3      	b.n	8001a16 <_malloc_r+0x22>
 8001aae:	6862      	ldr	r2, [r4, #4]
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	bf0c      	ite	eq
 8001ab4:	6032      	streq	r2, [r6, #0]
 8001ab6:	605a      	strne	r2, [r3, #4]
 8001ab8:	e7ec      	b.n	8001a94 <_malloc_r+0xa0>
 8001aba:	4623      	mov	r3, r4
 8001abc:	6864      	ldr	r4, [r4, #4]
 8001abe:	e7b2      	b.n	8001a26 <_malloc_r+0x32>
 8001ac0:	4634      	mov	r4, r6
 8001ac2:	6876      	ldr	r6, [r6, #4]
 8001ac4:	e7b9      	b.n	8001a3a <_malloc_r+0x46>
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4638      	mov	r0, r7
 8001acc:	f000 f8b6 	bl	8001c3c <__malloc_unlock>
 8001ad0:	e7a1      	b.n	8001a16 <_malloc_r+0x22>
 8001ad2:	6025      	str	r5, [r4, #0]
 8001ad4:	e7de      	b.n	8001a94 <_malloc_r+0xa0>
 8001ad6:	bf00      	nop
 8001ad8:	20001178 	.word	0x20001178

08001adc <_sbrk_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4d06      	ldr	r5, [pc, #24]	; (8001af8 <_sbrk_r+0x1c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f7fe ff92 	bl	8000a10 <_sbrk>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_sbrk_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_sbrk_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	20001180 	.word	0x20001180

08001afc <__sread>:
 8001afc:	b510      	push	{r4, lr}
 8001afe:	460c      	mov	r4, r1
 8001b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b04:	f000 f8a0 	bl	8001c48 <_read_r>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	bfab      	itete	ge
 8001b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b10:	181b      	addge	r3, r3, r0
 8001b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b16:	bfac      	ite	ge
 8001b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b1a:	81a3      	strhlt	r3, [r4, #12]
 8001b1c:	bd10      	pop	{r4, pc}

08001b1e <__swrite>:
 8001b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b22:	461f      	mov	r7, r3
 8001b24:	898b      	ldrh	r3, [r1, #12]
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	4605      	mov	r5, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4616      	mov	r6, r2
 8001b2e:	d505      	bpl.n	8001b3c <__swrite+0x1e>
 8001b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b34:	2302      	movs	r3, #2
 8001b36:	2200      	movs	r2, #0
 8001b38:	f000 f868 	bl	8001c0c <_lseek_r>
 8001b3c:	89a3      	ldrh	r3, [r4, #12]
 8001b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b46:	81a3      	strh	r3, [r4, #12]
 8001b48:	4632      	mov	r2, r6
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b52:	f000 b817 	b.w	8001b84 <_write_r>

08001b56 <__sseek>:
 8001b56:	b510      	push	{r4, lr}
 8001b58:	460c      	mov	r4, r1
 8001b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b5e:	f000 f855 	bl	8001c0c <_lseek_r>
 8001b62:	1c43      	adds	r3, r0, #1
 8001b64:	89a3      	ldrh	r3, [r4, #12]
 8001b66:	bf15      	itete	ne
 8001b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b72:	81a3      	strheq	r3, [r4, #12]
 8001b74:	bf18      	it	ne
 8001b76:	81a3      	strhne	r3, [r4, #12]
 8001b78:	bd10      	pop	{r4, pc}

08001b7a <__sclose>:
 8001b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b7e:	f000 b813 	b.w	8001ba8 <_close_r>
	...

08001b84 <_write_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4d07      	ldr	r5, [pc, #28]	; (8001ba4 <_write_r+0x20>)
 8001b88:	4604      	mov	r4, r0
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	602a      	str	r2, [r5, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f7fe feeb 	bl	800096e <_write>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d102      	bne.n	8001ba2 <_write_r+0x1e>
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	b103      	cbz	r3, 8001ba2 <_write_r+0x1e>
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
 8001ba4:	20001180 	.word	0x20001180

08001ba8 <_close_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4d06      	ldr	r5, [pc, #24]	; (8001bc4 <_close_r+0x1c>)
 8001bac:	2300      	movs	r3, #0
 8001bae:	4604      	mov	r4, r0
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	602b      	str	r3, [r5, #0]
 8001bb4:	f7fe fef7 	bl	80009a6 <_close>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d102      	bne.n	8001bc2 <_close_r+0x1a>
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	b103      	cbz	r3, 8001bc2 <_close_r+0x1a>
 8001bc0:	6023      	str	r3, [r4, #0]
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	20001180 	.word	0x20001180

08001bc8 <_fstat_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4d07      	ldr	r5, [pc, #28]	; (8001be8 <_fstat_r+0x20>)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	602b      	str	r3, [r5, #0]
 8001bd6:	f7fe fef2 	bl	80009be <_fstat>
 8001bda:	1c43      	adds	r3, r0, #1
 8001bdc:	d102      	bne.n	8001be4 <_fstat_r+0x1c>
 8001bde:	682b      	ldr	r3, [r5, #0]
 8001be0:	b103      	cbz	r3, 8001be4 <_fstat_r+0x1c>
 8001be2:	6023      	str	r3, [r4, #0]
 8001be4:	bd38      	pop	{r3, r4, r5, pc}
 8001be6:	bf00      	nop
 8001be8:	20001180 	.word	0x20001180

08001bec <_isatty_r>:
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4d06      	ldr	r5, [pc, #24]	; (8001c08 <_isatty_r+0x1c>)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	602b      	str	r3, [r5, #0]
 8001bf8:	f7fe fef1 	bl	80009de <_isatty>
 8001bfc:	1c43      	adds	r3, r0, #1
 8001bfe:	d102      	bne.n	8001c06 <_isatty_r+0x1a>
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	b103      	cbz	r3, 8001c06 <_isatty_r+0x1a>
 8001c04:	6023      	str	r3, [r4, #0]
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
 8001c08:	20001180 	.word	0x20001180

08001c0c <_lseek_r>:
 8001c0c:	b538      	push	{r3, r4, r5, lr}
 8001c0e:	4d07      	ldr	r5, [pc, #28]	; (8001c2c <_lseek_r+0x20>)
 8001c10:	4604      	mov	r4, r0
 8001c12:	4608      	mov	r0, r1
 8001c14:	4611      	mov	r1, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	602a      	str	r2, [r5, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f7fe feea 	bl	80009f4 <_lseek>
 8001c20:	1c43      	adds	r3, r0, #1
 8001c22:	d102      	bne.n	8001c2a <_lseek_r+0x1e>
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	b103      	cbz	r3, 8001c2a <_lseek_r+0x1e>
 8001c28:	6023      	str	r3, [r4, #0]
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
 8001c2c:	20001180 	.word	0x20001180

08001c30 <__malloc_lock>:
 8001c30:	4801      	ldr	r0, [pc, #4]	; (8001c38 <__malloc_lock+0x8>)
 8001c32:	f7ff be0b 	b.w	800184c <__retarget_lock_acquire_recursive>
 8001c36:	bf00      	nop
 8001c38:	20001174 	.word	0x20001174

08001c3c <__malloc_unlock>:
 8001c3c:	4801      	ldr	r0, [pc, #4]	; (8001c44 <__malloc_unlock+0x8>)
 8001c3e:	f7ff be06 	b.w	800184e <__retarget_lock_release_recursive>
 8001c42:	bf00      	nop
 8001c44:	20001174 	.word	0x20001174

08001c48 <_read_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4d07      	ldr	r5, [pc, #28]	; (8001c68 <_read_r+0x20>)
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	4608      	mov	r0, r1
 8001c50:	4611      	mov	r1, r2
 8001c52:	2200      	movs	r2, #0
 8001c54:	602a      	str	r2, [r5, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7fe fe6c 	bl	8000934 <_read>
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d102      	bne.n	8001c66 <_read_r+0x1e>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	b103      	cbz	r3, 8001c66 <_read_r+0x1e>
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
 8001c68:	20001180 	.word	0x20001180

08001c6c <_init>:
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	bf00      	nop
 8001c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c72:	bc08      	pop	{r3}
 8001c74:	469e      	mov	lr, r3
 8001c76:	4770      	bx	lr

08001c78 <_fini>:
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	bf00      	nop
 8001c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7e:	bc08      	pop	{r3}
 8001c80:	469e      	mov	lr, r3
 8001c82:	4770      	bx	lr
