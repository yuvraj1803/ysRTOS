
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08001c24  08001c24  00011c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d3c  08001d3c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001d3c  08001d3c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d3c  08001d3c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d3c  08001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  20000064  08001da8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001180  08001da8  00021180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000424a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001064  00000000  00000000  000242de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000268  00000000  00000000  00025678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003648  00000000  00000000  000258e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068ed  00000000  00000000  00028f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005627a  00000000  00000000  0002f815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00085a8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000115c  00000000  00000000  00085ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c0c 	.word	0x08001c0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001c0c 	.word	0x08001c0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EXTI15_10_IRQHandler>:

	__enable_irq();

}

void EXTI15_10_IRQHandler(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	EXTI->PR |= EXTI_PR13;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6153      	str	r3, [r2, #20]


}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40013c00 	.word	0x40013c00

080002a0 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <LED_INIT+0x34>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LED_INIT+0x34>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <LED_INIT+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <LED_INIT+0x38>)
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 11);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <LED_INIT+0x38>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <LED_INIT+0x38>)
 80002c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002c6:	6013      	str	r3, [r2, #0]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000

080002dc <__io_putchar>:
uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
void uart_write(int ch);
void uart_tx_init(void);


int __io_putchar(int ch){ /* defined in syscalls.c */
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	uart_write(ch);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f000 f855 	bl	8000394 <uart_write>

	return ch;
 80002ea:	687b      	ldr	r3, [r7, #4]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <UART_INIT>:


void UART_INIT(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	uart_tx_init();
 80002f8:	f000 f802 	bl	8000300 <uart_tx_init>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <uart_tx_init>:

void uart_tx_init(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0


	RCC -> AHB1ENR |= GPIOAEN; /* enable clock access to GPIOA */
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <uart_tx_init+0x84>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a1e      	ldr	r2, [pc, #120]	; (8000384 <uart_tx_init+0x84>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set Pin 2 in GPIOA to alternate function mode */
	GPIOA -> MODER &= ~(1U << 4);
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <uart_tx_init+0x88>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <uart_tx_init+0x88>)
 8000316:	f023 0310 	bic.w	r3, r3, #16
 800031a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=  (1U << 5);
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <uart_tx_init+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a19      	ldr	r2, [pc, #100]	; (8000388 <uart_tx_init+0x88>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6013      	str	r3, [r2, #0]

	/* set alternate function type to AF07 (uart2_tx) */
	GPIOA -> AFR[0] |=  (1U << 8);
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <uart_tx_init+0x88>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <uart_tx_init+0x88>)
 800032e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000332:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 9);
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <uart_tx_init+0x88>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <uart_tx_init+0x88>)
 800033a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 10);
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <uart_tx_init+0x88>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <uart_tx_init+0x88>)
 8000346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <uart_tx_init+0x88>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <uart_tx_init+0x88>)
 8000352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000356:	6213      	str	r3, [r2, #32]

	RCC -> APB1ENR |= UART2EN; /* enable clock access to UART2 */
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <uart_tx_init+0x84>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <uart_tx_init+0x84>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000362:	6413      	str	r3, [r2, #64]	; 0x40

	set_uart_baudrate(APB1_CLK, UART_BAUDRATE); /* configure UART baudrate) */
 8000364:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000368:	4808      	ldr	r0, [pc, #32]	; (800038c <uart_tx_init+0x8c>)
 800036a:	f000 f82b 	bl	80003c4 <set_uart_baudrate>

	USART2 -> CR1 = CR1_TE; /* configure transfer direction */
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <uart_tx_init+0x90>)
 8000370:	2208      	movs	r2, #8
 8000372:	60da      	str	r2, [r3, #12]

	USART2 -> CR1 |= CR1_UE; /* enable UART module */
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <uart_tx_init+0x90>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <uart_tx_init+0x90>)
 800037a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800037e:	60d3      	str	r3, [r2, #12]

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40023800 	.word	0x40023800
 8000388:	40020000 	.word	0x40020000
 800038c:	00f42400 	.word	0x00f42400
 8000390:	40004400 	.word	0x40004400

08000394 <uart_write>:

void uart_write(int ch){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]


	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 800039c:	bf00      	nop
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <uart_write+0x2c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <uart_write+0x2c>)
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	6053      	str	r3, [r2, #4]



}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40004400 	.word	0x40004400

080003c4 <set_uart_baudrate>:

void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = compute_uart_baudrate(periph_clk, baudrate);
 80003ce:	4c05      	ldr	r4, [pc, #20]	; (80003e4 <set_uart_baudrate+0x20>)
 80003d0:	6839      	ldr	r1, [r7, #0]
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f808 	bl	80003e8 <compute_uart_baudrate>
 80003d8:	4603      	mov	r3, r0
 80003da:	60a3      	str	r3, [r4, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40004400 	.word	0x40004400

080003e8 <compute_uart_baudrate>:

uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	085a      	lsrs	r2, r3, #1
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	441a      	add	r2, r3
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <__init__>:


#include "init.h"


void __init__(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000410:	f7ff ff46 	bl	80002a0 <LED_INIT>
	}
	if(__UART_INIT__ == 0x1){
		UART_INIT();
 8000414:	f7ff ff6e 	bl	80002f4 <UART_INIT>



	/* Initialise the kernel */

	kernel_init();
 8000418:	f000 f830 	bl	800047c <kernel_init>


}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	db0a      	blt.n	800044a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	490c      	ldr	r1, [pc, #48]	; (800046c <__NVIC_SetPriority+0x4c>)
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000448:	e00a      	b.n	8000460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4908      	ldr	r1, [pc, #32]	; (8000470 <__NVIC_SetPriority+0x50>)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	f003 030f 	and.w	r3, r3, #15
 8000456:	3b04      	subs	r3, #4
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	440b      	add	r3, r1
 800045e:	761a      	strb	r2, [r3, #24]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000e100 	.word	0xe000e100
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <_loop_>:
		ICSR |= ICSR_PENDSTSET; /* trigger SysTick */

}


void _loop_(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	/*
	 * If no threads are given, __current_ptr__ shall point at this function and run here until 'something' is done ;)
	 * */
	while(1){}
 8000478:	e7fe      	b.n	8000478 <_loop_+0x4>
	...

0800047c <kernel_init>:
}

void kernel_init(void){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

	/* Semaphore initialisation*/

	semaphore_init(&LED_sem,  1);
 8000480:	2101      	movs	r1, #1
 8000482:	4818      	ldr	r0, [pc, #96]	; (80004e4 <kernel_init+0x68>)
 8000484:	f000 f982 	bl	800078c <semaphore_init>
	semaphore_init(&UART_sem, 1);
 8000488:	2101      	movs	r1, #1
 800048a:	4817      	ldr	r0, [pc, #92]	; (80004e8 <kernel_init+0x6c>)
 800048c:	f000 f97e 	bl	800078c <semaphore_init>
	semaphore_init(&ADC1_sem, 1);
 8000490:	2101      	movs	r1, #1
 8000492:	4816      	ldr	r0, [pc, #88]	; (80004ec <kernel_init+0x70>)
 8000494:	f000 f97a 	bl	800078c <semaphore_init>
	semaphore_init(&TIM2_sem, 1);
 8000498:	2101      	movs	r1, #1
 800049a:	4815      	ldr	r0, [pc, #84]	; (80004f0 <kernel_init+0x74>)
 800049c:	f000 f976 	bl	800078c <semaphore_init>

	/* -- */
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <kernel_init+0x78>)
 80004a2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80004a6:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <kernel_init+0x7c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 80004ae:	4b13      	ldr	r3, [pc, #76]	; (80004fc <kernel_init+0x80>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <kernel_init+0x84>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	601a      	str	r2, [r3, #0]

	min_periodic_thread_id = MAX_THREADS;
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <kernel_init+0x88>)
 80004bc:	2205      	movs	r2, #5
 80004be:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <kernel_init+0x8c>)
 80004c2:	2209      	movs	r2, #9
 80004c4:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <kernel_init+0x80>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a0f      	ldr	r2, [pc, #60]	; (800050c <kernel_init+0x90>)
 80004ce:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <kernel_init+0x88>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <kernel_init+0x94>)
 80004d8:	6013      	str	r3, [r2, #0]

	__current_ptr__ = NULL;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <kernel_init+0x98>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000080 	.word	0x20000080
 80004e8:	20000084 	.word	0x20000084
 80004ec:	20000088 	.word	0x20000088
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	2000114c 	.word	0x2000114c
 80004f8:	20001168 	.word	0x20001168
 80004fc:	20001158 	.word	0x20001158
 8000500:	2000115c 	.word	0x2000115c
 8000504:	20001160 	.word	0x20001160
 8000508:	20001164 	.word	0x20001164
 800050c:	20001150 	.word	0x20001150
 8000510:	20001154 	.word	0x20001154
 8000514:	200001a8 	.word	0x200001a8

08000518 <stk_init>:

void stk_init(uint32_t thread_id){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <stk_init+0x50>)
 8000530:	1899      	adds	r1, r3, r2
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <stk_init+0x54>)
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4613      	mov	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	1a9b      	subs	r3, r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4403      	add	r3, r0
 8000540:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <stk_init+0x50>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800054a:	fb01 f303 	mul.w	r3, r1, r3
 800054e:	4413      	add	r3, r2
 8000550:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000558:	601a      	str	r2, [r3, #0]


			(FOR DEBUGGING PURPOSES)
		*/

}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	200001ac 	.word	0x200001ac
 800056c:	20000090 	.word	0x20000090

08000570 <kernel_launch>:

void kernel_launch(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <kernel_launch+0x6c>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <kernel_launch+0x6c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <kernel_launch+0x70>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <kernel_launch+0x6c>)
 800058e:	3b01      	subs	r3, #1
 8000590:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, SYSTICK_PRIO); /* Set SysTick to low-priority */
 8000592:	210f      	movs	r1, #15
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000598:	f7ff ff42 	bl	8000420 <__NVIC_SetPriority>
		NVIC_SetPriority(PendSV_IRQn,  PENDSV_PRIO); /* Set  PendSV to high-priority */
 800059c:	2100      	movs	r1, #0
 800059e:	f06f 0001 	mvn.w	r0, #1
 80005a2:	f7ff ff3d 	bl	8000420 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <kernel_launch+0x6c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <kernel_launch+0x6c>)
 80005ac:	f043 0305 	orr.w	r3, r3, #5
 80005b0:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <kernel_launch+0x6c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <kernel_launch+0x6c>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005be:	b672      	cpsid	i
}
 80005c0:	bf00      	nop
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 80005c2:	f000 fa0d 	bl	80009e0 <tim2_1ms_interrupt_init>
		}


		if(__current_ptr__ == NULL){
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <kernel_launch+0x74>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <kernel_launch+0x64>
			/* no threads specified, we spin in an infinite loop until processor is taken away */
			add_thread(&_loop_);
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <kernel_launch+0x78>)
 80005d0:	f000 f80c 	bl	80005ec <add_thread>
		}

		scheduler_launch();
 80005d4:	f000 f8ae 	bl	8000734 <scheduler_launch>




}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	e000e010 	.word	0xe000e010
 80005e0:	2000114c 	.word	0x2000114c
 80005e4:	200001a8 	.word	0x200001a8
 80005e8:	08000475 	.word	0x08000475

080005ec <add_thread>:

tid_t add_thread(void (*thread)(void)){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 80005f4:	4b48      	ldr	r3, [pc, #288]	; (8000718 <add_thread+0x12c>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <add_thread+0x130>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d10a      	bne.n	8000616 <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 8000600:	4b47      	ldr	r3, [pc, #284]	; (8000720 <add_thread+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	4946      	ldr	r1, [pc, #280]	; (8000724 <add_thread+0x138>)
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fad6 	bl	8000bbc <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fabf 	bl	8000b94 <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 8000616:	4b40      	ldr	r3, [pc, #256]	; (8000718 <add_thread+0x12c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800061e:	b672      	cpsid	i
}
 8000620:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 8000622:	4941      	ldr	r1, [pc, #260]	; (8000728 <add_thread+0x13c>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4613      	mov	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3308      	adds	r3, #8
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 8000636:	493c      	ldr	r1, [pc, #240]	; (8000728 <add_thread+0x13c>)
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	330c      	adds	r3, #12
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0xffffffff; /* non periodic threads */
 800064a:	4937      	ldr	r1, [pc, #220]	; (8000728 <add_thread+0x13c>)
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4613      	mov	r3, r2
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	3310      	adds	r3, #16
 800065a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800065e:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 8000660:	4931      	ldr	r1, [pc, #196]	; (8000728 <add_thread+0x13c>)
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4613      	mov	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	3314      	adds	r3, #20
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	__tcbs__[thread_id].periodic_task = NULL;
 8000674:	492c      	ldr	r1, [pc, #176]	; (8000728 <add_thread+0x13c>)
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4613      	mov	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	3318      	adds	r3, #24
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ff45 	bl	8000518 <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	4a26      	ldr	r2, [pc, #152]	; (800072c <add_thread+0x140>)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800069a:	fb01 f303 	mul.w	r3, r1, r3
 800069e:	4413      	add	r3, r2
 80006a0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80006a4:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d106      	bne.n	80006ba <add_thread+0xce>
		__current_ptr__ = &__tcbs__[0];
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <add_thread+0x144>)
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <add_thread+0x13c>)
 80006b0:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <add_thread+0x13c>)
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <add_thread+0x13c>)
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	e023      	b.n	8000702 <add_thread+0x116>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <add_thread+0x12c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	491a      	ldr	r1, [pc, #104]	; (8000728 <add_thread+0x13c>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3304      	adds	r3, #4
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <add_thread+0x13c>)
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	1a9b      	subs	r3, r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4403      	add	r3, r0
 80006dc:	3304      	adds	r3, #4
 80006de:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <add_thread+0x12c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	460b      	mov	r3, r1
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	1a5b      	subs	r3, r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	490e      	ldr	r1, [pc, #56]	; (8000728 <add_thread+0x13c>)
 80006f0:	4419      	add	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <add_thread+0x13c>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4403      	add	r3, r0
 80006fe:	3304      	adds	r3, #4
 8000700:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <add_thread+0x12c>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000708:	b662      	cpsie	i
}
 800070a:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


	return thread_id;
 800070c:	68fb      	ldr	r3, [r7, #12]

}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20001150 	.word	0x20001150
 800071c:	2000115c 	.word	0x2000115c
 8000720:	20000000 	.word	0x20000000
 8000724:	08001c24 	.word	0x08001c24
 8000728:	20000090 	.word	0x20000090
 800072c:	200001ac 	.word	0x200001ac
 8000730:	200001a8 	.word	0x200001a8

08000734 <scheduler_launch>:


#include "sched.h"


void scheduler_launch(void){
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 800073a:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 800073c:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 8000740:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 8000744:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 8000748:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 800074a:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 800074c:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 8000750:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 8000752:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 8000754:	4770      	bx	lr

}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	200001a8 	.word	0x200001a8

08000764 <PendSV_Handler>:

	/* PendSV_Handler shall be handling the context switch process
	 * in the future versions of the RTOS.
	 */

}
 8000764:	bf00      	nop
	...

08000768 <SysTick_Handler>:
		 *	-> Restore all the Registers.
		 * */

		/* SUSPEND CURRENT THREAD */

		__asm("CPSID I");		/* disable global interrupts */
 8000768:	b672      	cpsid	i
		__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 800076a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <SysTick_Handler+0x20>)
		__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 8000770:	6801      	ldr	r1, [r0, #0]
		__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 8000772:	f8c1 d000 	str.w	sp, [r1]


		/* CHOOSE NEXT THREAD */

		__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 8000776:	6849      	ldr	r1, [r1, #4]
		__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 8000778:	6001      	str	r1, [r0, #0]
		__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 800077a:	f8d1 d000 	ldr.w	sp, [r1]
		__asm("POP {R4-R11}");			/* restore r4-r11 */
 800077e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("CPSIE I");				/* enable global interrupts */
 8000782:	b662      	cpsie	i
		__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 8000784:	4770      	bx	lr


		//	ICSR |= ICSR_PENDSVSET; /* Trigger the PendSV interrupt handler to perform the context switch.*/
}
 8000786:	bf00      	nop
 8000788:	200001a8 	.word	0x200001a8

0800078c <semaphore_init>:
	}
	*sem -= 1;

	__enable_irq();
}
void semaphore_init(uint32_t * sem, uint32_t value){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	*sem = value;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <t>:
#include "kernel/kernel.h"
#include "ysAPI/ysRTOS.h"

int x = 0;

void t(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	while(1){
		printf("hello wordl\n");
 80007ac:	4801      	ldr	r0, [pc, #4]	; (80007b4 <t+0xc>)
 80007ae:	f000 fda1 	bl	80012f4 <puts>
 80007b2:	e7fb      	b.n	80007ac <t+0x4>
 80007b4:	08001c98 	.word	0x08001c98

080007b8 <main>:
	}
}

int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	 * */




	__init__(); /* ysRTOS initialisation */
 80007bc:	f7ff fe26 	bl	800040c <__init__>
//	 osAddPeriodicThread(&thread3,500);
//	 osAddPeriodicThread(&thread4,1000);

	/*  */

	osAddThread(&t);
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <main+0x18>)
 80007c2:	f000 f9a9 	bl	8000b18 <osAddThread>



	kernel_launch();
 80007c6:	f7ff fed3 	bl	8000570 <kernel_launch>
 80007ca:	2300      	movs	r3, #0


}
 80007cc:	4618      	mov	r0, r3
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	080007a9 	.word	0x080007a9

080007d4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007de:	f000 f9d3 	bl	8000b88 <__errno>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2216      	movs	r2, #22
 80007e6:	601a      	str	r2, [r3, #0]
  return -1;
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_exit>:

void _exit (int status)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ffe7 	bl	80007d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000806:	e7fe      	b.n	8000806 <_exit+0x12>

08000808 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e00a      	b.n	8000830 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800081a:	f3af 8000 	nop.w
 800081e:	4601      	mov	r1, r0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	b2ca      	uxtb	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbf0      	blt.n	800081a <_read+0x12>
  }

  return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	e009      	b.n	8000868 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	60ba      	str	r2, [r7, #8]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3d 	bl	80002dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbf1      	blt.n	8000854 <_write+0x12>
  }
  return len;
 8000870:	687b      	ldr	r3, [r7, #4]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_close>:

int _close(int file)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a2:	605a      	str	r2, [r3, #4]
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <_isatty>:

int _isatty(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f000 f938 	bl	8000b88 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20020000 	.word	0x20020000
 8000944:	00000400 	.word	0x00000400
 8000948:	2000116c 	.word	0x2000116c
 800094c:	20001180 	.word	0x20001180

08000950 <__NVIC_EnableIRQ>:
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <tim2_1ms_interrupt_init+0x54>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <tim2_1ms_interrupt_init+0x54>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600 - 1;	 /*Set timer prescaler*/
 80009f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f4:	f240 623f 	movw	r2, #1599	; 0x63f
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 80009fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009fe:	2209      	movs	r2, #9
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 8000a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 8000a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 8000a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 8000a22:	201c      	movs	r0, #28
 8000a24:	f7ff ff94 	bl	8000950 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,TIM2_PRIO);
 8000a28:	2107      	movs	r1, #7
 8000a2a:	201c      	movs	r0, #28
 8000a2c:	f7ff ffae 	bl	800098c <__NVIC_SetPriority>


}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <TIM2_IRQHandler+0xc8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <TIM2_IRQHandler+0xcc>)
 8000a46:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4a:	0a9b      	lsrs	r3, r3, #10
 8000a4c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000a50:	fb01 f303 	mul.w	r3, r1, r3
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <TIM2_IRQHandler+0xc8>)
 8000a58:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6a:	b672      	cpsid	i
}
 8000a6c:	bf00      	nop

	__disable_irq();

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <TIM2_IRQHandler+0xd0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	e038      	b.n	8000ae8 <TIM2_IRQHandler+0xb0>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000a76:	4925      	ldr	r1, [pc, #148]	; (8000b0c <TIM2_IRQHandler+0xd4>)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	3314      	adds	r3, #20
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d12a      	bne.n	8000ae2 <TIM2_IRQHandler+0xaa>
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000a8c:	491f      	ldr	r1, [pc, #124]	; (8000b0c <TIM2_IRQHandler+0xd4>)
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	440b      	add	r3, r1
 8000a9a:	3310      	adds	r3, #16
 8000a9c:	681b      	ldr	r3, [r3, #0]
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01f      	beq.n	8000ae2 <TIM2_IRQHandler+0xaa>
		   (sys_counter % __tcbs__[current_thread_id].period == 0)){
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <TIM2_IRQHandler+0xc8>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4819      	ldr	r0, [pc, #100]	; (8000b0c <TIM2_IRQHandler+0xd4>)
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	1a5b      	subs	r3, r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4403      	add	r3, r0
 8000ab4:	3310      	adds	r3, #16
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8000abc:	fb01 f303 	mul.w	r3, r1, r3
 8000ac0:	1ad3      	subs	r3, r2, r3
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10d      	bne.n	8000ae2 <TIM2_IRQHandler+0xaa>

				SysTick->VAL = SysTick->LOAD;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <TIM2_IRQHandler+0xd8>)
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <TIM2_IRQHandler+0xd8>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	6093      	str	r3, [r2, #8]
				__tcbs__[current_thread_id].periodic_task();
 8000ace:	490f      	ldr	r1, [pc, #60]	; (8000b0c <TIM2_IRQHandler+0xd4>)
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	3318      	adds	r3, #24
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4798      	blx	r3
			current_thread_id++)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <TIM2_IRQHandler+0xdc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d9c1      	bls.n	8000a76 <TIM2_IRQHandler+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000af2:	b662      	cpsie	i
}
 8000af4:	bf00      	nop
		}
	}

	__enable_irq();

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20001168 	.word	0x20001168
 8000b04:	10624dd3 	.word	0x10624dd3
 8000b08:	20001160 	.word	0x20001160
 8000b0c:	20000090 	.word	0x20000090
 8000b10:	e000e010 	.word	0xe000e010
 8000b14:	20001164 	.word	0x20001164

08000b18 <osAddThread>:
#include "ysRTOS.h"


tid_t osAddThread(void (*thread)(void)){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	/*
	 * tid_t defined in config/config.h
	 *
	 * */

	tid_t thread_id = add_thread(thread);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fd63 	bl	80005ec <add_thread>
 8000b26:	60f8      	str	r0, [r7, #12]

	return thread_id;
 8000b28:	68fb      	ldr	r3, [r7, #12]

}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f000 f83d 	bl	8000be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fe27 	bl	80007b8 <main>

08000b6a <LoopForever>:

LoopForever:
  b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b78:	08001d44 	.word	0x08001d44
  ldr r2, =_sbss
 8000b7c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b80:	20001180 	.word	0x20001180

08000b84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <__errno>:
 8000b88:	4b01      	ldr	r3, [pc, #4]	; (8000b90 <__errno+0x8>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000000 	.word	0x20000000

08000b94 <exit>:
 8000b94:	b508      	push	{r3, lr}
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <exit+0x20>)
 8000b98:	4604      	mov	r4, r0
 8000b9a:	b113      	cbz	r3, 8000ba2 <exit+0xe>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <exit+0x24>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ba8:	b103      	cbz	r3, 8000bac <exit+0x18>
 8000baa:	4798      	blx	r3
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff fe21 	bl	80007f4 <_exit>
 8000bb2:	bf00      	nop
 8000bb4:	00000000 	.word	0x00000000
 8000bb8:	08001ca4 	.word	0x08001ca4

08000bbc <fiprintf>:
 8000bbc:	b40e      	push	{r1, r2, r3}
 8000bbe:	b503      	push	{r0, r1, lr}
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	ab03      	add	r3, sp, #12
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <fiprintf+0x20>)
 8000bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bca:	6800      	ldr	r0, [r0, #0]
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	f000 f85f 	bl	8000c90 <_vfiprintf_r>
 8000bd2:	b002      	add	sp, #8
 8000bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bd8:	b003      	add	sp, #12
 8000bda:	4770      	bx	lr
 8000bdc:	20000000 	.word	0x20000000

08000be0 <__libc_init_array>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4d0d      	ldr	r5, [pc, #52]	; (8000c18 <__libc_init_array+0x38>)
 8000be4:	4c0d      	ldr	r4, [pc, #52]	; (8000c1c <__libc_init_array+0x3c>)
 8000be6:	1b64      	subs	r4, r4, r5
 8000be8:	10a4      	asrs	r4, r4, #2
 8000bea:	2600      	movs	r6, #0
 8000bec:	42a6      	cmp	r6, r4
 8000bee:	d109      	bne.n	8000c04 <__libc_init_array+0x24>
 8000bf0:	4d0b      	ldr	r5, [pc, #44]	; (8000c20 <__libc_init_array+0x40>)
 8000bf2:	4c0c      	ldr	r4, [pc, #48]	; (8000c24 <__libc_init_array+0x44>)
 8000bf4:	f001 f80a 	bl	8001c0c <_init>
 8000bf8:	1b64      	subs	r4, r4, r5
 8000bfa:	10a4      	asrs	r4, r4, #2
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	42a6      	cmp	r6, r4
 8000c00:	d105      	bne.n	8000c0e <__libc_init_array+0x2e>
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c08:	4798      	blx	r3
 8000c0a:	3601      	adds	r6, #1
 8000c0c:	e7ee      	b.n	8000bec <__libc_init_array+0xc>
 8000c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c12:	4798      	blx	r3
 8000c14:	3601      	adds	r6, #1
 8000c16:	e7f2      	b.n	8000bfe <__libc_init_array+0x1e>
 8000c18:	08001d3c 	.word	0x08001d3c
 8000c1c:	08001d3c 	.word	0x08001d3c
 8000c20:	08001d3c 	.word	0x08001d3c
 8000c24:	08001d40 	.word	0x08001d40

08000c28 <__retarget_lock_init_recursive>:
 8000c28:	4770      	bx	lr

08000c2a <__retarget_lock_acquire_recursive>:
 8000c2a:	4770      	bx	lr

08000c2c <__retarget_lock_release_recursive>:
 8000c2c:	4770      	bx	lr

08000c2e <memset>:
 8000c2e:	4402      	add	r2, r0
 8000c30:	4603      	mov	r3, r0
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d100      	bne.n	8000c38 <memset+0xa>
 8000c36:	4770      	bx	lr
 8000c38:	f803 1b01 	strb.w	r1, [r3], #1
 8000c3c:	e7f9      	b.n	8000c32 <memset+0x4>

08000c3e <__sfputc_r>:
 8000c3e:	6893      	ldr	r3, [r2, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	b410      	push	{r4}
 8000c46:	6093      	str	r3, [r2, #8]
 8000c48:	da08      	bge.n	8000c5c <__sfputc_r+0x1e>
 8000c4a:	6994      	ldr	r4, [r2, #24]
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	db01      	blt.n	8000c54 <__sfputc_r+0x16>
 8000c50:	290a      	cmp	r1, #10
 8000c52:	d103      	bne.n	8000c5c <__sfputc_r+0x1e>
 8000c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c58:	f000 bb54 	b.w	8001304 <__swbuf_r>
 8000c5c:	6813      	ldr	r3, [r2, #0]
 8000c5e:	1c58      	adds	r0, r3, #1
 8000c60:	6010      	str	r0, [r2, #0]
 8000c62:	7019      	strb	r1, [r3, #0]
 8000c64:	4608      	mov	r0, r1
 8000c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <__sfputs_r>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	4614      	mov	r4, r2
 8000c74:	18d5      	adds	r5, r2, r3
 8000c76:	42ac      	cmp	r4, r5
 8000c78:	d101      	bne.n	8000c7e <__sfputs_r+0x12>
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	e007      	b.n	8000c8e <__sfputs_r+0x22>
 8000c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c82:	463a      	mov	r2, r7
 8000c84:	4630      	mov	r0, r6
 8000c86:	f7ff ffda 	bl	8000c3e <__sfputc_r>
 8000c8a:	1c43      	adds	r3, r0, #1
 8000c8c:	d1f3      	bne.n	8000c76 <__sfputs_r+0xa>
 8000c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c90 <_vfiprintf_r>:
 8000c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c94:	460d      	mov	r5, r1
 8000c96:	b09d      	sub	sp, #116	; 0x74
 8000c98:	4614      	mov	r4, r2
 8000c9a:	4698      	mov	r8, r3
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	b118      	cbz	r0, 8000ca8 <_vfiprintf_r+0x18>
 8000ca0:	6983      	ldr	r3, [r0, #24]
 8000ca2:	b90b      	cbnz	r3, 8000ca8 <_vfiprintf_r+0x18>
 8000ca4:	f000 fd08 	bl	80016b8 <__sinit>
 8000ca8:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <_vfiprintf_r+0x240>)
 8000caa:	429d      	cmp	r5, r3
 8000cac:	d11b      	bne.n	8000ce6 <_vfiprintf_r+0x56>
 8000cae:	6875      	ldr	r5, [r6, #4]
 8000cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cb2:	07d9      	lsls	r1, r3, #31
 8000cb4:	d405      	bmi.n	8000cc2 <_vfiprintf_r+0x32>
 8000cb6:	89ab      	ldrh	r3, [r5, #12]
 8000cb8:	059a      	lsls	r2, r3, #22
 8000cba:	d402      	bmi.n	8000cc2 <_vfiprintf_r+0x32>
 8000cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cbe:	f7ff ffb4 	bl	8000c2a <__retarget_lock_acquire_recursive>
 8000cc2:	89ab      	ldrh	r3, [r5, #12]
 8000cc4:	071b      	lsls	r3, r3, #28
 8000cc6:	d501      	bpl.n	8000ccc <_vfiprintf_r+0x3c>
 8000cc8:	692b      	ldr	r3, [r5, #16]
 8000cca:	b9eb      	cbnz	r3, 8000d08 <_vfiprintf_r+0x78>
 8000ccc:	4629      	mov	r1, r5
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f000 fb6a 	bl	80013a8 <__swsetup_r>
 8000cd4:	b1c0      	cbz	r0, 8000d08 <_vfiprintf_r+0x78>
 8000cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cd8:	07dc      	lsls	r4, r3, #31
 8000cda:	d50e      	bpl.n	8000cfa <_vfiprintf_r+0x6a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	b01d      	add	sp, #116	; 0x74
 8000ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce6:	4b7b      	ldr	r3, [pc, #492]	; (8000ed4 <_vfiprintf_r+0x244>)
 8000ce8:	429d      	cmp	r5, r3
 8000cea:	d101      	bne.n	8000cf0 <_vfiprintf_r+0x60>
 8000cec:	68b5      	ldr	r5, [r6, #8]
 8000cee:	e7df      	b.n	8000cb0 <_vfiprintf_r+0x20>
 8000cf0:	4b79      	ldr	r3, [pc, #484]	; (8000ed8 <_vfiprintf_r+0x248>)
 8000cf2:	429d      	cmp	r5, r3
 8000cf4:	bf08      	it	eq
 8000cf6:	68f5      	ldreq	r5, [r6, #12]
 8000cf8:	e7da      	b.n	8000cb0 <_vfiprintf_r+0x20>
 8000cfa:	89ab      	ldrh	r3, [r5, #12]
 8000cfc:	0598      	lsls	r0, r3, #22
 8000cfe:	d4ed      	bmi.n	8000cdc <_vfiprintf_r+0x4c>
 8000d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d02:	f7ff ff93 	bl	8000c2c <__retarget_lock_release_recursive>
 8000d06:	e7e9      	b.n	8000cdc <_vfiprintf_r+0x4c>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d0c:	2320      	movs	r3, #32
 8000d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d16:	2330      	movs	r3, #48	; 0x30
 8000d18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000edc <_vfiprintf_r+0x24c>
 8000d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d20:	f04f 0901 	mov.w	r9, #1
 8000d24:	4623      	mov	r3, r4
 8000d26:	469a      	mov	sl, r3
 8000d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d2c:	b10a      	cbz	r2, 8000d32 <_vfiprintf_r+0xa2>
 8000d2e:	2a25      	cmp	r2, #37	; 0x25
 8000d30:	d1f9      	bne.n	8000d26 <_vfiprintf_r+0x96>
 8000d32:	ebba 0b04 	subs.w	fp, sl, r4
 8000d36:	d00b      	beq.n	8000d50 <_vfiprintf_r+0xc0>
 8000d38:	465b      	mov	r3, fp
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	4629      	mov	r1, r5
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f7ff ff94 	bl	8000c6c <__sfputs_r>
 8000d44:	3001      	adds	r0, #1
 8000d46:	f000 80aa 	beq.w	8000e9e <_vfiprintf_r+0x20e>
 8000d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d4c:	445a      	add	r2, fp
 8000d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8000d50:	f89a 3000 	ldrb.w	r3, [sl]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a2 	beq.w	8000e9e <_vfiprintf_r+0x20e>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d64:	f10a 0a01 	add.w	sl, sl, #1
 8000d68:	9304      	str	r3, [sp, #16]
 8000d6a:	9307      	str	r3, [sp, #28]
 8000d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d70:	931a      	str	r3, [sp, #104]	; 0x68
 8000d72:	4654      	mov	r4, sl
 8000d74:	2205      	movs	r2, #5
 8000d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d7a:	4858      	ldr	r0, [pc, #352]	; (8000edc <_vfiprintf_r+0x24c>)
 8000d7c:	f7ff fa30 	bl	80001e0 <memchr>
 8000d80:	9a04      	ldr	r2, [sp, #16]
 8000d82:	b9d8      	cbnz	r0, 8000dbc <_vfiprintf_r+0x12c>
 8000d84:	06d1      	lsls	r1, r2, #27
 8000d86:	bf44      	itt	mi
 8000d88:	2320      	movmi	r3, #32
 8000d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d8e:	0713      	lsls	r3, r2, #28
 8000d90:	bf44      	itt	mi
 8000d92:	232b      	movmi	r3, #43	; 0x2b
 8000d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d98:	f89a 3000 	ldrb.w	r3, [sl]
 8000d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9e:	d015      	beq.n	8000dcc <_vfiprintf_r+0x13c>
 8000da0:	9a07      	ldr	r2, [sp, #28]
 8000da2:	4654      	mov	r4, sl
 8000da4:	2000      	movs	r0, #0
 8000da6:	f04f 0c0a 	mov.w	ip, #10
 8000daa:	4621      	mov	r1, r4
 8000dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000db0:	3b30      	subs	r3, #48	; 0x30
 8000db2:	2b09      	cmp	r3, #9
 8000db4:	d94e      	bls.n	8000e54 <_vfiprintf_r+0x1c4>
 8000db6:	b1b0      	cbz	r0, 8000de6 <_vfiprintf_r+0x156>
 8000db8:	9207      	str	r2, [sp, #28]
 8000dba:	e014      	b.n	8000de6 <_vfiprintf_r+0x156>
 8000dbc:	eba0 0308 	sub.w	r3, r0, r8
 8000dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	9304      	str	r3, [sp, #16]
 8000dc8:	46a2      	mov	sl, r4
 8000dca:	e7d2      	b.n	8000d72 <_vfiprintf_r+0xe2>
 8000dcc:	9b03      	ldr	r3, [sp, #12]
 8000dce:	1d19      	adds	r1, r3, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	9103      	str	r1, [sp, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bfbb      	ittet	lt
 8000dd8:	425b      	neglt	r3, r3
 8000dda:	f042 0202 	orrlt.w	r2, r2, #2
 8000dde:	9307      	strge	r3, [sp, #28]
 8000de0:	9307      	strlt	r3, [sp, #28]
 8000de2:	bfb8      	it	lt
 8000de4:	9204      	strlt	r2, [sp, #16]
 8000de6:	7823      	ldrb	r3, [r4, #0]
 8000de8:	2b2e      	cmp	r3, #46	; 0x2e
 8000dea:	d10c      	bne.n	8000e06 <_vfiprintf_r+0x176>
 8000dec:	7863      	ldrb	r3, [r4, #1]
 8000dee:	2b2a      	cmp	r3, #42	; 0x2a
 8000df0:	d135      	bne.n	8000e5e <_vfiprintf_r+0x1ce>
 8000df2:	9b03      	ldr	r3, [sp, #12]
 8000df4:	1d1a      	adds	r2, r3, #4
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	9203      	str	r2, [sp, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bfb8      	it	lt
 8000dfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e02:	3402      	adds	r4, #2
 8000e04:	9305      	str	r3, [sp, #20]
 8000e06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000eec <_vfiprintf_r+0x25c>
 8000e0a:	7821      	ldrb	r1, [r4, #0]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4650      	mov	r0, sl
 8000e10:	f7ff f9e6 	bl	80001e0 <memchr>
 8000e14:	b140      	cbz	r0, 8000e28 <_vfiprintf_r+0x198>
 8000e16:	2340      	movs	r3, #64	; 0x40
 8000e18:	eba0 000a 	sub.w	r0, r0, sl
 8000e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e20:	9b04      	ldr	r3, [sp, #16]
 8000e22:	4303      	orrs	r3, r0
 8000e24:	3401      	adds	r4, #1
 8000e26:	9304      	str	r3, [sp, #16]
 8000e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2c:	482c      	ldr	r0, [pc, #176]	; (8000ee0 <_vfiprintf_r+0x250>)
 8000e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e32:	2206      	movs	r2, #6
 8000e34:	f7ff f9d4 	bl	80001e0 <memchr>
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d03f      	beq.n	8000ebc <_vfiprintf_r+0x22c>
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <_vfiprintf_r+0x254>)
 8000e3e:	bb1b      	cbnz	r3, 8000e88 <_vfiprintf_r+0x1f8>
 8000e40:	9b03      	ldr	r3, [sp, #12]
 8000e42:	3307      	adds	r3, #7
 8000e44:	f023 0307 	bic.w	r3, r3, #7
 8000e48:	3308      	adds	r3, #8
 8000e4a:	9303      	str	r3, [sp, #12]
 8000e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e4e:	443b      	add	r3, r7
 8000e50:	9309      	str	r3, [sp, #36]	; 0x24
 8000e52:	e767      	b.n	8000d24 <_vfiprintf_r+0x94>
 8000e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e58:	460c      	mov	r4, r1
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	e7a5      	b.n	8000daa <_vfiprintf_r+0x11a>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	3401      	adds	r4, #1
 8000e62:	9305      	str	r3, [sp, #20]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 0c0a 	mov.w	ip, #10
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e70:	3a30      	subs	r2, #48	; 0x30
 8000e72:	2a09      	cmp	r2, #9
 8000e74:	d903      	bls.n	8000e7e <_vfiprintf_r+0x1ee>
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0c5      	beq.n	8000e06 <_vfiprintf_r+0x176>
 8000e7a:	9105      	str	r1, [sp, #20]
 8000e7c:	e7c3      	b.n	8000e06 <_vfiprintf_r+0x176>
 8000e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e82:	4604      	mov	r4, r0
 8000e84:	2301      	movs	r3, #1
 8000e86:	e7f0      	b.n	8000e6a <_vfiprintf_r+0x1da>
 8000e88:	ab03      	add	r3, sp, #12
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	462a      	mov	r2, r5
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <_vfiprintf_r+0x258>)
 8000e90:	a904      	add	r1, sp, #16
 8000e92:	4630      	mov	r0, r6
 8000e94:	f3af 8000 	nop.w
 8000e98:	4607      	mov	r7, r0
 8000e9a:	1c78      	adds	r0, r7, #1
 8000e9c:	d1d6      	bne.n	8000e4c <_vfiprintf_r+0x1bc>
 8000e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ea0:	07d9      	lsls	r1, r3, #31
 8000ea2:	d405      	bmi.n	8000eb0 <_vfiprintf_r+0x220>
 8000ea4:	89ab      	ldrh	r3, [r5, #12]
 8000ea6:	059a      	lsls	r2, r3, #22
 8000ea8:	d402      	bmi.n	8000eb0 <_vfiprintf_r+0x220>
 8000eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eac:	f7ff febe 	bl	8000c2c <__retarget_lock_release_recursive>
 8000eb0:	89ab      	ldrh	r3, [r5, #12]
 8000eb2:	065b      	lsls	r3, r3, #25
 8000eb4:	f53f af12 	bmi.w	8000cdc <_vfiprintf_r+0x4c>
 8000eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000eba:	e711      	b.n	8000ce0 <_vfiprintf_r+0x50>
 8000ebc:	ab03      	add	r3, sp, #12
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <_vfiprintf_r+0x258>)
 8000ec4:	a904      	add	r1, sp, #16
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f000 f880 	bl	8000fcc <_printf_i>
 8000ecc:	e7e4      	b.n	8000e98 <_vfiprintf_r+0x208>
 8000ece:	bf00      	nop
 8000ed0:	08001cfc 	.word	0x08001cfc
 8000ed4:	08001d1c 	.word	0x08001d1c
 8000ed8:	08001cdc 	.word	0x08001cdc
 8000edc:	08001ca8 	.word	0x08001ca8
 8000ee0:	08001cb2 	.word	0x08001cb2
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	08000c6d 	.word	0x08000c6d
 8000eec:	08001cae 	.word	0x08001cae

08000ef0 <_printf_common>:
 8000ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef4:	4616      	mov	r6, r2
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	688a      	ldr	r2, [r1, #8]
 8000efa:	690b      	ldr	r3, [r1, #16]
 8000efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	bfb8      	it	lt
 8000f04:	4613      	movlt	r3, r2
 8000f06:	6033      	str	r3, [r6, #0]
 8000f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f0c:	4607      	mov	r7, r0
 8000f0e:	460c      	mov	r4, r1
 8000f10:	b10a      	cbz	r2, 8000f16 <_printf_common+0x26>
 8000f12:	3301      	adds	r3, #1
 8000f14:	6033      	str	r3, [r6, #0]
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	0699      	lsls	r1, r3, #26
 8000f1a:	bf42      	ittt	mi
 8000f1c:	6833      	ldrmi	r3, [r6, #0]
 8000f1e:	3302      	addmi	r3, #2
 8000f20:	6033      	strmi	r3, [r6, #0]
 8000f22:	6825      	ldr	r5, [r4, #0]
 8000f24:	f015 0506 	ands.w	r5, r5, #6
 8000f28:	d106      	bne.n	8000f38 <_printf_common+0x48>
 8000f2a:	f104 0a19 	add.w	sl, r4, #25
 8000f2e:	68e3      	ldr	r3, [r4, #12]
 8000f30:	6832      	ldr	r2, [r6, #0]
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	42ab      	cmp	r3, r5
 8000f36:	dc26      	bgt.n	8000f86 <_printf_common+0x96>
 8000f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f3c:	1e13      	subs	r3, r2, #0
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	bf18      	it	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	0692      	lsls	r2, r2, #26
 8000f46:	d42b      	bmi.n	8000fa0 <_printf_common+0xb0>
 8000f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	4638      	mov	r0, r7
 8000f50:	47c0      	blx	r8
 8000f52:	3001      	adds	r0, #1
 8000f54:	d01e      	beq.n	8000f94 <_printf_common+0xa4>
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	68e5      	ldr	r5, [r4, #12]
 8000f5a:	6832      	ldr	r2, [r6, #0]
 8000f5c:	f003 0306 	and.w	r3, r3, #6
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	bf08      	it	eq
 8000f64:	1aad      	subeq	r5, r5, r2
 8000f66:	68a3      	ldr	r3, [r4, #8]
 8000f68:	6922      	ldr	r2, [r4, #16]
 8000f6a:	bf0c      	ite	eq
 8000f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f70:	2500      	movne	r5, #0
 8000f72:	4293      	cmp	r3, r2
 8000f74:	bfc4      	itt	gt
 8000f76:	1a9b      	subgt	r3, r3, r2
 8000f78:	18ed      	addgt	r5, r5, r3
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	341a      	adds	r4, #26
 8000f7e:	42b5      	cmp	r5, r6
 8000f80:	d11a      	bne.n	8000fb8 <_printf_common+0xc8>
 8000f82:	2000      	movs	r0, #0
 8000f84:	e008      	b.n	8000f98 <_printf_common+0xa8>
 8000f86:	2301      	movs	r3, #1
 8000f88:	4652      	mov	r2, sl
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	47c0      	blx	r8
 8000f90:	3001      	adds	r0, #1
 8000f92:	d103      	bne.n	8000f9c <_printf_common+0xac>
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9c:	3501      	adds	r5, #1
 8000f9e:	e7c6      	b.n	8000f2e <_printf_common+0x3e>
 8000fa0:	18e1      	adds	r1, r4, r3
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	2030      	movs	r0, #48	; 0x30
 8000fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000faa:	4422      	add	r2, r4
 8000fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	e7c7      	b.n	8000f48 <_printf_common+0x58>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4622      	mov	r2, r4
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	47c0      	blx	r8
 8000fc2:	3001      	adds	r0, #1
 8000fc4:	d0e6      	beq.n	8000f94 <_printf_common+0xa4>
 8000fc6:	3601      	adds	r6, #1
 8000fc8:	e7d9      	b.n	8000f7e <_printf_common+0x8e>
	...

08000fcc <_printf_i>:
 8000fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd0:	7e0f      	ldrb	r7, [r1, #24]
 8000fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000fd4:	2f78      	cmp	r7, #120	; 0x78
 8000fd6:	4691      	mov	r9, r2
 8000fd8:	4680      	mov	r8, r0
 8000fda:	460c      	mov	r4, r1
 8000fdc:	469a      	mov	sl, r3
 8000fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000fe2:	d807      	bhi.n	8000ff4 <_printf_i+0x28>
 8000fe4:	2f62      	cmp	r7, #98	; 0x62
 8000fe6:	d80a      	bhi.n	8000ffe <_printf_i+0x32>
 8000fe8:	2f00      	cmp	r7, #0
 8000fea:	f000 80d8 	beq.w	800119e <_printf_i+0x1d2>
 8000fee:	2f58      	cmp	r7, #88	; 0x58
 8000ff0:	f000 80a3 	beq.w	800113a <_printf_i+0x16e>
 8000ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ffc:	e03a      	b.n	8001074 <_printf_i+0xa8>
 8000ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001002:	2b15      	cmp	r3, #21
 8001004:	d8f6      	bhi.n	8000ff4 <_printf_i+0x28>
 8001006:	a101      	add	r1, pc, #4	; (adr r1, 800100c <_printf_i+0x40>)
 8001008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800100c:	08001065 	.word	0x08001065
 8001010:	08001079 	.word	0x08001079
 8001014:	08000ff5 	.word	0x08000ff5
 8001018:	08000ff5 	.word	0x08000ff5
 800101c:	08000ff5 	.word	0x08000ff5
 8001020:	08000ff5 	.word	0x08000ff5
 8001024:	08001079 	.word	0x08001079
 8001028:	08000ff5 	.word	0x08000ff5
 800102c:	08000ff5 	.word	0x08000ff5
 8001030:	08000ff5 	.word	0x08000ff5
 8001034:	08000ff5 	.word	0x08000ff5
 8001038:	08001185 	.word	0x08001185
 800103c:	080010a9 	.word	0x080010a9
 8001040:	08001167 	.word	0x08001167
 8001044:	08000ff5 	.word	0x08000ff5
 8001048:	08000ff5 	.word	0x08000ff5
 800104c:	080011a7 	.word	0x080011a7
 8001050:	08000ff5 	.word	0x08000ff5
 8001054:	080010a9 	.word	0x080010a9
 8001058:	08000ff5 	.word	0x08000ff5
 800105c:	08000ff5 	.word	0x08000ff5
 8001060:	0800116f 	.word	0x0800116f
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	1d1a      	adds	r2, r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	602a      	str	r2, [r5, #0]
 800106c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001074:	2301      	movs	r3, #1
 8001076:	e0a3      	b.n	80011c0 <_printf_i+0x1f4>
 8001078:	6820      	ldr	r0, [r4, #0]
 800107a:	6829      	ldr	r1, [r5, #0]
 800107c:	0606      	lsls	r6, r0, #24
 800107e:	f101 0304 	add.w	r3, r1, #4
 8001082:	d50a      	bpl.n	800109a <_printf_i+0xce>
 8001084:	680e      	ldr	r6, [r1, #0]
 8001086:	602b      	str	r3, [r5, #0]
 8001088:	2e00      	cmp	r6, #0
 800108a:	da03      	bge.n	8001094 <_printf_i+0xc8>
 800108c:	232d      	movs	r3, #45	; 0x2d
 800108e:	4276      	negs	r6, r6
 8001090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001094:	485e      	ldr	r0, [pc, #376]	; (8001210 <_printf_i+0x244>)
 8001096:	230a      	movs	r3, #10
 8001098:	e019      	b.n	80010ce <_printf_i+0x102>
 800109a:	680e      	ldr	r6, [r1, #0]
 800109c:	602b      	str	r3, [r5, #0]
 800109e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80010a2:	bf18      	it	ne
 80010a4:	b236      	sxthne	r6, r6
 80010a6:	e7ef      	b.n	8001088 <_printf_i+0xbc>
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	1d19      	adds	r1, r3, #4
 80010ae:	6029      	str	r1, [r5, #0]
 80010b0:	0601      	lsls	r1, r0, #24
 80010b2:	d501      	bpl.n	80010b8 <_printf_i+0xec>
 80010b4:	681e      	ldr	r6, [r3, #0]
 80010b6:	e002      	b.n	80010be <_printf_i+0xf2>
 80010b8:	0646      	lsls	r6, r0, #25
 80010ba:	d5fb      	bpl.n	80010b4 <_printf_i+0xe8>
 80010bc:	881e      	ldrh	r6, [r3, #0]
 80010be:	4854      	ldr	r0, [pc, #336]	; (8001210 <_printf_i+0x244>)
 80010c0:	2f6f      	cmp	r7, #111	; 0x6f
 80010c2:	bf0c      	ite	eq
 80010c4:	2308      	moveq	r3, #8
 80010c6:	230a      	movne	r3, #10
 80010c8:	2100      	movs	r1, #0
 80010ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010ce:	6865      	ldr	r5, [r4, #4]
 80010d0:	60a5      	str	r5, [r4, #8]
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	bfa2      	ittt	ge
 80010d6:	6821      	ldrge	r1, [r4, #0]
 80010d8:	f021 0104 	bicge.w	r1, r1, #4
 80010dc:	6021      	strge	r1, [r4, #0]
 80010de:	b90e      	cbnz	r6, 80010e4 <_printf_i+0x118>
 80010e0:	2d00      	cmp	r5, #0
 80010e2:	d04d      	beq.n	8001180 <_printf_i+0x1b4>
 80010e4:	4615      	mov	r5, r2
 80010e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80010ea:	fb03 6711 	mls	r7, r3, r1, r6
 80010ee:	5dc7      	ldrb	r7, [r0, r7]
 80010f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80010f4:	4637      	mov	r7, r6
 80010f6:	42bb      	cmp	r3, r7
 80010f8:	460e      	mov	r6, r1
 80010fa:	d9f4      	bls.n	80010e6 <_printf_i+0x11a>
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d10b      	bne.n	8001118 <_printf_i+0x14c>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	07de      	lsls	r6, r3, #31
 8001104:	d508      	bpl.n	8001118 <_printf_i+0x14c>
 8001106:	6923      	ldr	r3, [r4, #16]
 8001108:	6861      	ldr	r1, [r4, #4]
 800110a:	4299      	cmp	r1, r3
 800110c:	bfde      	ittt	le
 800110e:	2330      	movle	r3, #48	; 0x30
 8001110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001114:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001118:	1b52      	subs	r2, r2, r5
 800111a:	6122      	str	r2, [r4, #16]
 800111c:	f8cd a000 	str.w	sl, [sp]
 8001120:	464b      	mov	r3, r9
 8001122:	aa03      	add	r2, sp, #12
 8001124:	4621      	mov	r1, r4
 8001126:	4640      	mov	r0, r8
 8001128:	f7ff fee2 	bl	8000ef0 <_printf_common>
 800112c:	3001      	adds	r0, #1
 800112e:	d14c      	bne.n	80011ca <_printf_i+0x1fe>
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	b004      	add	sp, #16
 8001136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113a:	4835      	ldr	r0, [pc, #212]	; (8001210 <_printf_i+0x244>)
 800113c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001140:	6829      	ldr	r1, [r5, #0]
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	f851 6b04 	ldr.w	r6, [r1], #4
 8001148:	6029      	str	r1, [r5, #0]
 800114a:	061d      	lsls	r5, r3, #24
 800114c:	d514      	bpl.n	8001178 <_printf_i+0x1ac>
 800114e:	07df      	lsls	r7, r3, #31
 8001150:	bf44      	itt	mi
 8001152:	f043 0320 	orrmi.w	r3, r3, #32
 8001156:	6023      	strmi	r3, [r4, #0]
 8001158:	b91e      	cbnz	r6, 8001162 <_printf_i+0x196>
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	f023 0320 	bic.w	r3, r3, #32
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	2310      	movs	r3, #16
 8001164:	e7b0      	b.n	80010c8 <_printf_i+0xfc>
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	2378      	movs	r3, #120	; 0x78
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <_printf_i+0x248>)
 8001172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001176:	e7e3      	b.n	8001140 <_printf_i+0x174>
 8001178:	0659      	lsls	r1, r3, #25
 800117a:	bf48      	it	mi
 800117c:	b2b6      	uxthmi	r6, r6
 800117e:	e7e6      	b.n	800114e <_printf_i+0x182>
 8001180:	4615      	mov	r5, r2
 8001182:	e7bb      	b.n	80010fc <_printf_i+0x130>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	6826      	ldr	r6, [r4, #0]
 8001188:	6961      	ldr	r1, [r4, #20]
 800118a:	1d18      	adds	r0, r3, #4
 800118c:	6028      	str	r0, [r5, #0]
 800118e:	0635      	lsls	r5, r6, #24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	d501      	bpl.n	8001198 <_printf_i+0x1cc>
 8001194:	6019      	str	r1, [r3, #0]
 8001196:	e002      	b.n	800119e <_printf_i+0x1d2>
 8001198:	0670      	lsls	r0, r6, #25
 800119a:	d5fb      	bpl.n	8001194 <_printf_i+0x1c8>
 800119c:	8019      	strh	r1, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	6123      	str	r3, [r4, #16]
 80011a2:	4615      	mov	r5, r2
 80011a4:	e7ba      	b.n	800111c <_printf_i+0x150>
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	1d1a      	adds	r2, r3, #4
 80011aa:	602a      	str	r2, [r5, #0]
 80011ac:	681d      	ldr	r5, [r3, #0]
 80011ae:	6862      	ldr	r2, [r4, #4]
 80011b0:	2100      	movs	r1, #0
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff f814 	bl	80001e0 <memchr>
 80011b8:	b108      	cbz	r0, 80011be <_printf_i+0x1f2>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	6060      	str	r0, [r4, #4]
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	6123      	str	r3, [r4, #16]
 80011c2:	2300      	movs	r3, #0
 80011c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011c8:	e7a8      	b.n	800111c <_printf_i+0x150>
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	462a      	mov	r2, r5
 80011ce:	4649      	mov	r1, r9
 80011d0:	4640      	mov	r0, r8
 80011d2:	47d0      	blx	sl
 80011d4:	3001      	adds	r0, #1
 80011d6:	d0ab      	beq.n	8001130 <_printf_i+0x164>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	079b      	lsls	r3, r3, #30
 80011dc:	d413      	bmi.n	8001206 <_printf_i+0x23a>
 80011de:	68e0      	ldr	r0, [r4, #12]
 80011e0:	9b03      	ldr	r3, [sp, #12]
 80011e2:	4298      	cmp	r0, r3
 80011e4:	bfb8      	it	lt
 80011e6:	4618      	movlt	r0, r3
 80011e8:	e7a4      	b.n	8001134 <_printf_i+0x168>
 80011ea:	2301      	movs	r3, #1
 80011ec:	4632      	mov	r2, r6
 80011ee:	4649      	mov	r1, r9
 80011f0:	4640      	mov	r0, r8
 80011f2:	47d0      	blx	sl
 80011f4:	3001      	adds	r0, #1
 80011f6:	d09b      	beq.n	8001130 <_printf_i+0x164>
 80011f8:	3501      	adds	r5, #1
 80011fa:	68e3      	ldr	r3, [r4, #12]
 80011fc:	9903      	ldr	r1, [sp, #12]
 80011fe:	1a5b      	subs	r3, r3, r1
 8001200:	42ab      	cmp	r3, r5
 8001202:	dcf2      	bgt.n	80011ea <_printf_i+0x21e>
 8001204:	e7eb      	b.n	80011de <_printf_i+0x212>
 8001206:	2500      	movs	r5, #0
 8001208:	f104 0619 	add.w	r6, r4, #25
 800120c:	e7f5      	b.n	80011fa <_printf_i+0x22e>
 800120e:	bf00      	nop
 8001210:	08001cb9 	.word	0x08001cb9
 8001214:	08001cca 	.word	0x08001cca

08001218 <_puts_r>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	460e      	mov	r6, r1
 800121c:	4605      	mov	r5, r0
 800121e:	b118      	cbz	r0, 8001228 <_puts_r+0x10>
 8001220:	6983      	ldr	r3, [r0, #24]
 8001222:	b90b      	cbnz	r3, 8001228 <_puts_r+0x10>
 8001224:	f000 fa48 	bl	80016b8 <__sinit>
 8001228:	69ab      	ldr	r3, [r5, #24]
 800122a:	68ac      	ldr	r4, [r5, #8]
 800122c:	b913      	cbnz	r3, 8001234 <_puts_r+0x1c>
 800122e:	4628      	mov	r0, r5
 8001230:	f000 fa42 	bl	80016b8 <__sinit>
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <_puts_r+0xd0>)
 8001236:	429c      	cmp	r4, r3
 8001238:	d120      	bne.n	800127c <_puts_r+0x64>
 800123a:	686c      	ldr	r4, [r5, #4]
 800123c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800123e:	07db      	lsls	r3, r3, #31
 8001240:	d405      	bmi.n	800124e <_puts_r+0x36>
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	0598      	lsls	r0, r3, #22
 8001246:	d402      	bmi.n	800124e <_puts_r+0x36>
 8001248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800124a:	f7ff fcee 	bl	8000c2a <__retarget_lock_acquire_recursive>
 800124e:	89a3      	ldrh	r3, [r4, #12]
 8001250:	0719      	lsls	r1, r3, #28
 8001252:	d51d      	bpl.n	8001290 <_puts_r+0x78>
 8001254:	6923      	ldr	r3, [r4, #16]
 8001256:	b1db      	cbz	r3, 8001290 <_puts_r+0x78>
 8001258:	3e01      	subs	r6, #1
 800125a:	68a3      	ldr	r3, [r4, #8]
 800125c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001260:	3b01      	subs	r3, #1
 8001262:	60a3      	str	r3, [r4, #8]
 8001264:	bb39      	cbnz	r1, 80012b6 <_puts_r+0x9e>
 8001266:	2b00      	cmp	r3, #0
 8001268:	da38      	bge.n	80012dc <_puts_r+0xc4>
 800126a:	4622      	mov	r2, r4
 800126c:	210a      	movs	r1, #10
 800126e:	4628      	mov	r0, r5
 8001270:	f000 f848 	bl	8001304 <__swbuf_r>
 8001274:	3001      	adds	r0, #1
 8001276:	d011      	beq.n	800129c <_puts_r+0x84>
 8001278:	250a      	movs	r5, #10
 800127a:	e011      	b.n	80012a0 <_puts_r+0x88>
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <_puts_r+0xd4>)
 800127e:	429c      	cmp	r4, r3
 8001280:	d101      	bne.n	8001286 <_puts_r+0x6e>
 8001282:	68ac      	ldr	r4, [r5, #8]
 8001284:	e7da      	b.n	800123c <_puts_r+0x24>
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <_puts_r+0xd8>)
 8001288:	429c      	cmp	r4, r3
 800128a:	bf08      	it	eq
 800128c:	68ec      	ldreq	r4, [r5, #12]
 800128e:	e7d5      	b.n	800123c <_puts_r+0x24>
 8001290:	4621      	mov	r1, r4
 8001292:	4628      	mov	r0, r5
 8001294:	f000 f888 	bl	80013a8 <__swsetup_r>
 8001298:	2800      	cmp	r0, #0
 800129a:	d0dd      	beq.n	8001258 <_puts_r+0x40>
 800129c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80012a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012a2:	07da      	lsls	r2, r3, #31
 80012a4:	d405      	bmi.n	80012b2 <_puts_r+0x9a>
 80012a6:	89a3      	ldrh	r3, [r4, #12]
 80012a8:	059b      	lsls	r3, r3, #22
 80012aa:	d402      	bmi.n	80012b2 <_puts_r+0x9a>
 80012ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ae:	f7ff fcbd 	bl	8000c2c <__retarget_lock_release_recursive>
 80012b2:	4628      	mov	r0, r5
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da04      	bge.n	80012c4 <_puts_r+0xac>
 80012ba:	69a2      	ldr	r2, [r4, #24]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dc06      	bgt.n	80012ce <_puts_r+0xb6>
 80012c0:	290a      	cmp	r1, #10
 80012c2:	d004      	beq.n	80012ce <_puts_r+0xb6>
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	6022      	str	r2, [r4, #0]
 80012ca:	7019      	strb	r1, [r3, #0]
 80012cc:	e7c5      	b.n	800125a <_puts_r+0x42>
 80012ce:	4622      	mov	r2, r4
 80012d0:	4628      	mov	r0, r5
 80012d2:	f000 f817 	bl	8001304 <__swbuf_r>
 80012d6:	3001      	adds	r0, #1
 80012d8:	d1bf      	bne.n	800125a <_puts_r+0x42>
 80012da:	e7df      	b.n	800129c <_puts_r+0x84>
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	250a      	movs	r5, #10
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	6022      	str	r2, [r4, #0]
 80012e4:	701d      	strb	r5, [r3, #0]
 80012e6:	e7db      	b.n	80012a0 <_puts_r+0x88>
 80012e8:	08001cfc 	.word	0x08001cfc
 80012ec:	08001d1c 	.word	0x08001d1c
 80012f0:	08001cdc 	.word	0x08001cdc

080012f4 <puts>:
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <puts+0xc>)
 80012f6:	4601      	mov	r1, r0
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f7ff bf8d 	b.w	8001218 <_puts_r>
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000

08001304 <__swbuf_r>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	460e      	mov	r6, r1
 8001308:	4614      	mov	r4, r2
 800130a:	4605      	mov	r5, r0
 800130c:	b118      	cbz	r0, 8001316 <__swbuf_r+0x12>
 800130e:	6983      	ldr	r3, [r0, #24]
 8001310:	b90b      	cbnz	r3, 8001316 <__swbuf_r+0x12>
 8001312:	f000 f9d1 	bl	80016b8 <__sinit>
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <__swbuf_r+0x98>)
 8001318:	429c      	cmp	r4, r3
 800131a:	d12b      	bne.n	8001374 <__swbuf_r+0x70>
 800131c:	686c      	ldr	r4, [r5, #4]
 800131e:	69a3      	ldr	r3, [r4, #24]
 8001320:	60a3      	str	r3, [r4, #8]
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	071a      	lsls	r2, r3, #28
 8001326:	d52f      	bpl.n	8001388 <__swbuf_r+0x84>
 8001328:	6923      	ldr	r3, [r4, #16]
 800132a:	b36b      	cbz	r3, 8001388 <__swbuf_r+0x84>
 800132c:	6923      	ldr	r3, [r4, #16]
 800132e:	6820      	ldr	r0, [r4, #0]
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	6963      	ldr	r3, [r4, #20]
 8001334:	b2f6      	uxtb	r6, r6
 8001336:	4283      	cmp	r3, r0
 8001338:	4637      	mov	r7, r6
 800133a:	dc04      	bgt.n	8001346 <__swbuf_r+0x42>
 800133c:	4621      	mov	r1, r4
 800133e:	4628      	mov	r0, r5
 8001340:	f000 f926 	bl	8001590 <_fflush_r>
 8001344:	bb30      	cbnz	r0, 8001394 <__swbuf_r+0x90>
 8001346:	68a3      	ldr	r3, [r4, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60a3      	str	r3, [r4, #8]
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	6022      	str	r2, [r4, #0]
 8001352:	701e      	strb	r6, [r3, #0]
 8001354:	6963      	ldr	r3, [r4, #20]
 8001356:	3001      	adds	r0, #1
 8001358:	4283      	cmp	r3, r0
 800135a:	d004      	beq.n	8001366 <__swbuf_r+0x62>
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	07db      	lsls	r3, r3, #31
 8001360:	d506      	bpl.n	8001370 <__swbuf_r+0x6c>
 8001362:	2e0a      	cmp	r6, #10
 8001364:	d104      	bne.n	8001370 <__swbuf_r+0x6c>
 8001366:	4621      	mov	r1, r4
 8001368:	4628      	mov	r0, r5
 800136a:	f000 f911 	bl	8001590 <_fflush_r>
 800136e:	b988      	cbnz	r0, 8001394 <__swbuf_r+0x90>
 8001370:	4638      	mov	r0, r7
 8001372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <__swbuf_r+0x9c>)
 8001376:	429c      	cmp	r4, r3
 8001378:	d101      	bne.n	800137e <__swbuf_r+0x7a>
 800137a:	68ac      	ldr	r4, [r5, #8]
 800137c:	e7cf      	b.n	800131e <__swbuf_r+0x1a>
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <__swbuf_r+0xa0>)
 8001380:	429c      	cmp	r4, r3
 8001382:	bf08      	it	eq
 8001384:	68ec      	ldreq	r4, [r5, #12]
 8001386:	e7ca      	b.n	800131e <__swbuf_r+0x1a>
 8001388:	4621      	mov	r1, r4
 800138a:	4628      	mov	r0, r5
 800138c:	f000 f80c 	bl	80013a8 <__swsetup_r>
 8001390:	2800      	cmp	r0, #0
 8001392:	d0cb      	beq.n	800132c <__swbuf_r+0x28>
 8001394:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001398:	e7ea      	b.n	8001370 <__swbuf_r+0x6c>
 800139a:	bf00      	nop
 800139c:	08001cfc 	.word	0x08001cfc
 80013a0:	08001d1c 	.word	0x08001d1c
 80013a4:	08001cdc 	.word	0x08001cdc

080013a8 <__swsetup_r>:
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <__swsetup_r+0xcc>)
 80013aa:	b570      	push	{r4, r5, r6, lr}
 80013ac:	681d      	ldr	r5, [r3, #0]
 80013ae:	4606      	mov	r6, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	b125      	cbz	r5, 80013be <__swsetup_r+0x16>
 80013b4:	69ab      	ldr	r3, [r5, #24]
 80013b6:	b913      	cbnz	r3, 80013be <__swsetup_r+0x16>
 80013b8:	4628      	mov	r0, r5
 80013ba:	f000 f97d 	bl	80016b8 <__sinit>
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <__swsetup_r+0xd0>)
 80013c0:	429c      	cmp	r4, r3
 80013c2:	d10f      	bne.n	80013e4 <__swsetup_r+0x3c>
 80013c4:	686c      	ldr	r4, [r5, #4]
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013cc:	0719      	lsls	r1, r3, #28
 80013ce:	d42c      	bmi.n	800142a <__swsetup_r+0x82>
 80013d0:	06dd      	lsls	r5, r3, #27
 80013d2:	d411      	bmi.n	80013f8 <__swsetup_r+0x50>
 80013d4:	2309      	movs	r3, #9
 80013d6:	6033      	str	r3, [r6, #0]
 80013d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e2:	e03e      	b.n	8001462 <__swsetup_r+0xba>
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <__swsetup_r+0xd4>)
 80013e6:	429c      	cmp	r4, r3
 80013e8:	d101      	bne.n	80013ee <__swsetup_r+0x46>
 80013ea:	68ac      	ldr	r4, [r5, #8]
 80013ec:	e7eb      	b.n	80013c6 <__swsetup_r+0x1e>
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <__swsetup_r+0xd8>)
 80013f0:	429c      	cmp	r4, r3
 80013f2:	bf08      	it	eq
 80013f4:	68ec      	ldreq	r4, [r5, #12]
 80013f6:	e7e6      	b.n	80013c6 <__swsetup_r+0x1e>
 80013f8:	0758      	lsls	r0, r3, #29
 80013fa:	d512      	bpl.n	8001422 <__swsetup_r+0x7a>
 80013fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013fe:	b141      	cbz	r1, 8001412 <__swsetup_r+0x6a>
 8001400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001404:	4299      	cmp	r1, r3
 8001406:	d002      	beq.n	800140e <__swsetup_r+0x66>
 8001408:	4630      	mov	r0, r6
 800140a:	f000 fa57 	bl	80018bc <_free_r>
 800140e:	2300      	movs	r3, #0
 8001410:	6363      	str	r3, [r4, #52]	; 0x34
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001418:	81a3      	strh	r3, [r4, #12]
 800141a:	2300      	movs	r3, #0
 800141c:	6063      	str	r3, [r4, #4]
 800141e:	6923      	ldr	r3, [r4, #16]
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	81a3      	strh	r3, [r4, #12]
 800142a:	6923      	ldr	r3, [r4, #16]
 800142c:	b94b      	cbnz	r3, 8001442 <__swsetup_r+0x9a>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d003      	beq.n	8001442 <__swsetup_r+0x9a>
 800143a:	4621      	mov	r1, r4
 800143c:	4630      	mov	r0, r6
 800143e:	f000 f9fd 	bl	800183c <__smakebuf_r>
 8001442:	89a0      	ldrh	r0, [r4, #12]
 8001444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001448:	f010 0301 	ands.w	r3, r0, #1
 800144c:	d00a      	beq.n	8001464 <__swsetup_r+0xbc>
 800144e:	2300      	movs	r3, #0
 8001450:	60a3      	str	r3, [r4, #8]
 8001452:	6963      	ldr	r3, [r4, #20]
 8001454:	425b      	negs	r3, r3
 8001456:	61a3      	str	r3, [r4, #24]
 8001458:	6923      	ldr	r3, [r4, #16]
 800145a:	b943      	cbnz	r3, 800146e <__swsetup_r+0xc6>
 800145c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001460:	d1ba      	bne.n	80013d8 <__swsetup_r+0x30>
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	0781      	lsls	r1, r0, #30
 8001466:	bf58      	it	pl
 8001468:	6963      	ldrpl	r3, [r4, #20]
 800146a:	60a3      	str	r3, [r4, #8]
 800146c:	e7f4      	b.n	8001458 <__swsetup_r+0xb0>
 800146e:	2000      	movs	r0, #0
 8001470:	e7f7      	b.n	8001462 <__swsetup_r+0xba>
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	08001cfc 	.word	0x08001cfc
 800147c:	08001d1c 	.word	0x08001d1c
 8001480:	08001cdc 	.word	0x08001cdc

08001484 <__sflush_r>:
 8001484:	898a      	ldrh	r2, [r1, #12]
 8001486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148a:	4605      	mov	r5, r0
 800148c:	0710      	lsls	r0, r2, #28
 800148e:	460c      	mov	r4, r1
 8001490:	d458      	bmi.n	8001544 <__sflush_r+0xc0>
 8001492:	684b      	ldr	r3, [r1, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dc05      	bgt.n	80014a4 <__sflush_r+0x20>
 8001498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	dc02      	bgt.n	80014a4 <__sflush_r+0x20>
 800149e:	2000      	movs	r0, #0
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014a6:	2e00      	cmp	r6, #0
 80014a8:	d0f9      	beq.n	800149e <__sflush_r+0x1a>
 80014aa:	2300      	movs	r3, #0
 80014ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014b0:	682f      	ldr	r7, [r5, #0]
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	d032      	beq.n	800151c <__sflush_r+0x98>
 80014b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	075a      	lsls	r2, r3, #29
 80014bc:	d505      	bpl.n	80014ca <__sflush_r+0x46>
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	1ac0      	subs	r0, r0, r3
 80014c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014c4:	b10b      	cbz	r3, 80014ca <__sflush_r+0x46>
 80014c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c8:	1ac0      	subs	r0, r0, r3
 80014ca:	2300      	movs	r3, #0
 80014cc:	4602      	mov	r2, r0
 80014ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014d0:	6a21      	ldr	r1, [r4, #32]
 80014d2:	4628      	mov	r0, r5
 80014d4:	47b0      	blx	r6
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	d106      	bne.n	80014ea <__sflush_r+0x66>
 80014dc:	6829      	ldr	r1, [r5, #0]
 80014de:	291d      	cmp	r1, #29
 80014e0:	d82c      	bhi.n	800153c <__sflush_r+0xb8>
 80014e2:	4a2a      	ldr	r2, [pc, #168]	; (800158c <__sflush_r+0x108>)
 80014e4:	40ca      	lsrs	r2, r1
 80014e6:	07d6      	lsls	r6, r2, #31
 80014e8:	d528      	bpl.n	800153c <__sflush_r+0xb8>
 80014ea:	2200      	movs	r2, #0
 80014ec:	6062      	str	r2, [r4, #4]
 80014ee:	04d9      	lsls	r1, r3, #19
 80014f0:	6922      	ldr	r2, [r4, #16]
 80014f2:	6022      	str	r2, [r4, #0]
 80014f4:	d504      	bpl.n	8001500 <__sflush_r+0x7c>
 80014f6:	1c42      	adds	r2, r0, #1
 80014f8:	d101      	bne.n	80014fe <__sflush_r+0x7a>
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	b903      	cbnz	r3, 8001500 <__sflush_r+0x7c>
 80014fe:	6560      	str	r0, [r4, #84]	; 0x54
 8001500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001502:	602f      	str	r7, [r5, #0]
 8001504:	2900      	cmp	r1, #0
 8001506:	d0ca      	beq.n	800149e <__sflush_r+0x1a>
 8001508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800150c:	4299      	cmp	r1, r3
 800150e:	d002      	beq.n	8001516 <__sflush_r+0x92>
 8001510:	4628      	mov	r0, r5
 8001512:	f000 f9d3 	bl	80018bc <_free_r>
 8001516:	2000      	movs	r0, #0
 8001518:	6360      	str	r0, [r4, #52]	; 0x34
 800151a:	e7c1      	b.n	80014a0 <__sflush_r+0x1c>
 800151c:	6a21      	ldr	r1, [r4, #32]
 800151e:	2301      	movs	r3, #1
 8001520:	4628      	mov	r0, r5
 8001522:	47b0      	blx	r6
 8001524:	1c41      	adds	r1, r0, #1
 8001526:	d1c7      	bne.n	80014b8 <__sflush_r+0x34>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0c4      	beq.n	80014b8 <__sflush_r+0x34>
 800152e:	2b1d      	cmp	r3, #29
 8001530:	d001      	beq.n	8001536 <__sflush_r+0xb2>
 8001532:	2b16      	cmp	r3, #22
 8001534:	d101      	bne.n	800153a <__sflush_r+0xb6>
 8001536:	602f      	str	r7, [r5, #0]
 8001538:	e7b1      	b.n	800149e <__sflush_r+0x1a>
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	e7ad      	b.n	80014a0 <__sflush_r+0x1c>
 8001544:	690f      	ldr	r7, [r1, #16]
 8001546:	2f00      	cmp	r7, #0
 8001548:	d0a9      	beq.n	800149e <__sflush_r+0x1a>
 800154a:	0793      	lsls	r3, r2, #30
 800154c:	680e      	ldr	r6, [r1, #0]
 800154e:	bf08      	it	eq
 8001550:	694b      	ldreq	r3, [r1, #20]
 8001552:	600f      	str	r7, [r1, #0]
 8001554:	bf18      	it	ne
 8001556:	2300      	movne	r3, #0
 8001558:	eba6 0807 	sub.w	r8, r6, r7
 800155c:	608b      	str	r3, [r1, #8]
 800155e:	f1b8 0f00 	cmp.w	r8, #0
 8001562:	dd9c      	ble.n	800149e <__sflush_r+0x1a>
 8001564:	6a21      	ldr	r1, [r4, #32]
 8001566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001568:	4643      	mov	r3, r8
 800156a:	463a      	mov	r2, r7
 800156c:	4628      	mov	r0, r5
 800156e:	47b0      	blx	r6
 8001570:	2800      	cmp	r0, #0
 8001572:	dc06      	bgt.n	8001582 <__sflush_r+0xfe>
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	e78e      	b.n	80014a0 <__sflush_r+0x1c>
 8001582:	4407      	add	r7, r0
 8001584:	eba8 0800 	sub.w	r8, r8, r0
 8001588:	e7e9      	b.n	800155e <__sflush_r+0xda>
 800158a:	bf00      	nop
 800158c:	20400001 	.word	0x20400001

08001590 <_fflush_r>:
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	690b      	ldr	r3, [r1, #16]
 8001594:	4605      	mov	r5, r0
 8001596:	460c      	mov	r4, r1
 8001598:	b913      	cbnz	r3, 80015a0 <_fflush_r+0x10>
 800159a:	2500      	movs	r5, #0
 800159c:	4628      	mov	r0, r5
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	b118      	cbz	r0, 80015aa <_fflush_r+0x1a>
 80015a2:	6983      	ldr	r3, [r0, #24]
 80015a4:	b90b      	cbnz	r3, 80015aa <_fflush_r+0x1a>
 80015a6:	f000 f887 	bl	80016b8 <__sinit>
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <_fflush_r+0x6c>)
 80015ac:	429c      	cmp	r4, r3
 80015ae:	d11b      	bne.n	80015e8 <_fflush_r+0x58>
 80015b0:	686c      	ldr	r4, [r5, #4]
 80015b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0ef      	beq.n	800159a <_fflush_r+0xa>
 80015ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015bc:	07d0      	lsls	r0, r2, #31
 80015be:	d404      	bmi.n	80015ca <_fflush_r+0x3a>
 80015c0:	0599      	lsls	r1, r3, #22
 80015c2:	d402      	bmi.n	80015ca <_fflush_r+0x3a>
 80015c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015c6:	f7ff fb30 	bl	8000c2a <__retarget_lock_acquire_recursive>
 80015ca:	4628      	mov	r0, r5
 80015cc:	4621      	mov	r1, r4
 80015ce:	f7ff ff59 	bl	8001484 <__sflush_r>
 80015d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015d4:	07da      	lsls	r2, r3, #31
 80015d6:	4605      	mov	r5, r0
 80015d8:	d4e0      	bmi.n	800159c <_fflush_r+0xc>
 80015da:	89a3      	ldrh	r3, [r4, #12]
 80015dc:	059b      	lsls	r3, r3, #22
 80015de:	d4dd      	bmi.n	800159c <_fflush_r+0xc>
 80015e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e2:	f7ff fb23 	bl	8000c2c <__retarget_lock_release_recursive>
 80015e6:	e7d9      	b.n	800159c <_fflush_r+0xc>
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <_fflush_r+0x70>)
 80015ea:	429c      	cmp	r4, r3
 80015ec:	d101      	bne.n	80015f2 <_fflush_r+0x62>
 80015ee:	68ac      	ldr	r4, [r5, #8]
 80015f0:	e7df      	b.n	80015b2 <_fflush_r+0x22>
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <_fflush_r+0x74>)
 80015f4:	429c      	cmp	r4, r3
 80015f6:	bf08      	it	eq
 80015f8:	68ec      	ldreq	r4, [r5, #12]
 80015fa:	e7da      	b.n	80015b2 <_fflush_r+0x22>
 80015fc:	08001cfc 	.word	0x08001cfc
 8001600:	08001d1c 	.word	0x08001d1c
 8001604:	08001cdc 	.word	0x08001cdc

08001608 <std>:
 8001608:	2300      	movs	r3, #0
 800160a:	b510      	push	{r4, lr}
 800160c:	4604      	mov	r4, r0
 800160e:	e9c0 3300 	strd	r3, r3, [r0]
 8001612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001616:	6083      	str	r3, [r0, #8]
 8001618:	8181      	strh	r1, [r0, #12]
 800161a:	6643      	str	r3, [r0, #100]	; 0x64
 800161c:	81c2      	strh	r2, [r0, #14]
 800161e:	6183      	str	r3, [r0, #24]
 8001620:	4619      	mov	r1, r3
 8001622:	2208      	movs	r2, #8
 8001624:	305c      	adds	r0, #92	; 0x5c
 8001626:	f7ff fb02 	bl	8000c2e <memset>
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <std+0x38>)
 800162c:	6263      	str	r3, [r4, #36]	; 0x24
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <std+0x3c>)
 8001630:	62a3      	str	r3, [r4, #40]	; 0x28
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <std+0x40>)
 8001634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <std+0x44>)
 8001638:	6224      	str	r4, [r4, #32]
 800163a:	6323      	str	r3, [r4, #48]	; 0x30
 800163c:	bd10      	pop	{r4, pc}
 800163e:	bf00      	nop
 8001640:	08001a9d 	.word	0x08001a9d
 8001644:	08001abf 	.word	0x08001abf
 8001648:	08001af7 	.word	0x08001af7
 800164c:	08001b1b 	.word	0x08001b1b

08001650 <_cleanup_r>:
 8001650:	4901      	ldr	r1, [pc, #4]	; (8001658 <_cleanup_r+0x8>)
 8001652:	f000 b8af 	b.w	80017b4 <_fwalk_reent>
 8001656:	bf00      	nop
 8001658:	08001591 	.word	0x08001591

0800165c <__sfmoreglue>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	2268      	movs	r2, #104	; 0x68
 8001660:	1e4d      	subs	r5, r1, #1
 8001662:	4355      	muls	r5, r2
 8001664:	460e      	mov	r6, r1
 8001666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800166a:	f000 f993 	bl	8001994 <_malloc_r>
 800166e:	4604      	mov	r4, r0
 8001670:	b140      	cbz	r0, 8001684 <__sfmoreglue+0x28>
 8001672:	2100      	movs	r1, #0
 8001674:	e9c0 1600 	strd	r1, r6, [r0]
 8001678:	300c      	adds	r0, #12
 800167a:	60a0      	str	r0, [r4, #8]
 800167c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001680:	f7ff fad5 	bl	8000c2e <memset>
 8001684:	4620      	mov	r0, r4
 8001686:	bd70      	pop	{r4, r5, r6, pc}

08001688 <__sfp_lock_acquire>:
 8001688:	4801      	ldr	r0, [pc, #4]	; (8001690 <__sfp_lock_acquire+0x8>)
 800168a:	f7ff bace 	b.w	8000c2a <__retarget_lock_acquire_recursive>
 800168e:	bf00      	nop
 8001690:	20001171 	.word	0x20001171

08001694 <__sfp_lock_release>:
 8001694:	4801      	ldr	r0, [pc, #4]	; (800169c <__sfp_lock_release+0x8>)
 8001696:	f7ff bac9 	b.w	8000c2c <__retarget_lock_release_recursive>
 800169a:	bf00      	nop
 800169c:	20001171 	.word	0x20001171

080016a0 <__sinit_lock_acquire>:
 80016a0:	4801      	ldr	r0, [pc, #4]	; (80016a8 <__sinit_lock_acquire+0x8>)
 80016a2:	f7ff bac2 	b.w	8000c2a <__retarget_lock_acquire_recursive>
 80016a6:	bf00      	nop
 80016a8:	20001172 	.word	0x20001172

080016ac <__sinit_lock_release>:
 80016ac:	4801      	ldr	r0, [pc, #4]	; (80016b4 <__sinit_lock_release+0x8>)
 80016ae:	f7ff babd 	b.w	8000c2c <__retarget_lock_release_recursive>
 80016b2:	bf00      	nop
 80016b4:	20001172 	.word	0x20001172

080016b8 <__sinit>:
 80016b8:	b510      	push	{r4, lr}
 80016ba:	4604      	mov	r4, r0
 80016bc:	f7ff fff0 	bl	80016a0 <__sinit_lock_acquire>
 80016c0:	69a3      	ldr	r3, [r4, #24]
 80016c2:	b11b      	cbz	r3, 80016cc <__sinit+0x14>
 80016c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c8:	f7ff bff0 	b.w	80016ac <__sinit_lock_release>
 80016cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80016d0:	6523      	str	r3, [r4, #80]	; 0x50
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <__sinit+0x68>)
 80016d4:	4a13      	ldr	r2, [pc, #76]	; (8001724 <__sinit+0x6c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80016da:	42a3      	cmp	r3, r4
 80016dc:	bf04      	itt	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	61a3      	streq	r3, [r4, #24]
 80016e2:	4620      	mov	r0, r4
 80016e4:	f000 f820 	bl	8001728 <__sfp>
 80016e8:	6060      	str	r0, [r4, #4]
 80016ea:	4620      	mov	r0, r4
 80016ec:	f000 f81c 	bl	8001728 <__sfp>
 80016f0:	60a0      	str	r0, [r4, #8]
 80016f2:	4620      	mov	r0, r4
 80016f4:	f000 f818 	bl	8001728 <__sfp>
 80016f8:	2200      	movs	r2, #0
 80016fa:	60e0      	str	r0, [r4, #12]
 80016fc:	2104      	movs	r1, #4
 80016fe:	6860      	ldr	r0, [r4, #4]
 8001700:	f7ff ff82 	bl	8001608 <std>
 8001704:	68a0      	ldr	r0, [r4, #8]
 8001706:	2201      	movs	r2, #1
 8001708:	2109      	movs	r1, #9
 800170a:	f7ff ff7d 	bl	8001608 <std>
 800170e:	68e0      	ldr	r0, [r4, #12]
 8001710:	2202      	movs	r2, #2
 8001712:	2112      	movs	r1, #18
 8001714:	f7ff ff78 	bl	8001608 <std>
 8001718:	2301      	movs	r3, #1
 800171a:	61a3      	str	r3, [r4, #24]
 800171c:	e7d2      	b.n	80016c4 <__sinit+0xc>
 800171e:	bf00      	nop
 8001720:	08001ca4 	.word	0x08001ca4
 8001724:	08001651 	.word	0x08001651

08001728 <__sfp>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	4607      	mov	r7, r0
 800172c:	f7ff ffac 	bl	8001688 <__sfp_lock_acquire>
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <__sfp+0x84>)
 8001732:	681e      	ldr	r6, [r3, #0]
 8001734:	69b3      	ldr	r3, [r6, #24]
 8001736:	b913      	cbnz	r3, 800173e <__sfp+0x16>
 8001738:	4630      	mov	r0, r6
 800173a:	f7ff ffbd 	bl	80016b8 <__sinit>
 800173e:	3648      	adds	r6, #72	; 0x48
 8001740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001744:	3b01      	subs	r3, #1
 8001746:	d503      	bpl.n	8001750 <__sfp+0x28>
 8001748:	6833      	ldr	r3, [r6, #0]
 800174a:	b30b      	cbz	r3, 8001790 <__sfp+0x68>
 800174c:	6836      	ldr	r6, [r6, #0]
 800174e:	e7f7      	b.n	8001740 <__sfp+0x18>
 8001750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001754:	b9d5      	cbnz	r5, 800178c <__sfp+0x64>
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <__sfp+0x88>)
 8001758:	60e3      	str	r3, [r4, #12]
 800175a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800175e:	6665      	str	r5, [r4, #100]	; 0x64
 8001760:	f7ff fa62 	bl	8000c28 <__retarget_lock_init_recursive>
 8001764:	f7ff ff96 	bl	8001694 <__sfp_lock_release>
 8001768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800176c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001770:	6025      	str	r5, [r4, #0]
 8001772:	61a5      	str	r5, [r4, #24]
 8001774:	2208      	movs	r2, #8
 8001776:	4629      	mov	r1, r5
 8001778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800177c:	f7ff fa57 	bl	8000c2e <memset>
 8001780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001788:	4620      	mov	r0, r4
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800178c:	3468      	adds	r4, #104	; 0x68
 800178e:	e7d9      	b.n	8001744 <__sfp+0x1c>
 8001790:	2104      	movs	r1, #4
 8001792:	4638      	mov	r0, r7
 8001794:	f7ff ff62 	bl	800165c <__sfmoreglue>
 8001798:	4604      	mov	r4, r0
 800179a:	6030      	str	r0, [r6, #0]
 800179c:	2800      	cmp	r0, #0
 800179e:	d1d5      	bne.n	800174c <__sfp+0x24>
 80017a0:	f7ff ff78 	bl	8001694 <__sfp_lock_release>
 80017a4:	230c      	movs	r3, #12
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	e7ee      	b.n	8001788 <__sfp+0x60>
 80017aa:	bf00      	nop
 80017ac:	08001ca4 	.word	0x08001ca4
 80017b0:	ffff0001 	.word	0xffff0001

080017b4 <_fwalk_reent>:
 80017b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017b8:	4606      	mov	r6, r0
 80017ba:	4688      	mov	r8, r1
 80017bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017c0:	2700      	movs	r7, #0
 80017c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017c6:	f1b9 0901 	subs.w	r9, r9, #1
 80017ca:	d505      	bpl.n	80017d8 <_fwalk_reent+0x24>
 80017cc:	6824      	ldr	r4, [r4, #0]
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d1f7      	bne.n	80017c2 <_fwalk_reent+0xe>
 80017d2:	4638      	mov	r0, r7
 80017d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017d8:	89ab      	ldrh	r3, [r5, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d907      	bls.n	80017ee <_fwalk_reent+0x3a>
 80017de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017e2:	3301      	adds	r3, #1
 80017e4:	d003      	beq.n	80017ee <_fwalk_reent+0x3a>
 80017e6:	4629      	mov	r1, r5
 80017e8:	4630      	mov	r0, r6
 80017ea:	47c0      	blx	r8
 80017ec:	4307      	orrs	r7, r0
 80017ee:	3568      	adds	r5, #104	; 0x68
 80017f0:	e7e9      	b.n	80017c6 <_fwalk_reent+0x12>

080017f2 <__swhatbuf_r>:
 80017f2:	b570      	push	{r4, r5, r6, lr}
 80017f4:	460e      	mov	r6, r1
 80017f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fa:	2900      	cmp	r1, #0
 80017fc:	b096      	sub	sp, #88	; 0x58
 80017fe:	4614      	mov	r4, r2
 8001800:	461d      	mov	r5, r3
 8001802:	da08      	bge.n	8001816 <__swhatbuf_r+0x24>
 8001804:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	602a      	str	r2, [r5, #0]
 800180c:	061a      	lsls	r2, r3, #24
 800180e:	d410      	bmi.n	8001832 <__swhatbuf_r+0x40>
 8001810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001814:	e00e      	b.n	8001834 <__swhatbuf_r+0x42>
 8001816:	466a      	mov	r2, sp
 8001818:	f000 f9a6 	bl	8001b68 <_fstat_r>
 800181c:	2800      	cmp	r0, #0
 800181e:	dbf1      	blt.n	8001804 <__swhatbuf_r+0x12>
 8001820:	9a01      	ldr	r2, [sp, #4]
 8001822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800182a:	425a      	negs	r2, r3
 800182c:	415a      	adcs	r2, r3
 800182e:	602a      	str	r2, [r5, #0]
 8001830:	e7ee      	b.n	8001810 <__swhatbuf_r+0x1e>
 8001832:	2340      	movs	r3, #64	; 0x40
 8001834:	2000      	movs	r0, #0
 8001836:	6023      	str	r3, [r4, #0]
 8001838:	b016      	add	sp, #88	; 0x58
 800183a:	bd70      	pop	{r4, r5, r6, pc}

0800183c <__smakebuf_r>:
 800183c:	898b      	ldrh	r3, [r1, #12]
 800183e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001840:	079d      	lsls	r5, r3, #30
 8001842:	4606      	mov	r6, r0
 8001844:	460c      	mov	r4, r1
 8001846:	d507      	bpl.n	8001858 <__smakebuf_r+0x1c>
 8001848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	6123      	str	r3, [r4, #16]
 8001850:	2301      	movs	r3, #1
 8001852:	6163      	str	r3, [r4, #20]
 8001854:	b002      	add	sp, #8
 8001856:	bd70      	pop	{r4, r5, r6, pc}
 8001858:	ab01      	add	r3, sp, #4
 800185a:	466a      	mov	r2, sp
 800185c:	f7ff ffc9 	bl	80017f2 <__swhatbuf_r>
 8001860:	9900      	ldr	r1, [sp, #0]
 8001862:	4605      	mov	r5, r0
 8001864:	4630      	mov	r0, r6
 8001866:	f000 f895 	bl	8001994 <_malloc_r>
 800186a:	b948      	cbnz	r0, 8001880 <__smakebuf_r+0x44>
 800186c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001870:	059a      	lsls	r2, r3, #22
 8001872:	d4ef      	bmi.n	8001854 <__smakebuf_r+0x18>
 8001874:	f023 0303 	bic.w	r3, r3, #3
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	81a3      	strh	r3, [r4, #12]
 800187e:	e7e3      	b.n	8001848 <__smakebuf_r+0xc>
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <__smakebuf_r+0x7c>)
 8001882:	62b3      	str	r3, [r6, #40]	; 0x28
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	6020      	str	r0, [r4, #0]
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	81a3      	strh	r3, [r4, #12]
 800188e:	9b00      	ldr	r3, [sp, #0]
 8001890:	6163      	str	r3, [r4, #20]
 8001892:	9b01      	ldr	r3, [sp, #4]
 8001894:	6120      	str	r0, [r4, #16]
 8001896:	b15b      	cbz	r3, 80018b0 <__smakebuf_r+0x74>
 8001898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800189c:	4630      	mov	r0, r6
 800189e:	f000 f975 	bl	8001b8c <_isatty_r>
 80018a2:	b128      	cbz	r0, 80018b0 <__smakebuf_r+0x74>
 80018a4:	89a3      	ldrh	r3, [r4, #12]
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	81a3      	strh	r3, [r4, #12]
 80018b0:	89a0      	ldrh	r0, [r4, #12]
 80018b2:	4305      	orrs	r5, r0
 80018b4:	81a5      	strh	r5, [r4, #12]
 80018b6:	e7cd      	b.n	8001854 <__smakebuf_r+0x18>
 80018b8:	08001651 	.word	0x08001651

080018bc <_free_r>:
 80018bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018be:	2900      	cmp	r1, #0
 80018c0:	d044      	beq.n	800194c <_free_r+0x90>
 80018c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018c6:	9001      	str	r0, [sp, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f1a1 0404 	sub.w	r4, r1, #4
 80018ce:	bfb8      	it	lt
 80018d0:	18e4      	addlt	r4, r4, r3
 80018d2:	f000 f97d 	bl	8001bd0 <__malloc_lock>
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <_free_r+0x94>)
 80018d8:	9801      	ldr	r0, [sp, #4]
 80018da:	6813      	ldr	r3, [r2, #0]
 80018dc:	b933      	cbnz	r3, 80018ec <_free_r+0x30>
 80018de:	6063      	str	r3, [r4, #4]
 80018e0:	6014      	str	r4, [r2, #0]
 80018e2:	b003      	add	sp, #12
 80018e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018e8:	f000 b978 	b.w	8001bdc <__malloc_unlock>
 80018ec:	42a3      	cmp	r3, r4
 80018ee:	d908      	bls.n	8001902 <_free_r+0x46>
 80018f0:	6825      	ldr	r5, [r4, #0]
 80018f2:	1961      	adds	r1, r4, r5
 80018f4:	428b      	cmp	r3, r1
 80018f6:	bf01      	itttt	eq
 80018f8:	6819      	ldreq	r1, [r3, #0]
 80018fa:	685b      	ldreq	r3, [r3, #4]
 80018fc:	1949      	addeq	r1, r1, r5
 80018fe:	6021      	streq	r1, [r4, #0]
 8001900:	e7ed      	b.n	80018de <_free_r+0x22>
 8001902:	461a      	mov	r2, r3
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	b10b      	cbz	r3, 800190c <_free_r+0x50>
 8001908:	42a3      	cmp	r3, r4
 800190a:	d9fa      	bls.n	8001902 <_free_r+0x46>
 800190c:	6811      	ldr	r1, [r2, #0]
 800190e:	1855      	adds	r5, r2, r1
 8001910:	42a5      	cmp	r5, r4
 8001912:	d10b      	bne.n	800192c <_free_r+0x70>
 8001914:	6824      	ldr	r4, [r4, #0]
 8001916:	4421      	add	r1, r4
 8001918:	1854      	adds	r4, r2, r1
 800191a:	42a3      	cmp	r3, r4
 800191c:	6011      	str	r1, [r2, #0]
 800191e:	d1e0      	bne.n	80018e2 <_free_r+0x26>
 8001920:	681c      	ldr	r4, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	6053      	str	r3, [r2, #4]
 8001926:	4421      	add	r1, r4
 8001928:	6011      	str	r1, [r2, #0]
 800192a:	e7da      	b.n	80018e2 <_free_r+0x26>
 800192c:	d902      	bls.n	8001934 <_free_r+0x78>
 800192e:	230c      	movs	r3, #12
 8001930:	6003      	str	r3, [r0, #0]
 8001932:	e7d6      	b.n	80018e2 <_free_r+0x26>
 8001934:	6825      	ldr	r5, [r4, #0]
 8001936:	1961      	adds	r1, r4, r5
 8001938:	428b      	cmp	r3, r1
 800193a:	bf04      	itt	eq
 800193c:	6819      	ldreq	r1, [r3, #0]
 800193e:	685b      	ldreq	r3, [r3, #4]
 8001940:	6063      	str	r3, [r4, #4]
 8001942:	bf04      	itt	eq
 8001944:	1949      	addeq	r1, r1, r5
 8001946:	6021      	streq	r1, [r4, #0]
 8001948:	6054      	str	r4, [r2, #4]
 800194a:	e7ca      	b.n	80018e2 <_free_r+0x26>
 800194c:	b003      	add	sp, #12
 800194e:	bd30      	pop	{r4, r5, pc}
 8001950:	20001174 	.word	0x20001174

08001954 <sbrk_aligned>:
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	4e0e      	ldr	r6, [pc, #56]	; (8001990 <sbrk_aligned+0x3c>)
 8001958:	460c      	mov	r4, r1
 800195a:	6831      	ldr	r1, [r6, #0]
 800195c:	4605      	mov	r5, r0
 800195e:	b911      	cbnz	r1, 8001966 <sbrk_aligned+0x12>
 8001960:	f000 f88c 	bl	8001a7c <_sbrk_r>
 8001964:	6030      	str	r0, [r6, #0]
 8001966:	4621      	mov	r1, r4
 8001968:	4628      	mov	r0, r5
 800196a:	f000 f887 	bl	8001a7c <_sbrk_r>
 800196e:	1c43      	adds	r3, r0, #1
 8001970:	d00a      	beq.n	8001988 <sbrk_aligned+0x34>
 8001972:	1cc4      	adds	r4, r0, #3
 8001974:	f024 0403 	bic.w	r4, r4, #3
 8001978:	42a0      	cmp	r0, r4
 800197a:	d007      	beq.n	800198c <sbrk_aligned+0x38>
 800197c:	1a21      	subs	r1, r4, r0
 800197e:	4628      	mov	r0, r5
 8001980:	f000 f87c 	bl	8001a7c <_sbrk_r>
 8001984:	3001      	adds	r0, #1
 8001986:	d101      	bne.n	800198c <sbrk_aligned+0x38>
 8001988:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800198c:	4620      	mov	r0, r4
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	20001178 	.word	0x20001178

08001994 <_malloc_r>:
 8001994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001998:	1ccd      	adds	r5, r1, #3
 800199a:	f025 0503 	bic.w	r5, r5, #3
 800199e:	3508      	adds	r5, #8
 80019a0:	2d0c      	cmp	r5, #12
 80019a2:	bf38      	it	cc
 80019a4:	250c      	movcc	r5, #12
 80019a6:	2d00      	cmp	r5, #0
 80019a8:	4607      	mov	r7, r0
 80019aa:	db01      	blt.n	80019b0 <_malloc_r+0x1c>
 80019ac:	42a9      	cmp	r1, r5
 80019ae:	d905      	bls.n	80019bc <_malloc_r+0x28>
 80019b0:	230c      	movs	r3, #12
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	2600      	movs	r6, #0
 80019b6:	4630      	mov	r0, r6
 80019b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019bc:	4e2e      	ldr	r6, [pc, #184]	; (8001a78 <_malloc_r+0xe4>)
 80019be:	f000 f907 	bl	8001bd0 <__malloc_lock>
 80019c2:	6833      	ldr	r3, [r6, #0]
 80019c4:	461c      	mov	r4, r3
 80019c6:	bb34      	cbnz	r4, 8001a16 <_malloc_r+0x82>
 80019c8:	4629      	mov	r1, r5
 80019ca:	4638      	mov	r0, r7
 80019cc:	f7ff ffc2 	bl	8001954 <sbrk_aligned>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	4604      	mov	r4, r0
 80019d4:	d14d      	bne.n	8001a72 <_malloc_r+0xde>
 80019d6:	6834      	ldr	r4, [r6, #0]
 80019d8:	4626      	mov	r6, r4
 80019da:	2e00      	cmp	r6, #0
 80019dc:	d140      	bne.n	8001a60 <_malloc_r+0xcc>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	4631      	mov	r1, r6
 80019e2:	4638      	mov	r0, r7
 80019e4:	eb04 0803 	add.w	r8, r4, r3
 80019e8:	f000 f848 	bl	8001a7c <_sbrk_r>
 80019ec:	4580      	cmp	r8, r0
 80019ee:	d13a      	bne.n	8001a66 <_malloc_r+0xd2>
 80019f0:	6821      	ldr	r1, [r4, #0]
 80019f2:	3503      	adds	r5, #3
 80019f4:	1a6d      	subs	r5, r5, r1
 80019f6:	f025 0503 	bic.w	r5, r5, #3
 80019fa:	3508      	adds	r5, #8
 80019fc:	2d0c      	cmp	r5, #12
 80019fe:	bf38      	it	cc
 8001a00:	250c      	movcc	r5, #12
 8001a02:	4629      	mov	r1, r5
 8001a04:	4638      	mov	r0, r7
 8001a06:	f7ff ffa5 	bl	8001954 <sbrk_aligned>
 8001a0a:	3001      	adds	r0, #1
 8001a0c:	d02b      	beq.n	8001a66 <_malloc_r+0xd2>
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	442b      	add	r3, r5
 8001a12:	6023      	str	r3, [r4, #0]
 8001a14:	e00e      	b.n	8001a34 <_malloc_r+0xa0>
 8001a16:	6822      	ldr	r2, [r4, #0]
 8001a18:	1b52      	subs	r2, r2, r5
 8001a1a:	d41e      	bmi.n	8001a5a <_malloc_r+0xc6>
 8001a1c:	2a0b      	cmp	r2, #11
 8001a1e:	d916      	bls.n	8001a4e <_malloc_r+0xba>
 8001a20:	1961      	adds	r1, r4, r5
 8001a22:	42a3      	cmp	r3, r4
 8001a24:	6025      	str	r5, [r4, #0]
 8001a26:	bf18      	it	ne
 8001a28:	6059      	strne	r1, [r3, #4]
 8001a2a:	6863      	ldr	r3, [r4, #4]
 8001a2c:	bf08      	it	eq
 8001a2e:	6031      	streq	r1, [r6, #0]
 8001a30:	5162      	str	r2, [r4, r5]
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	4638      	mov	r0, r7
 8001a36:	f104 060b 	add.w	r6, r4, #11
 8001a3a:	f000 f8cf 	bl	8001bdc <__malloc_unlock>
 8001a3e:	f026 0607 	bic.w	r6, r6, #7
 8001a42:	1d23      	adds	r3, r4, #4
 8001a44:	1af2      	subs	r2, r6, r3
 8001a46:	d0b6      	beq.n	80019b6 <_malloc_r+0x22>
 8001a48:	1b9b      	subs	r3, r3, r6
 8001a4a:	50a3      	str	r3, [r4, r2]
 8001a4c:	e7b3      	b.n	80019b6 <_malloc_r+0x22>
 8001a4e:	6862      	ldr	r2, [r4, #4]
 8001a50:	42a3      	cmp	r3, r4
 8001a52:	bf0c      	ite	eq
 8001a54:	6032      	streq	r2, [r6, #0]
 8001a56:	605a      	strne	r2, [r3, #4]
 8001a58:	e7ec      	b.n	8001a34 <_malloc_r+0xa0>
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	6864      	ldr	r4, [r4, #4]
 8001a5e:	e7b2      	b.n	80019c6 <_malloc_r+0x32>
 8001a60:	4634      	mov	r4, r6
 8001a62:	6876      	ldr	r6, [r6, #4]
 8001a64:	e7b9      	b.n	80019da <_malloc_r+0x46>
 8001a66:	230c      	movs	r3, #12
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	f000 f8b6 	bl	8001bdc <__malloc_unlock>
 8001a70:	e7a1      	b.n	80019b6 <_malloc_r+0x22>
 8001a72:	6025      	str	r5, [r4, #0]
 8001a74:	e7de      	b.n	8001a34 <_malloc_r+0xa0>
 8001a76:	bf00      	nop
 8001a78:	20001174 	.word	0x20001174

08001a7c <_sbrk_r>:
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4d06      	ldr	r5, [pc, #24]	; (8001a98 <_sbrk_r+0x1c>)
 8001a80:	2300      	movs	r3, #0
 8001a82:	4604      	mov	r4, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	602b      	str	r3, [r5, #0]
 8001a88:	f7fe ff2c 	bl	80008e4 <_sbrk>
 8001a8c:	1c43      	adds	r3, r0, #1
 8001a8e:	d102      	bne.n	8001a96 <_sbrk_r+0x1a>
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	b103      	cbz	r3, 8001a96 <_sbrk_r+0x1a>
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
 8001a98:	2000117c 	.word	0x2000117c

08001a9c <__sread>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa4:	f000 f8a0 	bl	8001be8 <_read_r>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	bfab      	itete	ge
 8001aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aae:	89a3      	ldrhlt	r3, [r4, #12]
 8001ab0:	181b      	addge	r3, r3, r0
 8001ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ab6:	bfac      	ite	ge
 8001ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001aba:	81a3      	strhlt	r3, [r4, #12]
 8001abc:	bd10      	pop	{r4, pc}

08001abe <__swrite>:
 8001abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac2:	461f      	mov	r7, r3
 8001ac4:	898b      	ldrh	r3, [r1, #12]
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	4605      	mov	r5, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	4616      	mov	r6, r2
 8001ace:	d505      	bpl.n	8001adc <__swrite+0x1e>
 8001ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f000 f868 	bl	8001bac <_lseek_r>
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae6:	81a3      	strh	r3, [r4, #12]
 8001ae8:	4632      	mov	r2, r6
 8001aea:	463b      	mov	r3, r7
 8001aec:	4628      	mov	r0, r5
 8001aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001af2:	f000 b817 	b.w	8001b24 <_write_r>

08001af6 <__sseek>:
 8001af6:	b510      	push	{r4, lr}
 8001af8:	460c      	mov	r4, r1
 8001afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afe:	f000 f855 	bl	8001bac <_lseek_r>
 8001b02:	1c43      	adds	r3, r0, #1
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	bf15      	itete	ne
 8001b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b12:	81a3      	strheq	r3, [r4, #12]
 8001b14:	bf18      	it	ne
 8001b16:	81a3      	strhne	r3, [r4, #12]
 8001b18:	bd10      	pop	{r4, pc}

08001b1a <__sclose>:
 8001b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b1e:	f000 b813 	b.w	8001b48 <_close_r>
	...

08001b24 <_write_r>:
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	4d07      	ldr	r5, [pc, #28]	; (8001b44 <_write_r+0x20>)
 8001b28:	4604      	mov	r4, r0
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	2200      	movs	r2, #0
 8001b30:	602a      	str	r2, [r5, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f7fe fe85 	bl	8000842 <_write>
 8001b38:	1c43      	adds	r3, r0, #1
 8001b3a:	d102      	bne.n	8001b42 <_write_r+0x1e>
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	b103      	cbz	r3, 8001b42 <_write_r+0x1e>
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	2000117c 	.word	0x2000117c

08001b48 <_close_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	4d06      	ldr	r5, [pc, #24]	; (8001b64 <_close_r+0x1c>)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	f7fe fe91 	bl	800087a <_close>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d102      	bne.n	8001b62 <_close_r+0x1a>
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	b103      	cbz	r3, 8001b62 <_close_r+0x1a>
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	2000117c 	.word	0x2000117c

08001b68 <_fstat_r>:
 8001b68:	b538      	push	{r3, r4, r5, lr}
 8001b6a:	4d07      	ldr	r5, [pc, #28]	; (8001b88 <_fstat_r+0x20>)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	602b      	str	r3, [r5, #0]
 8001b76:	f7fe fe8c 	bl	8000892 <_fstat>
 8001b7a:	1c43      	adds	r3, r0, #1
 8001b7c:	d102      	bne.n	8001b84 <_fstat_r+0x1c>
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	b103      	cbz	r3, 8001b84 <_fstat_r+0x1c>
 8001b82:	6023      	str	r3, [r4, #0]
 8001b84:	bd38      	pop	{r3, r4, r5, pc}
 8001b86:	bf00      	nop
 8001b88:	2000117c 	.word	0x2000117c

08001b8c <_isatty_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4d06      	ldr	r5, [pc, #24]	; (8001ba8 <_isatty_r+0x1c>)
 8001b90:	2300      	movs	r3, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	f7fe fe8b 	bl	80008b2 <_isatty>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	d102      	bne.n	8001ba6 <_isatty_r+0x1a>
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	b103      	cbz	r3, 8001ba6 <_isatty_r+0x1a>
 8001ba4:	6023      	str	r3, [r4, #0]
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
 8001ba8:	2000117c 	.word	0x2000117c

08001bac <_lseek_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4d07      	ldr	r5, [pc, #28]	; (8001bcc <_lseek_r+0x20>)
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	602a      	str	r2, [r5, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7fe fe84 	bl	80008c8 <_lseek>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	d102      	bne.n	8001bca <_lseek_r+0x1e>
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	b103      	cbz	r3, 8001bca <_lseek_r+0x1e>
 8001bc8:	6023      	str	r3, [r4, #0]
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	2000117c 	.word	0x2000117c

08001bd0 <__malloc_lock>:
 8001bd0:	4801      	ldr	r0, [pc, #4]	; (8001bd8 <__malloc_lock+0x8>)
 8001bd2:	f7ff b82a 	b.w	8000c2a <__retarget_lock_acquire_recursive>
 8001bd6:	bf00      	nop
 8001bd8:	20001170 	.word	0x20001170

08001bdc <__malloc_unlock>:
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <__malloc_unlock+0x8>)
 8001bde:	f7ff b825 	b.w	8000c2c <__retarget_lock_release_recursive>
 8001be2:	bf00      	nop
 8001be4:	20001170 	.word	0x20001170

08001be8 <_read_r>:
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4d07      	ldr	r5, [pc, #28]	; (8001c08 <_read_r+0x20>)
 8001bec:	4604      	mov	r4, r0
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	602a      	str	r2, [r5, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f7fe fe06 	bl	8000808 <_read>
 8001bfc:	1c43      	adds	r3, r0, #1
 8001bfe:	d102      	bne.n	8001c06 <_read_r+0x1e>
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	b103      	cbz	r3, 8001c06 <_read_r+0x1e>
 8001c04:	6023      	str	r3, [r4, #0]
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
 8001c08:	2000117c 	.word	0x2000117c

08001c0c <_init>:
 8001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0e:	bf00      	nop
 8001c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c12:	bc08      	pop	{r3}
 8001c14:	469e      	mov	lr, r3
 8001c16:	4770      	bx	lr

08001c18 <_fini>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	bf00      	nop
 8001c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1e:	bc08      	pop	{r3}
 8001c20:	469e      	mov	lr, r3
 8001c22:	4770      	bx	lr
