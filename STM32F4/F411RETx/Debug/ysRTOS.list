
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001920  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08001ac0  08001ac0  00011ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bcc  08001bcc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001bcc  08001bcc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bcc  08001bcc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bcc  08001bcc  00011bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  20000064  08001c38  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001170  08001c38  00021170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035d4  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cca  00000000  00000000  00023668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00024338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  000245d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f3e  00000000  00000000  000247c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000501e  00000000  00000000  000276fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005619b  00000000  00000000  0002c71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000828b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f4c  00000000  00000000  00082908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001aa8 	.word	0x08001aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001aa8 	.word	0x08001aa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EXTI15_10_IRQHandler>:

	__enable_irq();

}

void EXTI15_10_IRQHandler(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	EXTI->PR |= EXTI_PR13;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6153      	str	r3, [r2, #20]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40013c00 	.word	0x40013c00

080002a0 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <LED_INIT+0x34>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LED_INIT+0x34>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <LED_INIT+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <LED_INIT+0x38>)
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 11);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <LED_INIT+0x38>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <LED_INIT+0x38>)
 80002c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002c6:	6013      	str	r3, [r2, #0]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000

080002dc <__io_putchar>:
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);
void uart_tx_init(void);

int __io_putchar(int ch){ /* defined in syscalls.c */
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f000 f855 	bl	8000394 <uart_write>

	return ch;
 80002ea:	687b      	ldr	r3, [r7, #4]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <UART_INIT>:


void UART_INIT(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	uart_tx_init();
 80002f8:	f000 f802 	bl	8000300 <uart_tx_init>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <uart_tx_init>:

void uart_tx_init(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0


	RCC -> AHB1ENR |= GPIOAEN; /* enable clock access to GPIOA */
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <uart_tx_init+0x84>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a1e      	ldr	r2, [pc, #120]	; (8000384 <uart_tx_init+0x84>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set Pin 2 in GPIOA to alternate function mode */
	GPIOA -> MODER &= ~(1U << 4);
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <uart_tx_init+0x88>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <uart_tx_init+0x88>)
 8000316:	f023 0310 	bic.w	r3, r3, #16
 800031a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=  (1U << 5);
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <uart_tx_init+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a19      	ldr	r2, [pc, #100]	; (8000388 <uart_tx_init+0x88>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6013      	str	r3, [r2, #0]

	/* set alternate function type to AF07 (uart2_tx) */
	GPIOA -> AFR[0] |=  (1U << 8);
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <uart_tx_init+0x88>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <uart_tx_init+0x88>)
 800032e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000332:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 9);
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <uart_tx_init+0x88>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <uart_tx_init+0x88>)
 800033a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 10);
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <uart_tx_init+0x88>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <uart_tx_init+0x88>)
 8000346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <uart_tx_init+0x88>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <uart_tx_init+0x88>)
 8000352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000356:	6213      	str	r3, [r2, #32]

	RCC -> APB1ENR |= UART2EN; /* enable clock access to UART2 */
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <uart_tx_init+0x84>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <uart_tx_init+0x84>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000362:	6413      	str	r3, [r2, #64]	; 0x40

	set_uart_baudrate(APB1_CLK, UART_BAUDRATE); /* configure UART baudrate) */
 8000364:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000368:	4808      	ldr	r0, [pc, #32]	; (800038c <uart_tx_init+0x8c>)
 800036a:	f000 f82b 	bl	80003c4 <set_uart_baudrate>

	USART2 -> CR1 = CR1_TE; /* configure transfer direction */
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <uart_tx_init+0x90>)
 8000370:	2208      	movs	r2, #8
 8000372:	60da      	str	r2, [r3, #12]

	USART2 -> CR1 |= CR1_UE; /* enable UART module */
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <uart_tx_init+0x90>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <uart_tx_init+0x90>)
 800037a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800037e:	60d3      	str	r3, [r2, #12]

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40023800 	.word	0x40023800
 8000388:	40020000 	.word	0x40020000
 800038c:	00f42400 	.word	0x00f42400
 8000390:	40004400 	.word	0x40004400

08000394 <uart_write>:

static void uart_write(int ch){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 800039c:	bf00      	nop
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <uart_write+0x2c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <uart_write+0x2c>)
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	6053      	str	r3, [r2, #4]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40004400 	.word	0x40004400

080003c4 <set_uart_baudrate>:

static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = compute_uart_baudrate(periph_clk, baudrate);
 80003ce:	4c05      	ldr	r4, [pc, #20]	; (80003e4 <set_uart_baudrate+0x20>)
 80003d0:	6839      	ldr	r1, [r7, #0]
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f808 	bl	80003e8 <compute_uart_baudrate>
 80003d8:	4603      	mov	r3, r0
 80003da:	60a3      	str	r3, [r4, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40004400 	.word	0x40004400

080003e8 <compute_uart_baudrate>:

static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	085a      	lsrs	r2, r3, #1
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	441a      	add	r2, r3
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <__init__>:


#include "init.h"


void __init__(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000410:	f7ff ff46 	bl	80002a0 <LED_INIT>
	}
	if(__UART_INIT__ == 0x1){
		UART_INIT();
 8000414:	f7ff ff6e 	bl	80002f4 <UART_INIT>



	/* Initialise the kernel */

	kernel_init();
 8000418:	f000 f830 	bl	800047c <kernel_init>


}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	db0a      	blt.n	800044a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	490c      	ldr	r1, [pc, #48]	; (800046c <__NVIC_SetPriority+0x4c>)
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000448:	e00a      	b.n	8000460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4908      	ldr	r1, [pc, #32]	; (8000470 <__NVIC_SetPriority+0x50>)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	f003 030f 	and.w	r3, r3, #15
 8000456:	3b04      	subs	r3, #4
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	440b      	add	r3, r1
 800045e:	761a      	strb	r2, [r3, #24]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000e100 	.word	0xe000e100
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <_loop_>:

/*
 * Note: Thread ID is simply the index of the TCB_STACK in which the thread's content is stored.
 * */

void _loop_(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	/*
	 * If no threads are given, __current_ptr__ shall point at this function and run here until 'something' is done ;)
	 * */
	while(1){}
 8000478:	e7fe      	b.n	8000478 <_loop_+0x4>
	...

0800047c <kernel_init>:
}

void kernel_init(void){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <kernel_init+0x50>)
 8000482:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000486:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <kernel_init+0x54>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <kernel_init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <kernel_init+0x5c>)
 8000496:	2204      	movs	r2, #4
 8000498:	601a      	str	r2, [r3, #0]

	min_periodic_thread_id = MAX_THREADS;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <kernel_init+0x60>)
 800049c:	2205      	movs	r2, #5
 800049e:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <kernel_init+0x64>)
 80004a2:	2209      	movs	r2, #9
 80004a4:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <kernel_init+0x58>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <kernel_init+0x68>)
 80004ae:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <kernel_init+0x60>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <kernel_init+0x6c>)
 80004b8:	6013      	str	r3, [r2, #0]

	__current_ptr__ = NULL;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <kernel_init+0x70>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]

}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	2000113c 	.word	0x2000113c
 80004d0:	20001158 	.word	0x20001158
 80004d4:	20001148 	.word	0x20001148
 80004d8:	2000114c 	.word	0x2000114c
 80004dc:	20001150 	.word	0x20001150
 80004e0:	20001154 	.word	0x20001154
 80004e4:	20001140 	.word	0x20001140
 80004e8:	20001144 	.word	0x20001144
 80004ec:	20000198 	.word	0x20000198

080004f0 <stk_init>:

void stk_init(uint32_t thread_id){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <stk_init+0x50>)
 8000508:	1899      	adds	r1, r3, r2
 800050a:	480e      	ldr	r0, [pc, #56]	; (8000544 <stk_init+0x54>)
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4403      	add	r3, r0
 8000518:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <stk_init+0x50>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000522:	fb01 f303 	mul.w	r3, r1, r3
 8000526:	4413      	add	r3, r2
 8000528:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800052c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000530:	601a      	str	r2, [r3, #0]


			(FOR DEBUGGING PURPOSES)
		*/

}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000019c 	.word	0x2000019c
 8000544:	20000080 	.word	0x20000080

08000548 <kernel_launch>:

void kernel_launch(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <kernel_launch+0x6c>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <kernel_launch+0x6c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <kernel_launch+0x70>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	4413      	add	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <kernel_launch+0x6c>)
 8000566:	3b01      	subs	r3, #1
 8000568:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, SYSTICK_PRIO); /* Set SysTick to low-priority */
 800056a:	210f      	movs	r1, #15
 800056c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000570:	f7ff ff56 	bl	8000420 <__NVIC_SetPriority>
		NVIC_SetPriority(PendSV_IRQn,  PENDSV_PRIO); /* Set  PendSV to high-priority */
 8000574:	2100      	movs	r1, #0
 8000576:	f06f 0001 	mvn.w	r0, #1
 800057a:	f7ff ff51 	bl	8000420 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <kernel_launch+0x6c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <kernel_launch+0x6c>)
 8000584:	f043 0305 	orr.w	r3, r3, #5
 8000588:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <kernel_launch+0x6c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <kernel_launch+0x6c>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000596:	b672      	cpsid	i
}
 8000598:	bf00      	nop
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 800059a:	f000 f9f1 	bl	8000980 <tim2_1ms_interrupt_init>
		}


		if(__current_ptr__ == NULL){
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <kernel_launch+0x74>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d102      	bne.n	80005ac <kernel_launch+0x64>
			/* no threads specified, we spin in an infinite loop until processor is taken away */
			add_thread(&_loop_);
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <kernel_launch+0x78>)
 80005a8:	f000 f80c 	bl	80005c4 <add_thread>
		}

		scheduler_launch();
 80005ac:	f000 f8ae 	bl	800070c <scheduler_launch>




}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	e000e010 	.word	0xe000e010
 80005b8:	2000113c 	.word	0x2000113c
 80005bc:	20000198 	.word	0x20000198
 80005c0:	08000475 	.word	0x08000475

080005c4 <add_thread>:

tid_t add_thread(void (*thread)(void)){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 80005cc:	4b48      	ldr	r3, [pc, #288]	; (80006f0 <add_thread+0x12c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <add_thread+0x130>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d10a      	bne.n	80005ee <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <add_thread+0x134>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	1d3a      	adds	r2, r7, #4
 80005e0:	4946      	ldr	r1, [pc, #280]	; (80006fc <add_thread+0x138>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 faac 	bl	8000b40 <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fa95 	bl	8000b18 <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <add_thread+0x12c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80005f6:	b672      	cpsid	i
}
 80005f8:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 80005fa:	4941      	ldr	r1, [pc, #260]	; (8000700 <add_thread+0x13c>)
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	3308      	adds	r3, #8
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 800060e:	493c      	ldr	r1, [pc, #240]	; (8000700 <add_thread+0x13c>)
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	4613      	mov	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	330c      	adds	r3, #12
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0xffffffff; /* non periodic threads */
 8000622:	4937      	ldr	r1, [pc, #220]	; (8000700 <add_thread+0x13c>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4613      	mov	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3310      	adds	r3, #16
 8000632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000636:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 8000638:	4931      	ldr	r1, [pc, #196]	; (8000700 <add_thread+0x13c>)
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3314      	adds	r3, #20
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
	__tcbs__[thread_id].periodic_task = NULL;
 800064c:	492c      	ldr	r1, [pc, #176]	; (8000700 <add_thread+0x13c>)
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4613      	mov	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	440b      	add	r3, r1
 800065a:	3318      	adds	r3, #24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ff45 	bl	80004f0 <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4618      	mov	r0, r3
 800066a:	4a26      	ldr	r2, [pc, #152]	; (8000704 <add_thread+0x140>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	4413      	add	r3, r2
 8000678:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800067c:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <add_thread+0xce>
		__current_ptr__ = &__tcbs__[0];
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <add_thread+0x144>)
 8000686:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <add_thread+0x13c>)
 8000688:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <add_thread+0x13c>)
 800068c:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <add_thread+0x13c>)
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	e023      	b.n	80006da <add_thread+0x116>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <add_thread+0x12c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	491a      	ldr	r1, [pc, #104]	; (8000700 <add_thread+0x13c>)
 8000698:	4613      	mov	r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	3304      	adds	r3, #4
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <add_thread+0x13c>)
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4613      	mov	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4403      	add	r3, r0
 80006b4:	3304      	adds	r3, #4
 80006b6:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <add_thread+0x12c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	460b      	mov	r3, r1
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	1a5b      	subs	r3, r3, r1
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <add_thread+0x13c>)
 80006c8:	4419      	add	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <add_thread+0x13c>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4403      	add	r3, r0
 80006d6:	3304      	adds	r3, #4
 80006d8:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <add_thread+0x12c>)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006e0:	b662      	cpsie	i
}
 80006e2:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


	return thread_id;
 80006e4:	68fb      	ldr	r3, [r7, #12]

}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20001140 	.word	0x20001140
 80006f4:	2000114c 	.word	0x2000114c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08001ac0 	.word	0x08001ac0
 8000700:	20000080 	.word	0x20000080
 8000704:	2000019c 	.word	0x2000019c
 8000708:	20000198 	.word	0x20000198

0800070c <scheduler_launch>:
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */
#define ICSR_PENDSVSET		(1U << 28) 		/* PendSV  Exception pending bit*/


void scheduler_launch(void){
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 8000712:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 8000714:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 8000718:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 800071c:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 8000720:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 8000722:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 8000724:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 8000728:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 800072a:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 800072c:	4770      	bx	lr

}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	20000198 	.word	0x20000198

0800073c <PendSV_Handler>:

	/* PendSV_Handler shall be handling the context switch process
	 * in the future versions of the RTOS.
	 */

}
 800073c:	bf00      	nop
	...

08000740 <SysTick_Handler>:
		 *	-> Restore all the Registers.
		 * */

		/* SUSPEND CURRENT THREAD */

		__asm("CPSID I");		/* disable global interrupts */
 8000740:	b672      	cpsid	i
		__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 8000742:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <SysTick_Handler+0x20>)
		__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 8000748:	6801      	ldr	r1, [r0, #0]
		__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 800074a:	f8c1 d000 	str.w	sp, [r1]


		/* CHOOSE NEXT THREAD */

		__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 800074e:	6849      	ldr	r1, [r1, #4]
		__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 8000750:	6001      	str	r1, [r0, #0]
		__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 8000752:	f8d1 d000 	ldr.w	sp, [r1]
		__asm("POP {R4-R11}");			/* restore r4-r11 */
 8000756:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("CPSIE I");				/* enable global interrupts */
 800075a:	b662      	cpsie	i
		__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 800075c:	4770      	bx	lr


		//	ICSR |= ICSR_PENDSVSET; /* Trigger the PendSV interrupt handler to perform the context switch.*/
}
 800075e:	bf00      	nop
 8000760:	20000198 	.word	0x20000198

08000764 <main>:
#include "ysAPI/ysRTOS.h"



int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	 * */




	__init__(); /* ysRTOS initialisation */
 8000768:	f7ff fe50 	bl	800040c <__init__>
	/*  */




	kernel_launch();
 800076c:	f7ff feec 	bl	8000548 <kernel_launch>
 8000770:	2300      	movs	r3, #0


}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}

08000776 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000780:	f000 f9c4 	bl	8000b0c <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	2216      	movs	r2, #22
 8000788:	601a      	str	r2, [r3, #0]
  return -1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_exit>:

void _exit (int status)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800079e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffe7 	bl	8000776 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007a8:	e7fe      	b.n	80007a8 <_exit+0x12>

080007aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	e00a      	b.n	80007d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007bc:	f3af 8000 	nop.w
 80007c0:	4601      	mov	r1, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	60ba      	str	r2, [r7, #8]
 80007c8:	b2ca      	uxtb	r2, r1
 80007ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbf0      	blt.n	80007bc <_read+0x12>
  }

  return len;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e009      	b.n	800080a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	60ba      	str	r2, [r7, #8]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fd6c 	bl	80002dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	dbf1      	blt.n	80007f6 <_write+0x12>
  }
  return len;
 8000812:	687b      	ldr	r3, [r7, #4]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_close>:

int _close(int file)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000844:	605a      	str	r2, [r3, #4]
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_isatty>:

int _isatty(int file)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f000 f92a 	bl	8000b0c <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20020000 	.word	0x20020000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	2000115c 	.word	0x2000115c
 80008ec:	20001170 	.word	0x20001170

080008f0 <__NVIC_EnableIRQ>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <tim2_1ms_interrupt_init+0x54>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <tim2_1ms_interrupt_init+0x54>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600 - 1;	 /*Set timer prescaler*/
 8000990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000994:	f240 623f 	movw	r2, #1599	; 0x63f
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 800099a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099e:	2209      	movs	r2, #9
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 80009a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 80009aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 80009b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 80009c2:	201c      	movs	r0, #28
 80009c4:	f7ff ff94 	bl	80008f0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,TIM2_PRIO);
 80009c8:	2107      	movs	r1, #7
 80009ca:	201c      	movs	r0, #28
 80009cc:	f7ff ffae 	bl	800092c <__NVIC_SetPriority>


}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800

080009d8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <TIM2_IRQHandler+0xc8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <TIM2_IRQHandler+0xcc>)
 80009e6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ea:	0a9b      	lsrs	r3, r3, #10
 80009ec:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <TIM2_IRQHandler+0xc8>)
 80009f8:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 80009fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0a:	b672      	cpsid	i
}
 8000a0c:	bf00      	nop

	__disable_irq();

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <TIM2_IRQHandler+0xd0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	e038      	b.n	8000a88 <TIM2_IRQHandler+0xb0>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000a16:	4925      	ldr	r1, [pc, #148]	; (8000aac <TIM2_IRQHandler+0xd4>)
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	1a9b      	subs	r3, r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	3314      	adds	r3, #20
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d12a      	bne.n	8000a82 <TIM2_IRQHandler+0xaa>
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000a2c:	491f      	ldr	r1, [pc, #124]	; (8000aac <TIM2_IRQHandler+0xd4>)
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4613      	mov	r3, r2
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	1a9b      	subs	r3, r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	440b      	add	r3, r1
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	681b      	ldr	r3, [r3, #0]
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d01f      	beq.n	8000a82 <TIM2_IRQHandler+0xaa>
		   (sys_counter % __tcbs__[current_thread_id].period == 0)){
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <TIM2_IRQHandler+0xc8>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4819      	ldr	r0, [pc, #100]	; (8000aac <TIM2_IRQHandler+0xd4>)
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	1a5b      	subs	r3, r3, r1
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4403      	add	r3, r0
 8000a54:	3310      	adds	r3, #16
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	fbb2 f1f3 	udiv	r1, r2, r3
 8000a5c:	fb01 f303 	mul.w	r3, r1, r3
 8000a60:	1ad3      	subs	r3, r2, r3
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10d      	bne.n	8000a82 <TIM2_IRQHandler+0xaa>

				SysTick->VAL = SysTick->LOAD;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <TIM2_IRQHandler+0xd8>)
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <TIM2_IRQHandler+0xd8>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	6093      	str	r3, [r2, #8]
				__tcbs__[current_thread_id].periodic_task();
 8000a6e:	490f      	ldr	r1, [pc, #60]	; (8000aac <TIM2_IRQHandler+0xd4>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4798      	blx	r3
			current_thread_id++)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3301      	adds	r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <TIM2_IRQHandler+0xdc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d9c1      	bls.n	8000a16 <TIM2_IRQHandler+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a92:	b662      	cpsie	i
}
 8000a94:	bf00      	nop
		}
	}

	__enable_irq();

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20001158 	.word	0x20001158
 8000aa4:	10624dd3 	.word	0x10624dd3
 8000aa8:	20001150 	.word	0x20001150
 8000aac:	20000080 	.word	0x20000080
 8000ab0:	e000e010 	.word	0xe000e010
 8000ab4:	20001154 	.word	0x20001154

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f000 f83d 	bl	8000b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fe3b 	bl	8000764 <main>

08000aee <LoopForever>:

LoopForever:
  b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000afc:	08001bd4 	.word	0x08001bd4
  ldr r2, =_sbss
 8000b00:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b04:	20001170 	.word	0x20001170

08000b08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <__errno>:
 8000b0c:	4b01      	ldr	r3, [pc, #4]	; (8000b14 <__errno+0x8>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <exit>:
 8000b18:	b508      	push	{r3, lr}
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <exit+0x20>)
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	b113      	cbz	r3, 8000b26 <exit+0xe>
 8000b20:	2100      	movs	r1, #0
 8000b22:	f3af 8000 	nop.w
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <exit+0x24>)
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b2c:	b103      	cbz	r3, 8000b30 <exit+0x18>
 8000b2e:	4798      	blx	r3
 8000b30:	4620      	mov	r0, r4
 8000b32:	f7ff fe30 	bl	8000796 <_exit>
 8000b36:	bf00      	nop
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	08001b34 	.word	0x08001b34

08000b40 <fiprintf>:
 8000b40:	b40e      	push	{r1, r2, r3}
 8000b42:	b503      	push	{r0, r1, lr}
 8000b44:	4601      	mov	r1, r0
 8000b46:	ab03      	add	r3, sp, #12
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <fiprintf+0x20>)
 8000b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b4e:	6800      	ldr	r0, [r0, #0]
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f000 f85d 	bl	8000c10 <_vfiprintf_r>
 8000b56:	b002      	add	sp, #8
 8000b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b5c:	b003      	add	sp, #12
 8000b5e:	4770      	bx	lr
 8000b60:	20000000 	.word	0x20000000

08000b64 <__libc_init_array>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4d0d      	ldr	r5, [pc, #52]	; (8000b9c <__libc_init_array+0x38>)
 8000b68:	4c0d      	ldr	r4, [pc, #52]	; (8000ba0 <__libc_init_array+0x3c>)
 8000b6a:	1b64      	subs	r4, r4, r5
 8000b6c:	10a4      	asrs	r4, r4, #2
 8000b6e:	2600      	movs	r6, #0
 8000b70:	42a6      	cmp	r6, r4
 8000b72:	d109      	bne.n	8000b88 <__libc_init_array+0x24>
 8000b74:	4d0b      	ldr	r5, [pc, #44]	; (8000ba4 <__libc_init_array+0x40>)
 8000b76:	4c0c      	ldr	r4, [pc, #48]	; (8000ba8 <__libc_init_array+0x44>)
 8000b78:	f000 ff96 	bl	8001aa8 <_init>
 8000b7c:	1b64      	subs	r4, r4, r5
 8000b7e:	10a4      	asrs	r4, r4, #2
 8000b80:	2600      	movs	r6, #0
 8000b82:	42a6      	cmp	r6, r4
 8000b84:	d105      	bne.n	8000b92 <__libc_init_array+0x2e>
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b8c:	4798      	blx	r3
 8000b8e:	3601      	adds	r6, #1
 8000b90:	e7ee      	b.n	8000b70 <__libc_init_array+0xc>
 8000b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b96:	4798      	blx	r3
 8000b98:	3601      	adds	r6, #1
 8000b9a:	e7f2      	b.n	8000b82 <__libc_init_array+0x1e>
 8000b9c:	08001bcc 	.word	0x08001bcc
 8000ba0:	08001bcc 	.word	0x08001bcc
 8000ba4:	08001bcc 	.word	0x08001bcc
 8000ba8:	08001bd0 	.word	0x08001bd0

08000bac <memset>:
 8000bac:	4402      	add	r2, r0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d100      	bne.n	8000bb6 <memset+0xa>
 8000bb4:	4770      	bx	lr
 8000bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8000bba:	e7f9      	b.n	8000bb0 <memset+0x4>

08000bbc <__sfputc_r>:
 8000bbc:	6893      	ldr	r3, [r2, #8]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	b410      	push	{r4}
 8000bc4:	6093      	str	r3, [r2, #8]
 8000bc6:	da08      	bge.n	8000bda <__sfputc_r+0x1e>
 8000bc8:	6994      	ldr	r4, [r2, #24]
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	db01      	blt.n	8000bd2 <__sfputc_r+0x16>
 8000bce:	290a      	cmp	r1, #10
 8000bd0:	d103      	bne.n	8000bda <__sfputc_r+0x1e>
 8000bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bd6:	f000 badf 	b.w	8001198 <__swbuf_r>
 8000bda:	6813      	ldr	r3, [r2, #0]
 8000bdc:	1c58      	adds	r0, r3, #1
 8000bde:	6010      	str	r0, [r2, #0]
 8000be0:	7019      	strb	r1, [r3, #0]
 8000be2:	4608      	mov	r0, r1
 8000be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <__sfputs_r>:
 8000bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bec:	4606      	mov	r6, r0
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4614      	mov	r4, r2
 8000bf2:	18d5      	adds	r5, r2, r3
 8000bf4:	42ac      	cmp	r4, r5
 8000bf6:	d101      	bne.n	8000bfc <__sfputs_r+0x12>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	e007      	b.n	8000c0c <__sfputs_r+0x22>
 8000bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c00:	463a      	mov	r2, r7
 8000c02:	4630      	mov	r0, r6
 8000c04:	f7ff ffda 	bl	8000bbc <__sfputc_r>
 8000c08:	1c43      	adds	r3, r0, #1
 8000c0a:	d1f3      	bne.n	8000bf4 <__sfputs_r+0xa>
 8000c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c10 <_vfiprintf_r>:
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c14:	460d      	mov	r5, r1
 8000c16:	b09d      	sub	sp, #116	; 0x74
 8000c18:	4614      	mov	r4, r2
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	b118      	cbz	r0, 8000c28 <_vfiprintf_r+0x18>
 8000c20:	6983      	ldr	r3, [r0, #24]
 8000c22:	b90b      	cbnz	r3, 8000c28 <_vfiprintf_r+0x18>
 8000c24:	f000 fc92 	bl	800154c <__sinit>
 8000c28:	4b89      	ldr	r3, [pc, #548]	; (8000e50 <_vfiprintf_r+0x240>)
 8000c2a:	429d      	cmp	r5, r3
 8000c2c:	d11b      	bne.n	8000c66 <_vfiprintf_r+0x56>
 8000c2e:	6875      	ldr	r5, [r6, #4]
 8000c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c32:	07d9      	lsls	r1, r3, #31
 8000c34:	d405      	bmi.n	8000c42 <_vfiprintf_r+0x32>
 8000c36:	89ab      	ldrh	r3, [r5, #12]
 8000c38:	059a      	lsls	r2, r3, #22
 8000c3a:	d402      	bmi.n	8000c42 <_vfiprintf_r+0x32>
 8000c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c3e:	f000 fd23 	bl	8001688 <__retarget_lock_acquire_recursive>
 8000c42:	89ab      	ldrh	r3, [r5, #12]
 8000c44:	071b      	lsls	r3, r3, #28
 8000c46:	d501      	bpl.n	8000c4c <_vfiprintf_r+0x3c>
 8000c48:	692b      	ldr	r3, [r5, #16]
 8000c4a:	b9eb      	cbnz	r3, 8000c88 <_vfiprintf_r+0x78>
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4630      	mov	r0, r6
 8000c50:	f000 faf4 	bl	800123c <__swsetup_r>
 8000c54:	b1c0      	cbz	r0, 8000c88 <_vfiprintf_r+0x78>
 8000c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c58:	07dc      	lsls	r4, r3, #31
 8000c5a:	d50e      	bpl.n	8000c7a <_vfiprintf_r+0x6a>
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	b01d      	add	sp, #116	; 0x74
 8000c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c66:	4b7b      	ldr	r3, [pc, #492]	; (8000e54 <_vfiprintf_r+0x244>)
 8000c68:	429d      	cmp	r5, r3
 8000c6a:	d101      	bne.n	8000c70 <_vfiprintf_r+0x60>
 8000c6c:	68b5      	ldr	r5, [r6, #8]
 8000c6e:	e7df      	b.n	8000c30 <_vfiprintf_r+0x20>
 8000c70:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <_vfiprintf_r+0x248>)
 8000c72:	429d      	cmp	r5, r3
 8000c74:	bf08      	it	eq
 8000c76:	68f5      	ldreq	r5, [r6, #12]
 8000c78:	e7da      	b.n	8000c30 <_vfiprintf_r+0x20>
 8000c7a:	89ab      	ldrh	r3, [r5, #12]
 8000c7c:	0598      	lsls	r0, r3, #22
 8000c7e:	d4ed      	bmi.n	8000c5c <_vfiprintf_r+0x4c>
 8000c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c82:	f000 fd02 	bl	800168a <__retarget_lock_release_recursive>
 8000c86:	e7e9      	b.n	8000c5c <_vfiprintf_r+0x4c>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c96:	2330      	movs	r3, #48	; 0x30
 8000c98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e5c <_vfiprintf_r+0x24c>
 8000c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ca0:	f04f 0901 	mov.w	r9, #1
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cac:	b10a      	cbz	r2, 8000cb2 <_vfiprintf_r+0xa2>
 8000cae:	2a25      	cmp	r2, #37	; 0x25
 8000cb0:	d1f9      	bne.n	8000ca6 <_vfiprintf_r+0x96>
 8000cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8000cb6:	d00b      	beq.n	8000cd0 <_vfiprintf_r+0xc0>
 8000cb8:	465b      	mov	r3, fp
 8000cba:	4622      	mov	r2, r4
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff ff93 	bl	8000bea <__sfputs_r>
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	f000 80aa 	beq.w	8000e1e <_vfiprintf_r+0x20e>
 8000cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ccc:	445a      	add	r2, fp
 8000cce:	9209      	str	r2, [sp, #36]	; 0x24
 8000cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80a2 	beq.w	8000e1e <_vfiprintf_r+0x20e>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ce4:	f10a 0a01 	add.w	sl, sl, #1
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	9307      	str	r3, [sp, #28]
 8000cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8000cf2:	4654      	mov	r4, sl
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cfa:	4858      	ldr	r0, [pc, #352]	; (8000e5c <_vfiprintf_r+0x24c>)
 8000cfc:	f7ff fa70 	bl	80001e0 <memchr>
 8000d00:	9a04      	ldr	r2, [sp, #16]
 8000d02:	b9d8      	cbnz	r0, 8000d3c <_vfiprintf_r+0x12c>
 8000d04:	06d1      	lsls	r1, r2, #27
 8000d06:	bf44      	itt	mi
 8000d08:	2320      	movmi	r3, #32
 8000d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d0e:	0713      	lsls	r3, r2, #28
 8000d10:	bf44      	itt	mi
 8000d12:	232b      	movmi	r3, #43	; 0x2b
 8000d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d18:	f89a 3000 	ldrb.w	r3, [sl]
 8000d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000d1e:	d015      	beq.n	8000d4c <_vfiprintf_r+0x13c>
 8000d20:	9a07      	ldr	r2, [sp, #28]
 8000d22:	4654      	mov	r4, sl
 8000d24:	2000      	movs	r0, #0
 8000d26:	f04f 0c0a 	mov.w	ip, #10
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	2b09      	cmp	r3, #9
 8000d34:	d94e      	bls.n	8000dd4 <_vfiprintf_r+0x1c4>
 8000d36:	b1b0      	cbz	r0, 8000d66 <_vfiprintf_r+0x156>
 8000d38:	9207      	str	r2, [sp, #28]
 8000d3a:	e014      	b.n	8000d66 <_vfiprintf_r+0x156>
 8000d3c:	eba0 0308 	sub.w	r3, r0, r8
 8000d40:	fa09 f303 	lsl.w	r3, r9, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	9304      	str	r3, [sp, #16]
 8000d48:	46a2      	mov	sl, r4
 8000d4a:	e7d2      	b.n	8000cf2 <_vfiprintf_r+0xe2>
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	1d19      	adds	r1, r3, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	9103      	str	r1, [sp, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bfbb      	ittet	lt
 8000d58:	425b      	neglt	r3, r3
 8000d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000d5e:	9307      	strge	r3, [sp, #28]
 8000d60:	9307      	strlt	r3, [sp, #28]
 8000d62:	bfb8      	it	lt
 8000d64:	9204      	strlt	r2, [sp, #16]
 8000d66:	7823      	ldrb	r3, [r4, #0]
 8000d68:	2b2e      	cmp	r3, #46	; 0x2e
 8000d6a:	d10c      	bne.n	8000d86 <_vfiprintf_r+0x176>
 8000d6c:	7863      	ldrb	r3, [r4, #1]
 8000d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d70:	d135      	bne.n	8000dde <_vfiprintf_r+0x1ce>
 8000d72:	9b03      	ldr	r3, [sp, #12]
 8000d74:	1d1a      	adds	r2, r3, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	9203      	str	r2, [sp, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bfb8      	it	lt
 8000d7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d82:	3402      	adds	r4, #2
 8000d84:	9305      	str	r3, [sp, #20]
 8000d86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000e6c <_vfiprintf_r+0x25c>
 8000d8a:	7821      	ldrb	r1, [r4, #0]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4650      	mov	r0, sl
 8000d90:	f7ff fa26 	bl	80001e0 <memchr>
 8000d94:	b140      	cbz	r0, 8000da8 <_vfiprintf_r+0x198>
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	eba0 000a 	sub.w	r0, r0, sl
 8000d9c:	fa03 f000 	lsl.w	r0, r3, r0
 8000da0:	9b04      	ldr	r3, [sp, #16]
 8000da2:	4303      	orrs	r3, r0
 8000da4:	3401      	adds	r4, #1
 8000da6:	9304      	str	r3, [sp, #16]
 8000da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dac:	482c      	ldr	r0, [pc, #176]	; (8000e60 <_vfiprintf_r+0x250>)
 8000dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000db2:	2206      	movs	r2, #6
 8000db4:	f7ff fa14 	bl	80001e0 <memchr>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d03f      	beq.n	8000e3c <_vfiprintf_r+0x22c>
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <_vfiprintf_r+0x254>)
 8000dbe:	bb1b      	cbnz	r3, 8000e08 <_vfiprintf_r+0x1f8>
 8000dc0:	9b03      	ldr	r3, [sp, #12]
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	f023 0307 	bic.w	r3, r3, #7
 8000dc8:	3308      	adds	r3, #8
 8000dca:	9303      	str	r3, [sp, #12]
 8000dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dce:	443b      	add	r3, r7
 8000dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8000dd2:	e767      	b.n	8000ca4 <_vfiprintf_r+0x94>
 8000dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dd8:	460c      	mov	r4, r1
 8000dda:	2001      	movs	r0, #1
 8000ddc:	e7a5      	b.n	8000d2a <_vfiprintf_r+0x11a>
 8000dde:	2300      	movs	r3, #0
 8000de0:	3401      	adds	r4, #1
 8000de2:	9305      	str	r3, [sp, #20]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 0c0a 	mov.w	ip, #10
 8000dea:	4620      	mov	r0, r4
 8000dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000df0:	3a30      	subs	r2, #48	; 0x30
 8000df2:	2a09      	cmp	r2, #9
 8000df4:	d903      	bls.n	8000dfe <_vfiprintf_r+0x1ee>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0c5      	beq.n	8000d86 <_vfiprintf_r+0x176>
 8000dfa:	9105      	str	r1, [sp, #20]
 8000dfc:	e7c3      	b.n	8000d86 <_vfiprintf_r+0x176>
 8000dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e02:	4604      	mov	r4, r0
 8000e04:	2301      	movs	r3, #1
 8000e06:	e7f0      	b.n	8000dea <_vfiprintf_r+0x1da>
 8000e08:	ab03      	add	r3, sp, #12
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	462a      	mov	r2, r5
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <_vfiprintf_r+0x258>)
 8000e10:	a904      	add	r1, sp, #16
 8000e12:	4630      	mov	r0, r6
 8000e14:	f3af 8000 	nop.w
 8000e18:	4607      	mov	r7, r0
 8000e1a:	1c78      	adds	r0, r7, #1
 8000e1c:	d1d6      	bne.n	8000dcc <_vfiprintf_r+0x1bc>
 8000e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e20:	07d9      	lsls	r1, r3, #31
 8000e22:	d405      	bmi.n	8000e30 <_vfiprintf_r+0x220>
 8000e24:	89ab      	ldrh	r3, [r5, #12]
 8000e26:	059a      	lsls	r2, r3, #22
 8000e28:	d402      	bmi.n	8000e30 <_vfiprintf_r+0x220>
 8000e2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e2c:	f000 fc2d 	bl	800168a <__retarget_lock_release_recursive>
 8000e30:	89ab      	ldrh	r3, [r5, #12]
 8000e32:	065b      	lsls	r3, r3, #25
 8000e34:	f53f af12 	bmi.w	8000c5c <_vfiprintf_r+0x4c>
 8000e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e3a:	e711      	b.n	8000c60 <_vfiprintf_r+0x50>
 8000e3c:	ab03      	add	r3, sp, #12
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	462a      	mov	r2, r5
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <_vfiprintf_r+0x258>)
 8000e44:	a904      	add	r1, sp, #16
 8000e46:	4630      	mov	r0, r6
 8000e48:	f000 f880 	bl	8000f4c <_printf_i>
 8000e4c:	e7e4      	b.n	8000e18 <_vfiprintf_r+0x208>
 8000e4e:	bf00      	nop
 8000e50:	08001b8c 	.word	0x08001b8c
 8000e54:	08001bac 	.word	0x08001bac
 8000e58:	08001b6c 	.word	0x08001b6c
 8000e5c:	08001b38 	.word	0x08001b38
 8000e60:	08001b42 	.word	0x08001b42
 8000e64:	00000000 	.word	0x00000000
 8000e68:	08000beb 	.word	0x08000beb
 8000e6c:	08001b3e 	.word	0x08001b3e

08000e70 <_printf_common>:
 8000e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e74:	4616      	mov	r6, r2
 8000e76:	4699      	mov	r9, r3
 8000e78:	688a      	ldr	r2, [r1, #8]
 8000e7a:	690b      	ldr	r3, [r1, #16]
 8000e7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e80:	4293      	cmp	r3, r2
 8000e82:	bfb8      	it	lt
 8000e84:	4613      	movlt	r3, r2
 8000e86:	6033      	str	r3, [r6, #0]
 8000e88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	b10a      	cbz	r2, 8000e96 <_printf_common+0x26>
 8000e92:	3301      	adds	r3, #1
 8000e94:	6033      	str	r3, [r6, #0]
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	0699      	lsls	r1, r3, #26
 8000e9a:	bf42      	ittt	mi
 8000e9c:	6833      	ldrmi	r3, [r6, #0]
 8000e9e:	3302      	addmi	r3, #2
 8000ea0:	6033      	strmi	r3, [r6, #0]
 8000ea2:	6825      	ldr	r5, [r4, #0]
 8000ea4:	f015 0506 	ands.w	r5, r5, #6
 8000ea8:	d106      	bne.n	8000eb8 <_printf_common+0x48>
 8000eaa:	f104 0a19 	add.w	sl, r4, #25
 8000eae:	68e3      	ldr	r3, [r4, #12]
 8000eb0:	6832      	ldr	r2, [r6, #0]
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	dc26      	bgt.n	8000f06 <_printf_common+0x96>
 8000eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ebc:	1e13      	subs	r3, r2, #0
 8000ebe:	6822      	ldr	r2, [r4, #0]
 8000ec0:	bf18      	it	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	0692      	lsls	r2, r2, #26
 8000ec6:	d42b      	bmi.n	8000f20 <_printf_common+0xb0>
 8000ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ecc:	4649      	mov	r1, r9
 8000ece:	4638      	mov	r0, r7
 8000ed0:	47c0      	blx	r8
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d01e      	beq.n	8000f14 <_printf_common+0xa4>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	68e5      	ldr	r5, [r4, #12]
 8000eda:	6832      	ldr	r2, [r6, #0]
 8000edc:	f003 0306 	and.w	r3, r3, #6
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	bf08      	it	eq
 8000ee4:	1aad      	subeq	r5, r5, r2
 8000ee6:	68a3      	ldr	r3, [r4, #8]
 8000ee8:	6922      	ldr	r2, [r4, #16]
 8000eea:	bf0c      	ite	eq
 8000eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ef0:	2500      	movne	r5, #0
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	bfc4      	itt	gt
 8000ef6:	1a9b      	subgt	r3, r3, r2
 8000ef8:	18ed      	addgt	r5, r5, r3
 8000efa:	2600      	movs	r6, #0
 8000efc:	341a      	adds	r4, #26
 8000efe:	42b5      	cmp	r5, r6
 8000f00:	d11a      	bne.n	8000f38 <_printf_common+0xc8>
 8000f02:	2000      	movs	r0, #0
 8000f04:	e008      	b.n	8000f18 <_printf_common+0xa8>
 8000f06:	2301      	movs	r3, #1
 8000f08:	4652      	mov	r2, sl
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	47c0      	blx	r8
 8000f10:	3001      	adds	r0, #1
 8000f12:	d103      	bne.n	8000f1c <_printf_common+0xac>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1c:	3501      	adds	r5, #1
 8000f1e:	e7c6      	b.n	8000eae <_printf_common+0x3e>
 8000f20:	18e1      	adds	r1, r4, r3
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	2030      	movs	r0, #48	; 0x30
 8000f26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f2a:	4422      	add	r2, r4
 8000f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f34:	3302      	adds	r3, #2
 8000f36:	e7c7      	b.n	8000ec8 <_printf_common+0x58>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	4638      	mov	r0, r7
 8000f40:	47c0      	blx	r8
 8000f42:	3001      	adds	r0, #1
 8000f44:	d0e6      	beq.n	8000f14 <_printf_common+0xa4>
 8000f46:	3601      	adds	r6, #1
 8000f48:	e7d9      	b.n	8000efe <_printf_common+0x8e>
	...

08000f4c <_printf_i>:
 8000f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f50:	7e0f      	ldrb	r7, [r1, #24]
 8000f52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f54:	2f78      	cmp	r7, #120	; 0x78
 8000f56:	4691      	mov	r9, r2
 8000f58:	4680      	mov	r8, r0
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f62:	d807      	bhi.n	8000f74 <_printf_i+0x28>
 8000f64:	2f62      	cmp	r7, #98	; 0x62
 8000f66:	d80a      	bhi.n	8000f7e <_printf_i+0x32>
 8000f68:	2f00      	cmp	r7, #0
 8000f6a:	f000 80d8 	beq.w	800111e <_printf_i+0x1d2>
 8000f6e:	2f58      	cmp	r7, #88	; 0x58
 8000f70:	f000 80a3 	beq.w	80010ba <_printf_i+0x16e>
 8000f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f7c:	e03a      	b.n	8000ff4 <_printf_i+0xa8>
 8000f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f82:	2b15      	cmp	r3, #21
 8000f84:	d8f6      	bhi.n	8000f74 <_printf_i+0x28>
 8000f86:	a101      	add	r1, pc, #4	; (adr r1, 8000f8c <_printf_i+0x40>)
 8000f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f8c:	08000fe5 	.word	0x08000fe5
 8000f90:	08000ff9 	.word	0x08000ff9
 8000f94:	08000f75 	.word	0x08000f75
 8000f98:	08000f75 	.word	0x08000f75
 8000f9c:	08000f75 	.word	0x08000f75
 8000fa0:	08000f75 	.word	0x08000f75
 8000fa4:	08000ff9 	.word	0x08000ff9
 8000fa8:	08000f75 	.word	0x08000f75
 8000fac:	08000f75 	.word	0x08000f75
 8000fb0:	08000f75 	.word	0x08000f75
 8000fb4:	08000f75 	.word	0x08000f75
 8000fb8:	08001105 	.word	0x08001105
 8000fbc:	08001029 	.word	0x08001029
 8000fc0:	080010e7 	.word	0x080010e7
 8000fc4:	08000f75 	.word	0x08000f75
 8000fc8:	08000f75 	.word	0x08000f75
 8000fcc:	08001127 	.word	0x08001127
 8000fd0:	08000f75 	.word	0x08000f75
 8000fd4:	08001029 	.word	0x08001029
 8000fd8:	08000f75 	.word	0x08000f75
 8000fdc:	08000f75 	.word	0x08000f75
 8000fe0:	080010ef 	.word	0x080010ef
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	1d1a      	adds	r2, r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	602a      	str	r2, [r5, #0]
 8000fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0a3      	b.n	8001140 <_printf_i+0x1f4>
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	6829      	ldr	r1, [r5, #0]
 8000ffc:	0606      	lsls	r6, r0, #24
 8000ffe:	f101 0304 	add.w	r3, r1, #4
 8001002:	d50a      	bpl.n	800101a <_printf_i+0xce>
 8001004:	680e      	ldr	r6, [r1, #0]
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	2e00      	cmp	r6, #0
 800100a:	da03      	bge.n	8001014 <_printf_i+0xc8>
 800100c:	232d      	movs	r3, #45	; 0x2d
 800100e:	4276      	negs	r6, r6
 8001010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001014:	485e      	ldr	r0, [pc, #376]	; (8001190 <_printf_i+0x244>)
 8001016:	230a      	movs	r3, #10
 8001018:	e019      	b.n	800104e <_printf_i+0x102>
 800101a:	680e      	ldr	r6, [r1, #0]
 800101c:	602b      	str	r3, [r5, #0]
 800101e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001022:	bf18      	it	ne
 8001024:	b236      	sxthne	r6, r6
 8001026:	e7ef      	b.n	8001008 <_printf_i+0xbc>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	1d19      	adds	r1, r3, #4
 800102e:	6029      	str	r1, [r5, #0]
 8001030:	0601      	lsls	r1, r0, #24
 8001032:	d501      	bpl.n	8001038 <_printf_i+0xec>
 8001034:	681e      	ldr	r6, [r3, #0]
 8001036:	e002      	b.n	800103e <_printf_i+0xf2>
 8001038:	0646      	lsls	r6, r0, #25
 800103a:	d5fb      	bpl.n	8001034 <_printf_i+0xe8>
 800103c:	881e      	ldrh	r6, [r3, #0]
 800103e:	4854      	ldr	r0, [pc, #336]	; (8001190 <_printf_i+0x244>)
 8001040:	2f6f      	cmp	r7, #111	; 0x6f
 8001042:	bf0c      	ite	eq
 8001044:	2308      	moveq	r3, #8
 8001046:	230a      	movne	r3, #10
 8001048:	2100      	movs	r1, #0
 800104a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800104e:	6865      	ldr	r5, [r4, #4]
 8001050:	60a5      	str	r5, [r4, #8]
 8001052:	2d00      	cmp	r5, #0
 8001054:	bfa2      	ittt	ge
 8001056:	6821      	ldrge	r1, [r4, #0]
 8001058:	f021 0104 	bicge.w	r1, r1, #4
 800105c:	6021      	strge	r1, [r4, #0]
 800105e:	b90e      	cbnz	r6, 8001064 <_printf_i+0x118>
 8001060:	2d00      	cmp	r5, #0
 8001062:	d04d      	beq.n	8001100 <_printf_i+0x1b4>
 8001064:	4615      	mov	r5, r2
 8001066:	fbb6 f1f3 	udiv	r1, r6, r3
 800106a:	fb03 6711 	mls	r7, r3, r1, r6
 800106e:	5dc7      	ldrb	r7, [r0, r7]
 8001070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001074:	4637      	mov	r7, r6
 8001076:	42bb      	cmp	r3, r7
 8001078:	460e      	mov	r6, r1
 800107a:	d9f4      	bls.n	8001066 <_printf_i+0x11a>
 800107c:	2b08      	cmp	r3, #8
 800107e:	d10b      	bne.n	8001098 <_printf_i+0x14c>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	07de      	lsls	r6, r3, #31
 8001084:	d508      	bpl.n	8001098 <_printf_i+0x14c>
 8001086:	6923      	ldr	r3, [r4, #16]
 8001088:	6861      	ldr	r1, [r4, #4]
 800108a:	4299      	cmp	r1, r3
 800108c:	bfde      	ittt	le
 800108e:	2330      	movle	r3, #48	; 0x30
 8001090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001094:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001098:	1b52      	subs	r2, r2, r5
 800109a:	6122      	str	r2, [r4, #16]
 800109c:	f8cd a000 	str.w	sl, [sp]
 80010a0:	464b      	mov	r3, r9
 80010a2:	aa03      	add	r2, sp, #12
 80010a4:	4621      	mov	r1, r4
 80010a6:	4640      	mov	r0, r8
 80010a8:	f7ff fee2 	bl	8000e70 <_printf_common>
 80010ac:	3001      	adds	r0, #1
 80010ae:	d14c      	bne.n	800114a <_printf_i+0x1fe>
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	b004      	add	sp, #16
 80010b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ba:	4835      	ldr	r0, [pc, #212]	; (8001190 <_printf_i+0x244>)
 80010bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80010c0:	6829      	ldr	r1, [r5, #0]
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80010c8:	6029      	str	r1, [r5, #0]
 80010ca:	061d      	lsls	r5, r3, #24
 80010cc:	d514      	bpl.n	80010f8 <_printf_i+0x1ac>
 80010ce:	07df      	lsls	r7, r3, #31
 80010d0:	bf44      	itt	mi
 80010d2:	f043 0320 	orrmi.w	r3, r3, #32
 80010d6:	6023      	strmi	r3, [r4, #0]
 80010d8:	b91e      	cbnz	r6, 80010e2 <_printf_i+0x196>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f023 0320 	bic.w	r3, r3, #32
 80010e0:	6023      	str	r3, [r4, #0]
 80010e2:	2310      	movs	r3, #16
 80010e4:	e7b0      	b.n	8001048 <_printf_i+0xfc>
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	2378      	movs	r3, #120	; 0x78
 80010f0:	4828      	ldr	r0, [pc, #160]	; (8001194 <_printf_i+0x248>)
 80010f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010f6:	e7e3      	b.n	80010c0 <_printf_i+0x174>
 80010f8:	0659      	lsls	r1, r3, #25
 80010fa:	bf48      	it	mi
 80010fc:	b2b6      	uxthmi	r6, r6
 80010fe:	e7e6      	b.n	80010ce <_printf_i+0x182>
 8001100:	4615      	mov	r5, r2
 8001102:	e7bb      	b.n	800107c <_printf_i+0x130>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	6826      	ldr	r6, [r4, #0]
 8001108:	6961      	ldr	r1, [r4, #20]
 800110a:	1d18      	adds	r0, r3, #4
 800110c:	6028      	str	r0, [r5, #0]
 800110e:	0635      	lsls	r5, r6, #24
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	d501      	bpl.n	8001118 <_printf_i+0x1cc>
 8001114:	6019      	str	r1, [r3, #0]
 8001116:	e002      	b.n	800111e <_printf_i+0x1d2>
 8001118:	0670      	lsls	r0, r6, #25
 800111a:	d5fb      	bpl.n	8001114 <_printf_i+0x1c8>
 800111c:	8019      	strh	r1, [r3, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	6123      	str	r3, [r4, #16]
 8001122:	4615      	mov	r5, r2
 8001124:	e7ba      	b.n	800109c <_printf_i+0x150>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	1d1a      	adds	r2, r3, #4
 800112a:	602a      	str	r2, [r5, #0]
 800112c:	681d      	ldr	r5, [r3, #0]
 800112e:	6862      	ldr	r2, [r4, #4]
 8001130:	2100      	movs	r1, #0
 8001132:	4628      	mov	r0, r5
 8001134:	f7ff f854 	bl	80001e0 <memchr>
 8001138:	b108      	cbz	r0, 800113e <_printf_i+0x1f2>
 800113a:	1b40      	subs	r0, r0, r5
 800113c:	6060      	str	r0, [r4, #4]
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	6123      	str	r3, [r4, #16]
 8001142:	2300      	movs	r3, #0
 8001144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001148:	e7a8      	b.n	800109c <_printf_i+0x150>
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	462a      	mov	r2, r5
 800114e:	4649      	mov	r1, r9
 8001150:	4640      	mov	r0, r8
 8001152:	47d0      	blx	sl
 8001154:	3001      	adds	r0, #1
 8001156:	d0ab      	beq.n	80010b0 <_printf_i+0x164>
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	079b      	lsls	r3, r3, #30
 800115c:	d413      	bmi.n	8001186 <_printf_i+0x23a>
 800115e:	68e0      	ldr	r0, [r4, #12]
 8001160:	9b03      	ldr	r3, [sp, #12]
 8001162:	4298      	cmp	r0, r3
 8001164:	bfb8      	it	lt
 8001166:	4618      	movlt	r0, r3
 8001168:	e7a4      	b.n	80010b4 <_printf_i+0x168>
 800116a:	2301      	movs	r3, #1
 800116c:	4632      	mov	r2, r6
 800116e:	4649      	mov	r1, r9
 8001170:	4640      	mov	r0, r8
 8001172:	47d0      	blx	sl
 8001174:	3001      	adds	r0, #1
 8001176:	d09b      	beq.n	80010b0 <_printf_i+0x164>
 8001178:	3501      	adds	r5, #1
 800117a:	68e3      	ldr	r3, [r4, #12]
 800117c:	9903      	ldr	r1, [sp, #12]
 800117e:	1a5b      	subs	r3, r3, r1
 8001180:	42ab      	cmp	r3, r5
 8001182:	dcf2      	bgt.n	800116a <_printf_i+0x21e>
 8001184:	e7eb      	b.n	800115e <_printf_i+0x212>
 8001186:	2500      	movs	r5, #0
 8001188:	f104 0619 	add.w	r6, r4, #25
 800118c:	e7f5      	b.n	800117a <_printf_i+0x22e>
 800118e:	bf00      	nop
 8001190:	08001b49 	.word	0x08001b49
 8001194:	08001b5a 	.word	0x08001b5a

08001198 <__swbuf_r>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	460e      	mov	r6, r1
 800119c:	4614      	mov	r4, r2
 800119e:	4605      	mov	r5, r0
 80011a0:	b118      	cbz	r0, 80011aa <__swbuf_r+0x12>
 80011a2:	6983      	ldr	r3, [r0, #24]
 80011a4:	b90b      	cbnz	r3, 80011aa <__swbuf_r+0x12>
 80011a6:	f000 f9d1 	bl	800154c <__sinit>
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <__swbuf_r+0x98>)
 80011ac:	429c      	cmp	r4, r3
 80011ae:	d12b      	bne.n	8001208 <__swbuf_r+0x70>
 80011b0:	686c      	ldr	r4, [r5, #4]
 80011b2:	69a3      	ldr	r3, [r4, #24]
 80011b4:	60a3      	str	r3, [r4, #8]
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	071a      	lsls	r2, r3, #28
 80011ba:	d52f      	bpl.n	800121c <__swbuf_r+0x84>
 80011bc:	6923      	ldr	r3, [r4, #16]
 80011be:	b36b      	cbz	r3, 800121c <__swbuf_r+0x84>
 80011c0:	6923      	ldr	r3, [r4, #16]
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	1ac0      	subs	r0, r0, r3
 80011c6:	6963      	ldr	r3, [r4, #20]
 80011c8:	b2f6      	uxtb	r6, r6
 80011ca:	4283      	cmp	r3, r0
 80011cc:	4637      	mov	r7, r6
 80011ce:	dc04      	bgt.n	80011da <__swbuf_r+0x42>
 80011d0:	4621      	mov	r1, r4
 80011d2:	4628      	mov	r0, r5
 80011d4:	f000 f926 	bl	8001424 <_fflush_r>
 80011d8:	bb30      	cbnz	r0, 8001228 <__swbuf_r+0x90>
 80011da:	68a3      	ldr	r3, [r4, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60a3      	str	r3, [r4, #8]
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	6022      	str	r2, [r4, #0]
 80011e6:	701e      	strb	r6, [r3, #0]
 80011e8:	6963      	ldr	r3, [r4, #20]
 80011ea:	3001      	adds	r0, #1
 80011ec:	4283      	cmp	r3, r0
 80011ee:	d004      	beq.n	80011fa <__swbuf_r+0x62>
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	07db      	lsls	r3, r3, #31
 80011f4:	d506      	bpl.n	8001204 <__swbuf_r+0x6c>
 80011f6:	2e0a      	cmp	r6, #10
 80011f8:	d104      	bne.n	8001204 <__swbuf_r+0x6c>
 80011fa:	4621      	mov	r1, r4
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 f911 	bl	8001424 <_fflush_r>
 8001202:	b988      	cbnz	r0, 8001228 <__swbuf_r+0x90>
 8001204:	4638      	mov	r0, r7
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <__swbuf_r+0x9c>)
 800120a:	429c      	cmp	r4, r3
 800120c:	d101      	bne.n	8001212 <__swbuf_r+0x7a>
 800120e:	68ac      	ldr	r4, [r5, #8]
 8001210:	e7cf      	b.n	80011b2 <__swbuf_r+0x1a>
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <__swbuf_r+0xa0>)
 8001214:	429c      	cmp	r4, r3
 8001216:	bf08      	it	eq
 8001218:	68ec      	ldreq	r4, [r5, #12]
 800121a:	e7ca      	b.n	80011b2 <__swbuf_r+0x1a>
 800121c:	4621      	mov	r1, r4
 800121e:	4628      	mov	r0, r5
 8001220:	f000 f80c 	bl	800123c <__swsetup_r>
 8001224:	2800      	cmp	r0, #0
 8001226:	d0cb      	beq.n	80011c0 <__swbuf_r+0x28>
 8001228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800122c:	e7ea      	b.n	8001204 <__swbuf_r+0x6c>
 800122e:	bf00      	nop
 8001230:	08001b8c 	.word	0x08001b8c
 8001234:	08001bac 	.word	0x08001bac
 8001238:	08001b6c 	.word	0x08001b6c

0800123c <__swsetup_r>:
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <__swsetup_r+0xcc>)
 800123e:	b570      	push	{r4, r5, r6, lr}
 8001240:	681d      	ldr	r5, [r3, #0]
 8001242:	4606      	mov	r6, r0
 8001244:	460c      	mov	r4, r1
 8001246:	b125      	cbz	r5, 8001252 <__swsetup_r+0x16>
 8001248:	69ab      	ldr	r3, [r5, #24]
 800124a:	b913      	cbnz	r3, 8001252 <__swsetup_r+0x16>
 800124c:	4628      	mov	r0, r5
 800124e:	f000 f97d 	bl	800154c <__sinit>
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <__swsetup_r+0xd0>)
 8001254:	429c      	cmp	r4, r3
 8001256:	d10f      	bne.n	8001278 <__swsetup_r+0x3c>
 8001258:	686c      	ldr	r4, [r5, #4]
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001260:	0719      	lsls	r1, r3, #28
 8001262:	d42c      	bmi.n	80012be <__swsetup_r+0x82>
 8001264:	06dd      	lsls	r5, r3, #27
 8001266:	d411      	bmi.n	800128c <__swsetup_r+0x50>
 8001268:	2309      	movs	r3, #9
 800126a:	6033      	str	r3, [r6, #0]
 800126c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001276:	e03e      	b.n	80012f6 <__swsetup_r+0xba>
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <__swsetup_r+0xd4>)
 800127a:	429c      	cmp	r4, r3
 800127c:	d101      	bne.n	8001282 <__swsetup_r+0x46>
 800127e:	68ac      	ldr	r4, [r5, #8]
 8001280:	e7eb      	b.n	800125a <__swsetup_r+0x1e>
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <__swsetup_r+0xd8>)
 8001284:	429c      	cmp	r4, r3
 8001286:	bf08      	it	eq
 8001288:	68ec      	ldreq	r4, [r5, #12]
 800128a:	e7e6      	b.n	800125a <__swsetup_r+0x1e>
 800128c:	0758      	lsls	r0, r3, #29
 800128e:	d512      	bpl.n	80012b6 <__swsetup_r+0x7a>
 8001290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001292:	b141      	cbz	r1, 80012a6 <__swsetup_r+0x6a>
 8001294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001298:	4299      	cmp	r1, r3
 800129a:	d002      	beq.n	80012a2 <__swsetup_r+0x66>
 800129c:	4630      	mov	r0, r6
 800129e:	f000 fa5b 	bl	8001758 <_free_r>
 80012a2:	2300      	movs	r3, #0
 80012a4:	6363      	str	r3, [r4, #52]	; 0x34
 80012a6:	89a3      	ldrh	r3, [r4, #12]
 80012a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012ac:	81a3      	strh	r3, [r4, #12]
 80012ae:	2300      	movs	r3, #0
 80012b0:	6063      	str	r3, [r4, #4]
 80012b2:	6923      	ldr	r3, [r4, #16]
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	81a3      	strh	r3, [r4, #12]
 80012be:	6923      	ldr	r3, [r4, #16]
 80012c0:	b94b      	cbnz	r3, 80012d6 <__swsetup_r+0x9a>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012cc:	d003      	beq.n	80012d6 <__swsetup_r+0x9a>
 80012ce:	4621      	mov	r1, r4
 80012d0:	4630      	mov	r0, r6
 80012d2:	f000 fa01 	bl	80016d8 <__smakebuf_r>
 80012d6:	89a0      	ldrh	r0, [r4, #12]
 80012d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012dc:	f010 0301 	ands.w	r3, r0, #1
 80012e0:	d00a      	beq.n	80012f8 <__swsetup_r+0xbc>
 80012e2:	2300      	movs	r3, #0
 80012e4:	60a3      	str	r3, [r4, #8]
 80012e6:	6963      	ldr	r3, [r4, #20]
 80012e8:	425b      	negs	r3, r3
 80012ea:	61a3      	str	r3, [r4, #24]
 80012ec:	6923      	ldr	r3, [r4, #16]
 80012ee:	b943      	cbnz	r3, 8001302 <__swsetup_r+0xc6>
 80012f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012f4:	d1ba      	bne.n	800126c <__swsetup_r+0x30>
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	0781      	lsls	r1, r0, #30
 80012fa:	bf58      	it	pl
 80012fc:	6963      	ldrpl	r3, [r4, #20]
 80012fe:	60a3      	str	r3, [r4, #8]
 8001300:	e7f4      	b.n	80012ec <__swsetup_r+0xb0>
 8001302:	2000      	movs	r0, #0
 8001304:	e7f7      	b.n	80012f6 <__swsetup_r+0xba>
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	08001b8c 	.word	0x08001b8c
 8001310:	08001bac 	.word	0x08001bac
 8001314:	08001b6c 	.word	0x08001b6c

08001318 <__sflush_r>:
 8001318:	898a      	ldrh	r2, [r1, #12]
 800131a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800131e:	4605      	mov	r5, r0
 8001320:	0710      	lsls	r0, r2, #28
 8001322:	460c      	mov	r4, r1
 8001324:	d458      	bmi.n	80013d8 <__sflush_r+0xc0>
 8001326:	684b      	ldr	r3, [r1, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dc05      	bgt.n	8001338 <__sflush_r+0x20>
 800132c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	dc02      	bgt.n	8001338 <__sflush_r+0x20>
 8001332:	2000      	movs	r0, #0
 8001334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800133a:	2e00      	cmp	r6, #0
 800133c:	d0f9      	beq.n	8001332 <__sflush_r+0x1a>
 800133e:	2300      	movs	r3, #0
 8001340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001344:	682f      	ldr	r7, [r5, #0]
 8001346:	602b      	str	r3, [r5, #0]
 8001348:	d032      	beq.n	80013b0 <__sflush_r+0x98>
 800134a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800134c:	89a3      	ldrh	r3, [r4, #12]
 800134e:	075a      	lsls	r2, r3, #29
 8001350:	d505      	bpl.n	800135e <__sflush_r+0x46>
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	1ac0      	subs	r0, r0, r3
 8001356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001358:	b10b      	cbz	r3, 800135e <__sflush_r+0x46>
 800135a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800135c:	1ac0      	subs	r0, r0, r3
 800135e:	2300      	movs	r3, #0
 8001360:	4602      	mov	r2, r0
 8001362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001364:	6a21      	ldr	r1, [r4, #32]
 8001366:	4628      	mov	r0, r5
 8001368:	47b0      	blx	r6
 800136a:	1c43      	adds	r3, r0, #1
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	d106      	bne.n	800137e <__sflush_r+0x66>
 8001370:	6829      	ldr	r1, [r5, #0]
 8001372:	291d      	cmp	r1, #29
 8001374:	d82c      	bhi.n	80013d0 <__sflush_r+0xb8>
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <__sflush_r+0x108>)
 8001378:	40ca      	lsrs	r2, r1
 800137a:	07d6      	lsls	r6, r2, #31
 800137c:	d528      	bpl.n	80013d0 <__sflush_r+0xb8>
 800137e:	2200      	movs	r2, #0
 8001380:	6062      	str	r2, [r4, #4]
 8001382:	04d9      	lsls	r1, r3, #19
 8001384:	6922      	ldr	r2, [r4, #16]
 8001386:	6022      	str	r2, [r4, #0]
 8001388:	d504      	bpl.n	8001394 <__sflush_r+0x7c>
 800138a:	1c42      	adds	r2, r0, #1
 800138c:	d101      	bne.n	8001392 <__sflush_r+0x7a>
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	b903      	cbnz	r3, 8001394 <__sflush_r+0x7c>
 8001392:	6560      	str	r0, [r4, #84]	; 0x54
 8001394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001396:	602f      	str	r7, [r5, #0]
 8001398:	2900      	cmp	r1, #0
 800139a:	d0ca      	beq.n	8001332 <__sflush_r+0x1a>
 800139c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013a0:	4299      	cmp	r1, r3
 80013a2:	d002      	beq.n	80013aa <__sflush_r+0x92>
 80013a4:	4628      	mov	r0, r5
 80013a6:	f000 f9d7 	bl	8001758 <_free_r>
 80013aa:	2000      	movs	r0, #0
 80013ac:	6360      	str	r0, [r4, #52]	; 0x34
 80013ae:	e7c1      	b.n	8001334 <__sflush_r+0x1c>
 80013b0:	6a21      	ldr	r1, [r4, #32]
 80013b2:	2301      	movs	r3, #1
 80013b4:	4628      	mov	r0, r5
 80013b6:	47b0      	blx	r6
 80013b8:	1c41      	adds	r1, r0, #1
 80013ba:	d1c7      	bne.n	800134c <__sflush_r+0x34>
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0c4      	beq.n	800134c <__sflush_r+0x34>
 80013c2:	2b1d      	cmp	r3, #29
 80013c4:	d001      	beq.n	80013ca <__sflush_r+0xb2>
 80013c6:	2b16      	cmp	r3, #22
 80013c8:	d101      	bne.n	80013ce <__sflush_r+0xb6>
 80013ca:	602f      	str	r7, [r5, #0]
 80013cc:	e7b1      	b.n	8001332 <__sflush_r+0x1a>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d4:	81a3      	strh	r3, [r4, #12]
 80013d6:	e7ad      	b.n	8001334 <__sflush_r+0x1c>
 80013d8:	690f      	ldr	r7, [r1, #16]
 80013da:	2f00      	cmp	r7, #0
 80013dc:	d0a9      	beq.n	8001332 <__sflush_r+0x1a>
 80013de:	0793      	lsls	r3, r2, #30
 80013e0:	680e      	ldr	r6, [r1, #0]
 80013e2:	bf08      	it	eq
 80013e4:	694b      	ldreq	r3, [r1, #20]
 80013e6:	600f      	str	r7, [r1, #0]
 80013e8:	bf18      	it	ne
 80013ea:	2300      	movne	r3, #0
 80013ec:	eba6 0807 	sub.w	r8, r6, r7
 80013f0:	608b      	str	r3, [r1, #8]
 80013f2:	f1b8 0f00 	cmp.w	r8, #0
 80013f6:	dd9c      	ble.n	8001332 <__sflush_r+0x1a>
 80013f8:	6a21      	ldr	r1, [r4, #32]
 80013fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013fc:	4643      	mov	r3, r8
 80013fe:	463a      	mov	r2, r7
 8001400:	4628      	mov	r0, r5
 8001402:	47b0      	blx	r6
 8001404:	2800      	cmp	r0, #0
 8001406:	dc06      	bgt.n	8001416 <__sflush_r+0xfe>
 8001408:	89a3      	ldrh	r3, [r4, #12]
 800140a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140e:	81a3      	strh	r3, [r4, #12]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	e78e      	b.n	8001334 <__sflush_r+0x1c>
 8001416:	4407      	add	r7, r0
 8001418:	eba8 0800 	sub.w	r8, r8, r0
 800141c:	e7e9      	b.n	80013f2 <__sflush_r+0xda>
 800141e:	bf00      	nop
 8001420:	20400001 	.word	0x20400001

08001424 <_fflush_r>:
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	690b      	ldr	r3, [r1, #16]
 8001428:	4605      	mov	r5, r0
 800142a:	460c      	mov	r4, r1
 800142c:	b913      	cbnz	r3, 8001434 <_fflush_r+0x10>
 800142e:	2500      	movs	r5, #0
 8001430:	4628      	mov	r0, r5
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	b118      	cbz	r0, 800143e <_fflush_r+0x1a>
 8001436:	6983      	ldr	r3, [r0, #24]
 8001438:	b90b      	cbnz	r3, 800143e <_fflush_r+0x1a>
 800143a:	f000 f887 	bl	800154c <__sinit>
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <_fflush_r+0x6c>)
 8001440:	429c      	cmp	r4, r3
 8001442:	d11b      	bne.n	800147c <_fflush_r+0x58>
 8001444:	686c      	ldr	r4, [r5, #4]
 8001446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0ef      	beq.n	800142e <_fflush_r+0xa>
 800144e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001450:	07d0      	lsls	r0, r2, #31
 8001452:	d404      	bmi.n	800145e <_fflush_r+0x3a>
 8001454:	0599      	lsls	r1, r3, #22
 8001456:	d402      	bmi.n	800145e <_fflush_r+0x3a>
 8001458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800145a:	f000 f915 	bl	8001688 <__retarget_lock_acquire_recursive>
 800145e:	4628      	mov	r0, r5
 8001460:	4621      	mov	r1, r4
 8001462:	f7ff ff59 	bl	8001318 <__sflush_r>
 8001466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001468:	07da      	lsls	r2, r3, #31
 800146a:	4605      	mov	r5, r0
 800146c:	d4e0      	bmi.n	8001430 <_fflush_r+0xc>
 800146e:	89a3      	ldrh	r3, [r4, #12]
 8001470:	059b      	lsls	r3, r3, #22
 8001472:	d4dd      	bmi.n	8001430 <_fflush_r+0xc>
 8001474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001476:	f000 f908 	bl	800168a <__retarget_lock_release_recursive>
 800147a:	e7d9      	b.n	8001430 <_fflush_r+0xc>
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <_fflush_r+0x70>)
 800147e:	429c      	cmp	r4, r3
 8001480:	d101      	bne.n	8001486 <_fflush_r+0x62>
 8001482:	68ac      	ldr	r4, [r5, #8]
 8001484:	e7df      	b.n	8001446 <_fflush_r+0x22>
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <_fflush_r+0x74>)
 8001488:	429c      	cmp	r4, r3
 800148a:	bf08      	it	eq
 800148c:	68ec      	ldreq	r4, [r5, #12]
 800148e:	e7da      	b.n	8001446 <_fflush_r+0x22>
 8001490:	08001b8c 	.word	0x08001b8c
 8001494:	08001bac 	.word	0x08001bac
 8001498:	08001b6c 	.word	0x08001b6c

0800149c <std>:
 800149c:	2300      	movs	r3, #0
 800149e:	b510      	push	{r4, lr}
 80014a0:	4604      	mov	r4, r0
 80014a2:	e9c0 3300 	strd	r3, r3, [r0]
 80014a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014aa:	6083      	str	r3, [r0, #8]
 80014ac:	8181      	strh	r1, [r0, #12]
 80014ae:	6643      	str	r3, [r0, #100]	; 0x64
 80014b0:	81c2      	strh	r2, [r0, #14]
 80014b2:	6183      	str	r3, [r0, #24]
 80014b4:	4619      	mov	r1, r3
 80014b6:	2208      	movs	r2, #8
 80014b8:	305c      	adds	r0, #92	; 0x5c
 80014ba:	f7ff fb77 	bl	8000bac <memset>
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <std+0x38>)
 80014c0:	6263      	str	r3, [r4, #36]	; 0x24
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <std+0x3c>)
 80014c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <std+0x40>)
 80014c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <std+0x44>)
 80014cc:	6224      	str	r4, [r4, #32]
 80014ce:	6323      	str	r3, [r4, #48]	; 0x30
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop
 80014d4:	08001939 	.word	0x08001939
 80014d8:	0800195b 	.word	0x0800195b
 80014dc:	08001993 	.word	0x08001993
 80014e0:	080019b7 	.word	0x080019b7

080014e4 <_cleanup_r>:
 80014e4:	4901      	ldr	r1, [pc, #4]	; (80014ec <_cleanup_r+0x8>)
 80014e6:	f000 b8af 	b.w	8001648 <_fwalk_reent>
 80014ea:	bf00      	nop
 80014ec:	08001425 	.word	0x08001425

080014f0 <__sfmoreglue>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	2268      	movs	r2, #104	; 0x68
 80014f4:	1e4d      	subs	r5, r1, #1
 80014f6:	4355      	muls	r5, r2
 80014f8:	460e      	mov	r6, r1
 80014fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014fe:	f000 f997 	bl	8001830 <_malloc_r>
 8001502:	4604      	mov	r4, r0
 8001504:	b140      	cbz	r0, 8001518 <__sfmoreglue+0x28>
 8001506:	2100      	movs	r1, #0
 8001508:	e9c0 1600 	strd	r1, r6, [r0]
 800150c:	300c      	adds	r0, #12
 800150e:	60a0      	str	r0, [r4, #8]
 8001510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001514:	f7ff fb4a 	bl	8000bac <memset>
 8001518:	4620      	mov	r0, r4
 800151a:	bd70      	pop	{r4, r5, r6, pc}

0800151c <__sfp_lock_acquire>:
 800151c:	4801      	ldr	r0, [pc, #4]	; (8001524 <__sfp_lock_acquire+0x8>)
 800151e:	f000 b8b3 	b.w	8001688 <__retarget_lock_acquire_recursive>
 8001522:	bf00      	nop
 8001524:	20001161 	.word	0x20001161

08001528 <__sfp_lock_release>:
 8001528:	4801      	ldr	r0, [pc, #4]	; (8001530 <__sfp_lock_release+0x8>)
 800152a:	f000 b8ae 	b.w	800168a <__retarget_lock_release_recursive>
 800152e:	bf00      	nop
 8001530:	20001161 	.word	0x20001161

08001534 <__sinit_lock_acquire>:
 8001534:	4801      	ldr	r0, [pc, #4]	; (800153c <__sinit_lock_acquire+0x8>)
 8001536:	f000 b8a7 	b.w	8001688 <__retarget_lock_acquire_recursive>
 800153a:	bf00      	nop
 800153c:	20001162 	.word	0x20001162

08001540 <__sinit_lock_release>:
 8001540:	4801      	ldr	r0, [pc, #4]	; (8001548 <__sinit_lock_release+0x8>)
 8001542:	f000 b8a2 	b.w	800168a <__retarget_lock_release_recursive>
 8001546:	bf00      	nop
 8001548:	20001162 	.word	0x20001162

0800154c <__sinit>:
 800154c:	b510      	push	{r4, lr}
 800154e:	4604      	mov	r4, r0
 8001550:	f7ff fff0 	bl	8001534 <__sinit_lock_acquire>
 8001554:	69a3      	ldr	r3, [r4, #24]
 8001556:	b11b      	cbz	r3, 8001560 <__sinit+0x14>
 8001558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800155c:	f7ff bff0 	b.w	8001540 <__sinit_lock_release>
 8001560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001564:	6523      	str	r3, [r4, #80]	; 0x50
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <__sinit+0x68>)
 8001568:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <__sinit+0x6c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	62a2      	str	r2, [r4, #40]	; 0x28
 800156e:	42a3      	cmp	r3, r4
 8001570:	bf04      	itt	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	61a3      	streq	r3, [r4, #24]
 8001576:	4620      	mov	r0, r4
 8001578:	f000 f820 	bl	80015bc <__sfp>
 800157c:	6060      	str	r0, [r4, #4]
 800157e:	4620      	mov	r0, r4
 8001580:	f000 f81c 	bl	80015bc <__sfp>
 8001584:	60a0      	str	r0, [r4, #8]
 8001586:	4620      	mov	r0, r4
 8001588:	f000 f818 	bl	80015bc <__sfp>
 800158c:	2200      	movs	r2, #0
 800158e:	60e0      	str	r0, [r4, #12]
 8001590:	2104      	movs	r1, #4
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	f7ff ff82 	bl	800149c <std>
 8001598:	68a0      	ldr	r0, [r4, #8]
 800159a:	2201      	movs	r2, #1
 800159c:	2109      	movs	r1, #9
 800159e:	f7ff ff7d 	bl	800149c <std>
 80015a2:	68e0      	ldr	r0, [r4, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	2112      	movs	r1, #18
 80015a8:	f7ff ff78 	bl	800149c <std>
 80015ac:	2301      	movs	r3, #1
 80015ae:	61a3      	str	r3, [r4, #24]
 80015b0:	e7d2      	b.n	8001558 <__sinit+0xc>
 80015b2:	bf00      	nop
 80015b4:	08001b34 	.word	0x08001b34
 80015b8:	080014e5 	.word	0x080014e5

080015bc <__sfp>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	4607      	mov	r7, r0
 80015c0:	f7ff ffac 	bl	800151c <__sfp_lock_acquire>
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <__sfp+0x84>)
 80015c6:	681e      	ldr	r6, [r3, #0]
 80015c8:	69b3      	ldr	r3, [r6, #24]
 80015ca:	b913      	cbnz	r3, 80015d2 <__sfp+0x16>
 80015cc:	4630      	mov	r0, r6
 80015ce:	f7ff ffbd 	bl	800154c <__sinit>
 80015d2:	3648      	adds	r6, #72	; 0x48
 80015d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015d8:	3b01      	subs	r3, #1
 80015da:	d503      	bpl.n	80015e4 <__sfp+0x28>
 80015dc:	6833      	ldr	r3, [r6, #0]
 80015de:	b30b      	cbz	r3, 8001624 <__sfp+0x68>
 80015e0:	6836      	ldr	r6, [r6, #0]
 80015e2:	e7f7      	b.n	80015d4 <__sfp+0x18>
 80015e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015e8:	b9d5      	cbnz	r5, 8001620 <__sfp+0x64>
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <__sfp+0x88>)
 80015ec:	60e3      	str	r3, [r4, #12]
 80015ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015f2:	6665      	str	r5, [r4, #100]	; 0x64
 80015f4:	f000 f847 	bl	8001686 <__retarget_lock_init_recursive>
 80015f8:	f7ff ff96 	bl	8001528 <__sfp_lock_release>
 80015fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001604:	6025      	str	r5, [r4, #0]
 8001606:	61a5      	str	r5, [r4, #24]
 8001608:	2208      	movs	r2, #8
 800160a:	4629      	mov	r1, r5
 800160c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001610:	f7ff facc 	bl	8000bac <memset>
 8001614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800161c:	4620      	mov	r0, r4
 800161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001620:	3468      	adds	r4, #104	; 0x68
 8001622:	e7d9      	b.n	80015d8 <__sfp+0x1c>
 8001624:	2104      	movs	r1, #4
 8001626:	4638      	mov	r0, r7
 8001628:	f7ff ff62 	bl	80014f0 <__sfmoreglue>
 800162c:	4604      	mov	r4, r0
 800162e:	6030      	str	r0, [r6, #0]
 8001630:	2800      	cmp	r0, #0
 8001632:	d1d5      	bne.n	80015e0 <__sfp+0x24>
 8001634:	f7ff ff78 	bl	8001528 <__sfp_lock_release>
 8001638:	230c      	movs	r3, #12
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	e7ee      	b.n	800161c <__sfp+0x60>
 800163e:	bf00      	nop
 8001640:	08001b34 	.word	0x08001b34
 8001644:	ffff0001 	.word	0xffff0001

08001648 <_fwalk_reent>:
 8001648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800164c:	4606      	mov	r6, r0
 800164e:	4688      	mov	r8, r1
 8001650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001654:	2700      	movs	r7, #0
 8001656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800165a:	f1b9 0901 	subs.w	r9, r9, #1
 800165e:	d505      	bpl.n	800166c <_fwalk_reent+0x24>
 8001660:	6824      	ldr	r4, [r4, #0]
 8001662:	2c00      	cmp	r4, #0
 8001664:	d1f7      	bne.n	8001656 <_fwalk_reent+0xe>
 8001666:	4638      	mov	r0, r7
 8001668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800166c:	89ab      	ldrh	r3, [r5, #12]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d907      	bls.n	8001682 <_fwalk_reent+0x3a>
 8001672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001676:	3301      	adds	r3, #1
 8001678:	d003      	beq.n	8001682 <_fwalk_reent+0x3a>
 800167a:	4629      	mov	r1, r5
 800167c:	4630      	mov	r0, r6
 800167e:	47c0      	blx	r8
 8001680:	4307      	orrs	r7, r0
 8001682:	3568      	adds	r5, #104	; 0x68
 8001684:	e7e9      	b.n	800165a <_fwalk_reent+0x12>

08001686 <__retarget_lock_init_recursive>:
 8001686:	4770      	bx	lr

08001688 <__retarget_lock_acquire_recursive>:
 8001688:	4770      	bx	lr

0800168a <__retarget_lock_release_recursive>:
 800168a:	4770      	bx	lr

0800168c <__swhatbuf_r>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	460e      	mov	r6, r1
 8001690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001694:	2900      	cmp	r1, #0
 8001696:	b096      	sub	sp, #88	; 0x58
 8001698:	4614      	mov	r4, r2
 800169a:	461d      	mov	r5, r3
 800169c:	da08      	bge.n	80016b0 <__swhatbuf_r+0x24>
 800169e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	602a      	str	r2, [r5, #0]
 80016a6:	061a      	lsls	r2, r3, #24
 80016a8:	d410      	bmi.n	80016cc <__swhatbuf_r+0x40>
 80016aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ae:	e00e      	b.n	80016ce <__swhatbuf_r+0x42>
 80016b0:	466a      	mov	r2, sp
 80016b2:	f000 f9a7 	bl	8001a04 <_fstat_r>
 80016b6:	2800      	cmp	r0, #0
 80016b8:	dbf1      	blt.n	800169e <__swhatbuf_r+0x12>
 80016ba:	9a01      	ldr	r2, [sp, #4]
 80016bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016c4:	425a      	negs	r2, r3
 80016c6:	415a      	adcs	r2, r3
 80016c8:	602a      	str	r2, [r5, #0]
 80016ca:	e7ee      	b.n	80016aa <__swhatbuf_r+0x1e>
 80016cc:	2340      	movs	r3, #64	; 0x40
 80016ce:	2000      	movs	r0, #0
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	b016      	add	sp, #88	; 0x58
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080016d8 <__smakebuf_r>:
 80016d8:	898b      	ldrh	r3, [r1, #12]
 80016da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016dc:	079d      	lsls	r5, r3, #30
 80016de:	4606      	mov	r6, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	d507      	bpl.n	80016f4 <__smakebuf_r+0x1c>
 80016e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016e8:	6023      	str	r3, [r4, #0]
 80016ea:	6123      	str	r3, [r4, #16]
 80016ec:	2301      	movs	r3, #1
 80016ee:	6163      	str	r3, [r4, #20]
 80016f0:	b002      	add	sp, #8
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	ab01      	add	r3, sp, #4
 80016f6:	466a      	mov	r2, sp
 80016f8:	f7ff ffc8 	bl	800168c <__swhatbuf_r>
 80016fc:	9900      	ldr	r1, [sp, #0]
 80016fe:	4605      	mov	r5, r0
 8001700:	4630      	mov	r0, r6
 8001702:	f000 f895 	bl	8001830 <_malloc_r>
 8001706:	b948      	cbnz	r0, 800171c <__smakebuf_r+0x44>
 8001708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800170c:	059a      	lsls	r2, r3, #22
 800170e:	d4ef      	bmi.n	80016f0 <__smakebuf_r+0x18>
 8001710:	f023 0303 	bic.w	r3, r3, #3
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	81a3      	strh	r3, [r4, #12]
 800171a:	e7e3      	b.n	80016e4 <__smakebuf_r+0xc>
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <__smakebuf_r+0x7c>)
 800171e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001720:	89a3      	ldrh	r3, [r4, #12]
 8001722:	6020      	str	r0, [r4, #0]
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001728:	81a3      	strh	r3, [r4, #12]
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	6163      	str	r3, [r4, #20]
 800172e:	9b01      	ldr	r3, [sp, #4]
 8001730:	6120      	str	r0, [r4, #16]
 8001732:	b15b      	cbz	r3, 800174c <__smakebuf_r+0x74>
 8001734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001738:	4630      	mov	r0, r6
 800173a:	f000 f975 	bl	8001a28 <_isatty_r>
 800173e:	b128      	cbz	r0, 800174c <__smakebuf_r+0x74>
 8001740:	89a3      	ldrh	r3, [r4, #12]
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	81a3      	strh	r3, [r4, #12]
 800174c:	89a0      	ldrh	r0, [r4, #12]
 800174e:	4305      	orrs	r5, r0
 8001750:	81a5      	strh	r5, [r4, #12]
 8001752:	e7cd      	b.n	80016f0 <__smakebuf_r+0x18>
 8001754:	080014e5 	.word	0x080014e5

08001758 <_free_r>:
 8001758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800175a:	2900      	cmp	r1, #0
 800175c:	d044      	beq.n	80017e8 <_free_r+0x90>
 800175e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001762:	9001      	str	r0, [sp, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f1a1 0404 	sub.w	r4, r1, #4
 800176a:	bfb8      	it	lt
 800176c:	18e4      	addlt	r4, r4, r3
 800176e:	f000 f97d 	bl	8001a6c <__malloc_lock>
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <_free_r+0x94>)
 8001774:	9801      	ldr	r0, [sp, #4]
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	b933      	cbnz	r3, 8001788 <_free_r+0x30>
 800177a:	6063      	str	r3, [r4, #4]
 800177c:	6014      	str	r4, [r2, #0]
 800177e:	b003      	add	sp, #12
 8001780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001784:	f000 b978 	b.w	8001a78 <__malloc_unlock>
 8001788:	42a3      	cmp	r3, r4
 800178a:	d908      	bls.n	800179e <_free_r+0x46>
 800178c:	6825      	ldr	r5, [r4, #0]
 800178e:	1961      	adds	r1, r4, r5
 8001790:	428b      	cmp	r3, r1
 8001792:	bf01      	itttt	eq
 8001794:	6819      	ldreq	r1, [r3, #0]
 8001796:	685b      	ldreq	r3, [r3, #4]
 8001798:	1949      	addeq	r1, r1, r5
 800179a:	6021      	streq	r1, [r4, #0]
 800179c:	e7ed      	b.n	800177a <_free_r+0x22>
 800179e:	461a      	mov	r2, r3
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	b10b      	cbz	r3, 80017a8 <_free_r+0x50>
 80017a4:	42a3      	cmp	r3, r4
 80017a6:	d9fa      	bls.n	800179e <_free_r+0x46>
 80017a8:	6811      	ldr	r1, [r2, #0]
 80017aa:	1855      	adds	r5, r2, r1
 80017ac:	42a5      	cmp	r5, r4
 80017ae:	d10b      	bne.n	80017c8 <_free_r+0x70>
 80017b0:	6824      	ldr	r4, [r4, #0]
 80017b2:	4421      	add	r1, r4
 80017b4:	1854      	adds	r4, r2, r1
 80017b6:	42a3      	cmp	r3, r4
 80017b8:	6011      	str	r1, [r2, #0]
 80017ba:	d1e0      	bne.n	800177e <_free_r+0x26>
 80017bc:	681c      	ldr	r4, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	6053      	str	r3, [r2, #4]
 80017c2:	4421      	add	r1, r4
 80017c4:	6011      	str	r1, [r2, #0]
 80017c6:	e7da      	b.n	800177e <_free_r+0x26>
 80017c8:	d902      	bls.n	80017d0 <_free_r+0x78>
 80017ca:	230c      	movs	r3, #12
 80017cc:	6003      	str	r3, [r0, #0]
 80017ce:	e7d6      	b.n	800177e <_free_r+0x26>
 80017d0:	6825      	ldr	r5, [r4, #0]
 80017d2:	1961      	adds	r1, r4, r5
 80017d4:	428b      	cmp	r3, r1
 80017d6:	bf04      	itt	eq
 80017d8:	6819      	ldreq	r1, [r3, #0]
 80017da:	685b      	ldreq	r3, [r3, #4]
 80017dc:	6063      	str	r3, [r4, #4]
 80017de:	bf04      	itt	eq
 80017e0:	1949      	addeq	r1, r1, r5
 80017e2:	6021      	streq	r1, [r4, #0]
 80017e4:	6054      	str	r4, [r2, #4]
 80017e6:	e7ca      	b.n	800177e <_free_r+0x26>
 80017e8:	b003      	add	sp, #12
 80017ea:	bd30      	pop	{r4, r5, pc}
 80017ec:	20001164 	.word	0x20001164

080017f0 <sbrk_aligned>:
 80017f0:	b570      	push	{r4, r5, r6, lr}
 80017f2:	4e0e      	ldr	r6, [pc, #56]	; (800182c <sbrk_aligned+0x3c>)
 80017f4:	460c      	mov	r4, r1
 80017f6:	6831      	ldr	r1, [r6, #0]
 80017f8:	4605      	mov	r5, r0
 80017fa:	b911      	cbnz	r1, 8001802 <sbrk_aligned+0x12>
 80017fc:	f000 f88c 	bl	8001918 <_sbrk_r>
 8001800:	6030      	str	r0, [r6, #0]
 8001802:	4621      	mov	r1, r4
 8001804:	4628      	mov	r0, r5
 8001806:	f000 f887 	bl	8001918 <_sbrk_r>
 800180a:	1c43      	adds	r3, r0, #1
 800180c:	d00a      	beq.n	8001824 <sbrk_aligned+0x34>
 800180e:	1cc4      	adds	r4, r0, #3
 8001810:	f024 0403 	bic.w	r4, r4, #3
 8001814:	42a0      	cmp	r0, r4
 8001816:	d007      	beq.n	8001828 <sbrk_aligned+0x38>
 8001818:	1a21      	subs	r1, r4, r0
 800181a:	4628      	mov	r0, r5
 800181c:	f000 f87c 	bl	8001918 <_sbrk_r>
 8001820:	3001      	adds	r0, #1
 8001822:	d101      	bne.n	8001828 <sbrk_aligned+0x38>
 8001824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001828:	4620      	mov	r0, r4
 800182a:	bd70      	pop	{r4, r5, r6, pc}
 800182c:	20001168 	.word	0x20001168

08001830 <_malloc_r>:
 8001830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001834:	1ccd      	adds	r5, r1, #3
 8001836:	f025 0503 	bic.w	r5, r5, #3
 800183a:	3508      	adds	r5, #8
 800183c:	2d0c      	cmp	r5, #12
 800183e:	bf38      	it	cc
 8001840:	250c      	movcc	r5, #12
 8001842:	2d00      	cmp	r5, #0
 8001844:	4607      	mov	r7, r0
 8001846:	db01      	blt.n	800184c <_malloc_r+0x1c>
 8001848:	42a9      	cmp	r1, r5
 800184a:	d905      	bls.n	8001858 <_malloc_r+0x28>
 800184c:	230c      	movs	r3, #12
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	2600      	movs	r6, #0
 8001852:	4630      	mov	r0, r6
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001858:	4e2e      	ldr	r6, [pc, #184]	; (8001914 <_malloc_r+0xe4>)
 800185a:	f000 f907 	bl	8001a6c <__malloc_lock>
 800185e:	6833      	ldr	r3, [r6, #0]
 8001860:	461c      	mov	r4, r3
 8001862:	bb34      	cbnz	r4, 80018b2 <_malloc_r+0x82>
 8001864:	4629      	mov	r1, r5
 8001866:	4638      	mov	r0, r7
 8001868:	f7ff ffc2 	bl	80017f0 <sbrk_aligned>
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	4604      	mov	r4, r0
 8001870:	d14d      	bne.n	800190e <_malloc_r+0xde>
 8001872:	6834      	ldr	r4, [r6, #0]
 8001874:	4626      	mov	r6, r4
 8001876:	2e00      	cmp	r6, #0
 8001878:	d140      	bne.n	80018fc <_malloc_r+0xcc>
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	4631      	mov	r1, r6
 800187e:	4638      	mov	r0, r7
 8001880:	eb04 0803 	add.w	r8, r4, r3
 8001884:	f000 f848 	bl	8001918 <_sbrk_r>
 8001888:	4580      	cmp	r8, r0
 800188a:	d13a      	bne.n	8001902 <_malloc_r+0xd2>
 800188c:	6821      	ldr	r1, [r4, #0]
 800188e:	3503      	adds	r5, #3
 8001890:	1a6d      	subs	r5, r5, r1
 8001892:	f025 0503 	bic.w	r5, r5, #3
 8001896:	3508      	adds	r5, #8
 8001898:	2d0c      	cmp	r5, #12
 800189a:	bf38      	it	cc
 800189c:	250c      	movcc	r5, #12
 800189e:	4629      	mov	r1, r5
 80018a0:	4638      	mov	r0, r7
 80018a2:	f7ff ffa5 	bl	80017f0 <sbrk_aligned>
 80018a6:	3001      	adds	r0, #1
 80018a8:	d02b      	beq.n	8001902 <_malloc_r+0xd2>
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	442b      	add	r3, r5
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	e00e      	b.n	80018d0 <_malloc_r+0xa0>
 80018b2:	6822      	ldr	r2, [r4, #0]
 80018b4:	1b52      	subs	r2, r2, r5
 80018b6:	d41e      	bmi.n	80018f6 <_malloc_r+0xc6>
 80018b8:	2a0b      	cmp	r2, #11
 80018ba:	d916      	bls.n	80018ea <_malloc_r+0xba>
 80018bc:	1961      	adds	r1, r4, r5
 80018be:	42a3      	cmp	r3, r4
 80018c0:	6025      	str	r5, [r4, #0]
 80018c2:	bf18      	it	ne
 80018c4:	6059      	strne	r1, [r3, #4]
 80018c6:	6863      	ldr	r3, [r4, #4]
 80018c8:	bf08      	it	eq
 80018ca:	6031      	streq	r1, [r6, #0]
 80018cc:	5162      	str	r2, [r4, r5]
 80018ce:	604b      	str	r3, [r1, #4]
 80018d0:	4638      	mov	r0, r7
 80018d2:	f104 060b 	add.w	r6, r4, #11
 80018d6:	f000 f8cf 	bl	8001a78 <__malloc_unlock>
 80018da:	f026 0607 	bic.w	r6, r6, #7
 80018de:	1d23      	adds	r3, r4, #4
 80018e0:	1af2      	subs	r2, r6, r3
 80018e2:	d0b6      	beq.n	8001852 <_malloc_r+0x22>
 80018e4:	1b9b      	subs	r3, r3, r6
 80018e6:	50a3      	str	r3, [r4, r2]
 80018e8:	e7b3      	b.n	8001852 <_malloc_r+0x22>
 80018ea:	6862      	ldr	r2, [r4, #4]
 80018ec:	42a3      	cmp	r3, r4
 80018ee:	bf0c      	ite	eq
 80018f0:	6032      	streq	r2, [r6, #0]
 80018f2:	605a      	strne	r2, [r3, #4]
 80018f4:	e7ec      	b.n	80018d0 <_malloc_r+0xa0>
 80018f6:	4623      	mov	r3, r4
 80018f8:	6864      	ldr	r4, [r4, #4]
 80018fa:	e7b2      	b.n	8001862 <_malloc_r+0x32>
 80018fc:	4634      	mov	r4, r6
 80018fe:	6876      	ldr	r6, [r6, #4]
 8001900:	e7b9      	b.n	8001876 <_malloc_r+0x46>
 8001902:	230c      	movs	r3, #12
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4638      	mov	r0, r7
 8001908:	f000 f8b6 	bl	8001a78 <__malloc_unlock>
 800190c:	e7a1      	b.n	8001852 <_malloc_r+0x22>
 800190e:	6025      	str	r5, [r4, #0]
 8001910:	e7de      	b.n	80018d0 <_malloc_r+0xa0>
 8001912:	bf00      	nop
 8001914:	20001164 	.word	0x20001164

08001918 <_sbrk_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4d06      	ldr	r5, [pc, #24]	; (8001934 <_sbrk_r+0x1c>)
 800191c:	2300      	movs	r3, #0
 800191e:	4604      	mov	r4, r0
 8001920:	4608      	mov	r0, r1
 8001922:	602b      	str	r3, [r5, #0]
 8001924:	f7fe ffae 	bl	8000884 <_sbrk>
 8001928:	1c43      	adds	r3, r0, #1
 800192a:	d102      	bne.n	8001932 <_sbrk_r+0x1a>
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	b103      	cbz	r3, 8001932 <_sbrk_r+0x1a>
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	bd38      	pop	{r3, r4, r5, pc}
 8001934:	2000116c 	.word	0x2000116c

08001938 <__sread>:
 8001938:	b510      	push	{r4, lr}
 800193a:	460c      	mov	r4, r1
 800193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001940:	f000 f8a0 	bl	8001a84 <_read_r>
 8001944:	2800      	cmp	r0, #0
 8001946:	bfab      	itete	ge
 8001948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800194a:	89a3      	ldrhlt	r3, [r4, #12]
 800194c:	181b      	addge	r3, r3, r0
 800194e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001952:	bfac      	ite	ge
 8001954:	6563      	strge	r3, [r4, #84]	; 0x54
 8001956:	81a3      	strhlt	r3, [r4, #12]
 8001958:	bd10      	pop	{r4, pc}

0800195a <__swrite>:
 800195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800195e:	461f      	mov	r7, r3
 8001960:	898b      	ldrh	r3, [r1, #12]
 8001962:	05db      	lsls	r3, r3, #23
 8001964:	4605      	mov	r5, r0
 8001966:	460c      	mov	r4, r1
 8001968:	4616      	mov	r6, r2
 800196a:	d505      	bpl.n	8001978 <__swrite+0x1e>
 800196c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001970:	2302      	movs	r3, #2
 8001972:	2200      	movs	r2, #0
 8001974:	f000 f868 	bl	8001a48 <_lseek_r>
 8001978:	89a3      	ldrh	r3, [r4, #12]
 800197a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800197e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001982:	81a3      	strh	r3, [r4, #12]
 8001984:	4632      	mov	r2, r6
 8001986:	463b      	mov	r3, r7
 8001988:	4628      	mov	r0, r5
 800198a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800198e:	f000 b817 	b.w	80019c0 <_write_r>

08001992 <__sseek>:
 8001992:	b510      	push	{r4, lr}
 8001994:	460c      	mov	r4, r1
 8001996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800199a:	f000 f855 	bl	8001a48 <_lseek_r>
 800199e:	1c43      	adds	r3, r0, #1
 80019a0:	89a3      	ldrh	r3, [r4, #12]
 80019a2:	bf15      	itete	ne
 80019a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80019a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019ae:	81a3      	strheq	r3, [r4, #12]
 80019b0:	bf18      	it	ne
 80019b2:	81a3      	strhne	r3, [r4, #12]
 80019b4:	bd10      	pop	{r4, pc}

080019b6 <__sclose>:
 80019b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ba:	f000 b813 	b.w	80019e4 <_close_r>
	...

080019c0 <_write_r>:
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	4d07      	ldr	r5, [pc, #28]	; (80019e0 <_write_r+0x20>)
 80019c4:	4604      	mov	r4, r0
 80019c6:	4608      	mov	r0, r1
 80019c8:	4611      	mov	r1, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	602a      	str	r2, [r5, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f7fe ff08 	bl	80007e4 <_write>
 80019d4:	1c43      	adds	r3, r0, #1
 80019d6:	d102      	bne.n	80019de <_write_r+0x1e>
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	b103      	cbz	r3, 80019de <_write_r+0x1e>
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	bd38      	pop	{r3, r4, r5, pc}
 80019e0:	2000116c 	.word	0x2000116c

080019e4 <_close_r>:
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4d06      	ldr	r5, [pc, #24]	; (8001a00 <_close_r+0x1c>)
 80019e8:	2300      	movs	r3, #0
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	602b      	str	r3, [r5, #0]
 80019f0:	f7fe ff14 	bl	800081c <_close>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_close_r+0x1a>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_close_r+0x1a>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	2000116c 	.word	0x2000116c

08001a04 <_fstat_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4d07      	ldr	r5, [pc, #28]	; (8001a24 <_fstat_r+0x20>)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	602b      	str	r3, [r5, #0]
 8001a12:	f7fe ff0f 	bl	8000834 <_fstat>
 8001a16:	1c43      	adds	r3, r0, #1
 8001a18:	d102      	bne.n	8001a20 <_fstat_r+0x1c>
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	b103      	cbz	r3, 8001a20 <_fstat_r+0x1c>
 8001a1e:	6023      	str	r3, [r4, #0]
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	bf00      	nop
 8001a24:	2000116c 	.word	0x2000116c

08001a28 <_isatty_r>:
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4d06      	ldr	r5, [pc, #24]	; (8001a44 <_isatty_r+0x1c>)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4604      	mov	r4, r0
 8001a30:	4608      	mov	r0, r1
 8001a32:	602b      	str	r3, [r5, #0]
 8001a34:	f7fe ff0e 	bl	8000854 <_isatty>
 8001a38:	1c43      	adds	r3, r0, #1
 8001a3a:	d102      	bne.n	8001a42 <_isatty_r+0x1a>
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	b103      	cbz	r3, 8001a42 <_isatty_r+0x1a>
 8001a40:	6023      	str	r3, [r4, #0]
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
 8001a44:	2000116c 	.word	0x2000116c

08001a48 <_lseek_r>:
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	4d07      	ldr	r5, [pc, #28]	; (8001a68 <_lseek_r+0x20>)
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	4608      	mov	r0, r1
 8001a50:	4611      	mov	r1, r2
 8001a52:	2200      	movs	r2, #0
 8001a54:	602a      	str	r2, [r5, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f7fe ff07 	bl	800086a <_lseek>
 8001a5c:	1c43      	adds	r3, r0, #1
 8001a5e:	d102      	bne.n	8001a66 <_lseek_r+0x1e>
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	b103      	cbz	r3, 8001a66 <_lseek_r+0x1e>
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
 8001a68:	2000116c 	.word	0x2000116c

08001a6c <__malloc_lock>:
 8001a6c:	4801      	ldr	r0, [pc, #4]	; (8001a74 <__malloc_lock+0x8>)
 8001a6e:	f7ff be0b 	b.w	8001688 <__retarget_lock_acquire_recursive>
 8001a72:	bf00      	nop
 8001a74:	20001160 	.word	0x20001160

08001a78 <__malloc_unlock>:
 8001a78:	4801      	ldr	r0, [pc, #4]	; (8001a80 <__malloc_unlock+0x8>)
 8001a7a:	f7ff be06 	b.w	800168a <__retarget_lock_release_recursive>
 8001a7e:	bf00      	nop
 8001a80:	20001160 	.word	0x20001160

08001a84 <_read_r>:
 8001a84:	b538      	push	{r3, r4, r5, lr}
 8001a86:	4d07      	ldr	r5, [pc, #28]	; (8001aa4 <_read_r+0x20>)
 8001a88:	4604      	mov	r4, r0
 8001a8a:	4608      	mov	r0, r1
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	602a      	str	r2, [r5, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f7fe fe89 	bl	80007aa <_read>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d102      	bne.n	8001aa2 <_read_r+0x1e>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	b103      	cbz	r3, 8001aa2 <_read_r+0x1e>
 8001aa0:	6023      	str	r3, [r4, #0]
 8001aa2:	bd38      	pop	{r3, r4, r5, pc}
 8001aa4:	2000116c 	.word	0x2000116c

08001aa8 <_init>:
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	bf00      	nop
 8001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aae:	bc08      	pop	{r3}
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	4770      	bx	lr

08001ab4 <_fini>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	bf00      	nop
 8001ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aba:	bc08      	pop	{r3}
 8001abc:	469e      	mov	lr, r3
 8001abe:	4770      	bx	lr
