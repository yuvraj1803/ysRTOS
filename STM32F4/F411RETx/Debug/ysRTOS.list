
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d00  08001d00  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001d00  08001d00  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d00  08001d00  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d00  08001d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d04  08001d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f0  20000064  08001d6c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001154  08001d6c  00021154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e5e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b62  00000000  00000000  00022ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00023a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00023cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bd7  00000000  00000000  00023ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000043bf  00000000  00000000  00026a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055fd1  00000000  00000000  0002ae56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00080e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f2c  00000000  00000000  00080e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001bdc 	.word	0x08001bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001bdc 	.word	0x08001bdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LED_INIT+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LED_INIT+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <LED_INIT+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <LED_INIT+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 10);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <LED_INIT+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <LED_INIT+0x38>)
 80002a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002a6:	6013      	str	r3, [r2, #0]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <LED_ON>:

void LED_ON(void){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

	GPIOA -> ODR |= LED_PIN; /* Set LED_PIN high in GPIOA's output data register */
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <LED_ON+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <LED_ON+0x1c>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020000 	.word	0x40020000

080002dc <LED_OFF>:

void LED_OFF(void){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// set LED pin LOW

	GPIOA -> ODR &= ~LED_PIN; /* Set LED_PIN low in GPIOA's output data register */
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <LED_OFF+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <LED_OFF+0x1c>)
 80002e6:	f023 0320 	bic.w	r3, r3, #32
 80002ea:	6153      	str	r3, [r2, #20]

}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <__io_putchar>:
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);
void uart_tx_init(void);

int __io_putchar(int ch){ /* defined in syscalls.c */
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f855 	bl	80003b4 <uart_write>

	return ch;
 800030a:	687b      	ldr	r3, [r7, #4]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <UART_INIT>:


void UART_INIT(void){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	uart_tx_init();
 8000318:	f000 f802 	bl	8000320 <uart_tx_init>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <uart_tx_init>:

void uart_tx_init(void){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0


	RCC -> AHB1ENR |= GPIOAEN; /* enable clock access to GPIOA */
 8000324:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <uart_tx_init+0x84>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a1e      	ldr	r2, [pc, #120]	; (80003a4 <uart_tx_init+0x84>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set Pin 2 in GPIOA to alternate function mode */
	GPIOA -> MODER &= ~(1U << 4);
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <uart_tx_init+0x88>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <uart_tx_init+0x88>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=  (1U << 5);
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <uart_tx_init+0x88>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <uart_tx_init+0x88>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6013      	str	r3, [r2, #0]

	/* set alternate function type to AF07 (uart2_tx) */
	GPIOA -> AFR[0] |=  (1U << 8);
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <uart_tx_init+0x88>)
 800034a:	6a1b      	ldr	r3, [r3, #32]
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <uart_tx_init+0x88>)
 800034e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000352:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 9);
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <uart_tx_init+0x88>)
 8000356:	6a1b      	ldr	r3, [r3, #32]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <uart_tx_init+0x88>)
 800035a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800035e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 10);
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <uart_tx_init+0x88>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <uart_tx_init+0x88>)
 8000366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <uart_tx_init+0x88>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <uart_tx_init+0x88>)
 8000372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000376:	6213      	str	r3, [r2, #32]

	RCC -> APB1ENR |= UART2EN; /* enable clock access to UART2 */
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <uart_tx_init+0x84>)
 800037a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037c:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <uart_tx_init+0x84>)
 800037e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000382:	6413      	str	r3, [r2, #64]	; 0x40

	set_uart_baudrate(APB1_CLK, UART_BAUDRATE); /* configure UART baudrate) */
 8000384:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000388:	4808      	ldr	r0, [pc, #32]	; (80003ac <uart_tx_init+0x8c>)
 800038a:	f000 f82b 	bl	80003e4 <set_uart_baudrate>

	USART2 -> CR1 = CR1_TE; /* configure transfer direction */
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <uart_tx_init+0x90>)
 8000390:	2208      	movs	r2, #8
 8000392:	60da      	str	r2, [r3, #12]

	USART2 -> CR1 |= CR1_UE; /* enable UART module */
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <uart_tx_init+0x90>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <uart_tx_init+0x90>)
 800039a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039e:	60d3      	str	r3, [r2, #12]

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020000 	.word	0x40020000
 80003ac:	00f42400 	.word	0x00f42400
 80003b0:	40004400 	.word	0x40004400

080003b4 <uart_write>:

static void uart_write(int ch){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 80003bc:	bf00      	nop
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <uart_write+0x2c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <uart_write+0x2c>)
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	6053      	str	r3, [r2, #4]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40004400 	.word	0x40004400

080003e4 <set_uart_baudrate>:

static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = compute_uart_baudrate(periph_clk, baudrate);
 80003ee:	4c05      	ldr	r4, [pc, #20]	; (8000404 <set_uart_baudrate+0x20>)
 80003f0:	6839      	ldr	r1, [r7, #0]
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f000 f808 	bl	8000408 <compute_uart_baudrate>
 80003f8:	4603      	mov	r3, r0
 80003fa:	60a3      	str	r3, [r4, #8]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bd90      	pop	{r4, r7, pc}
 8000404:	40004400 	.word	0x40004400

08000408 <compute_uart_baudrate>:

static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	085a      	lsrs	r2, r3, #1
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	441a      	add	r2, r3
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <__init__>:


#include "init.h"


void __init__(void){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000430:	f7ff ff26 	bl	8000280 <LED_INIT>
	}
	if(__UART_INIT__ == 0x1){
		UART_INIT();
 8000434:	f7ff ff6e 	bl	8000314 <UART_INIT>



	/* Initialise the kernel */

	kernel_init();
 8000438:	f000 f82c 	bl	8000494 <kernel_init>


}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800044c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000450:	2b00      	cmp	r3, #0
 8000452:	db0a      	blt.n	800046a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	490c      	ldr	r1, [pc, #48]	; (800048c <__NVIC_SetPriority+0x4c>)
 800045a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045e:	0112      	lsls	r2, r2, #4
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	440b      	add	r3, r1
 8000464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000468:	e00a      	b.n	8000480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4908      	ldr	r1, [pc, #32]	; (8000490 <__NVIC_SetPriority+0x50>)
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	f003 030f 	and.w	r3, r3, #15
 8000476:	3b04      	subs	r3, #4
 8000478:	0112      	lsls	r2, r2, #4
 800047a:	b2d2      	uxtb	r2, r2
 800047c:	440b      	add	r3, r1
 800047e:	761a      	strb	r2, [r3, #24]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000e100 	.word	0xe000e100
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <kernel_init>:
/*
 * Note: Thread ID is simply the index of the TCB_STACK in which the thread's content is stored.
 * */


void kernel_init(void){
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <kernel_init+0x48>)
 800049a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800049e:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <kernel_init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <kernel_init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <kernel_init+0x54>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	601a      	str	r2, [r3, #0]

	min_periodic_thread_id = MAX_THREADS;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <kernel_init+0x58>)
 80004b4:	2205      	movs	r2, #5
 80004b6:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <kernel_init+0x5c>)
 80004ba:	2209      	movs	r2, #9
 80004bc:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <kernel_init+0x50>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <kernel_init+0x60>)
 80004c6:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <kernel_init+0x58>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <kernel_init+0x64>)
 80004d0:	6013      	str	r3, [r2, #0]


}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	20001118 	.word	0x20001118
 80004e0:	20001134 	.word	0x20001134
 80004e4:	20001124 	.word	0x20001124
 80004e8:	20001128 	.word	0x20001128
 80004ec:	2000112c 	.word	0x2000112c
 80004f0:	20001130 	.word	0x20001130
 80004f4:	2000111c 	.word	0x2000111c
 80004f8:	20001120 	.word	0x20001120

080004fc <stk_init>:

void stk_init(uint32_t thread_id){
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800050a:	fb02 f303 	mul.w	r3, r2, r3
 800050e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <stk_init+0x50>)
 8000514:	1899      	adds	r1, r3, r2
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <stk_init+0x54>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	4413      	add	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4403      	add	r3, r0
 8000524:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <stk_init+0x50>)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800052e:	fb01 f303 	mul.w	r3, r1, r3
 8000532:	4413      	add	r3, r2
 8000534:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800053c:	601a      	str	r2, [r3, #0]

		/*
			(FOR DEBUGGING PURPOSES)
		*/

}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000178 	.word	0x20000178
 8000550:	20000080 	.word	0x20000080

08000554 <kernel_launch>:

void kernel_launch(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <kernel_launch+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <kernel_launch+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <kernel_launch+0x64>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <kernel_launch+0x60>)
 8000572:	3b01      	subs	r3, #1
 8000574:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, SYSTICK_PRIO); /* Set SysTick to low-priority */
 8000576:	210f      	movs	r1, #15
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f7ff ff60 	bl	8000440 <__NVIC_SetPriority>
		NVIC_SetPriority(PendSV_IRQn,  PENDSV_PRIO); /* Set  PendSV to high-priority */
 8000580:	2100      	movs	r1, #0
 8000582:	f06f 0001 	mvn.w	r0, #1
 8000586:	f7ff ff5b 	bl	8000440 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <kernel_launch+0x60>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <kernel_launch+0x60>)
 8000590:	f043 0305 	orr.w	r3, r3, #5
 8000594:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <kernel_launch+0x60>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <kernel_launch+0x60>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a2:	b672      	cpsid	i
}
 80005a4:	bf00      	nop
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 80005a6:	f000 fa7b 	bl	8000aa0 <tim2_1ms_interrupt_init>
		}



		scheduler_launch();
 80005aa:	f000 f907 	bl	80007bc <scheduler_launch>




}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	e000e010 	.word	0xe000e010
 80005b8:	20001118 	.word	0x20001118

080005bc <add_thread>:

void add_thread(void (*thread)(void)){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 80005c4:	4b42      	ldr	r3, [pc, #264]	; (80006d0 <add_thread+0x114>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <add_thread+0x118>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d10a      	bne.n	80005e6 <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 80005d0:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <add_thread+0x11c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	4940      	ldr	r1, [pc, #256]	; (80006dc <add_thread+0x120>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fb4a 	bl	8000c74 <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fb33 	bl	8000c4c <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <add_thread+0x114>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80005ee:	b672      	cpsid	i
}
 80005f0:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 80005f2:	493b      	ldr	r1, [pc, #236]	; (80006e0 <add_thread+0x124>)
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	440b      	add	r3, r1
 8000600:	3308      	adds	r3, #8
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 8000606:	4936      	ldr	r1, [pc, #216]	; (80006e0 <add_thread+0x124>)
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4613      	mov	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	440b      	add	r3, r1
 8000614:	330c      	adds	r3, #12
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0xffffffff; /* non periodic threads */
 800061a:	4931      	ldr	r1, [pc, #196]	; (80006e0 <add_thread+0x124>)
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	440b      	add	r3, r1
 8000628:	3310      	adds	r3, #16
 800062a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800062e:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 8000630:	492b      	ldr	r1, [pc, #172]	; (80006e0 <add_thread+0x124>)
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	440b      	add	r3, r1
 800063e:	3314      	adds	r3, #20
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 8000644:	68f8      	ldr	r0, [r7, #12]
 8000646:	f7ff ff59 	bl	80004fc <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4618      	mov	r0, r3
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <add_thread+0x128>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000660:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <add_thread+0xba>
		__current_ptr__ = &__tcbs__[0];
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <add_thread+0x12c>)
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <add_thread+0x124>)
 800066c:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <add_thread+0x124>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <add_thread+0x124>)
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	e023      	b.n	80006be <add_thread+0x102>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <add_thread+0x114>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4919      	ldr	r1, [pc, #100]	; (80006e0 <add_thread+0x124>)
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	440b      	add	r3, r1
 8000686:	3304      	adds	r3, #4
 8000688:	6819      	ldr	r1, [r3, #0]
 800068a:	4815      	ldr	r0, [pc, #84]	; (80006e0 <add_thread+0x124>)
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	4403      	add	r3, r0
 8000698:	3304      	adds	r3, #4
 800069a:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <add_thread+0x114>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	460b      	mov	r3, r1
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	440b      	add	r3, r1
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <add_thread+0x124>)
 80006ac:	4419      	add	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	; (80006e0 <add_thread+0x124>)
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	4403      	add	r3, r0
 80006ba:	3304      	adds	r3, #4
 80006bc:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <add_thread+0x114>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c4:	b662      	cpsie	i
}
 80006c6:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000111c 	.word	0x2000111c
 80006d4:	20001128 	.word	0x20001128
 80006d8:	20000000 	.word	0x20000000
 80006dc:	08001bf4 	.word	0x08001bf4
 80006e0:	20000080 	.word	0x20000080
 80006e4:	20000178 	.word	0x20000178
 80006e8:	20000170 	.word	0x20000170

080006ec <add_periodic_thread>:

void add_periodic_thread(void (*pthread)(void), uint32_t period){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	 * TIM2_IRQHandler will be called when TIM2->CNT hits 0. This will initiate the context switching process.
	 *
	 *
	 * */

	if(recently_added_periodic_thread_id == max_periodic_thread_id){
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <add_periodic_thread+0xb8>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <add_periodic_thread+0xbc>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d10a      	bne.n	8000718 <add_periodic_thread+0x2c>
		fprintf(stderr, "Cannot add periodic thread %p, max periodic thread limit reached", &pthread);
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <add_periodic_thread+0xc0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	1d3a      	adds	r2, r7, #4
 800070a:	4929      	ldr	r1, [pc, #164]	; (80007b0 <add_periodic_thread+0xc4>)
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fab1 	bl	8000c74 <fiprintf>
		exit(__ADD_PERIODIC_THREAD_FAILURE__);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fa9a 	bl	8000c4c <exit>
	}

	uint32_t pthread_id = recently_added_periodic_thread_id + 1;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <add_periodic_thread+0xb8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop

	__disable_irq();

	__tcbs__[pthread_id].sleeptime = 0;
 8000724:	4923      	ldr	r1, [pc, #140]	; (80007b4 <add_periodic_thread+0xc8>)
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	440b      	add	r3, r1
 8000732:	3308      	adds	r3, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].thread_id = pthread_id;
 8000738:	491e      	ldr	r1, [pc, #120]	; (80007b4 <add_periodic_thread+0xc8>)
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	330c      	adds	r3, #12
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].period = period;
 800074c:	4919      	ldr	r1, [pc, #100]	; (80007b4 <add_periodic_thread+0xc8>)
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	440b      	add	r3, r1
 800075a:	3310      	adds	r3, #16
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].status = THREAD_ACTIVE;
 8000760:	4914      	ldr	r1, [pc, #80]	; (80007b4 <add_periodic_thread+0xc8>)
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	440b      	add	r3, r1
 800076e:	3314      	adds	r3, #20
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]

	stk_init(pthread_id);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f7ff fec1 	bl	80004fc <stk_init>
	TCB_STACK[pthread_id][STACK_SIZE-2] = (uint32_t) pthread;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4618      	mov	r0, r3
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <add_periodic_thread+0xcc>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000786:	fb01 f303 	mul.w	r3, r1, r3
 800078a:	4413      	add	r3, r2
 800078c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000790:	6018      	str	r0, [r3, #0]

	recently_added_periodic_thread_id = pthread_id;
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <add_periodic_thread+0xb8>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000798:	b662      	cpsie	i
}
 800079a:	bf00      	nop

	__enable_irq();



}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20001120 	.word	0x20001120
 80007a8:	20001130 	.word	0x20001130
 80007ac:	20000000 	.word	0x20000000
 80007b0:	08001c24 	.word	0x08001c24
 80007b4:	20000080 	.word	0x20000080
 80007b8:	20000178 	.word	0x20000178

080007bc <scheduler_launch>:
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */
#define ICSR_PENDSVSET		(1U << 28) 		/* PendSV  Exception pending bit*/


void scheduler_launch(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 80007c2:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 80007c4:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 80007c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 80007cc:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 80007d0:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 80007d2:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 80007d4:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 80007d8:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 80007da:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 80007dc:	4770      	bx	lr

}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20000170 	.word	0x20000170

080007ec <PendSV_Handler>:

	/* PendSV_Handler shall be handling the context switch process
	 * in the future versions of the RTOS.
	 */

}
 80007ec:	bf00      	nop
	...

080007f0 <SysTick_Handler>:
		 *	-> Restore all the Registers.
		 * */

		/* SUSPEND CURRENT THREAD */

		__asm("CPSID I");		/* disable global interrupts */
 80007f0:	b672      	cpsid	i
		__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 80007f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <SysTick_Handler+0x20>)
		__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 80007f8:	6801      	ldr	r1, [r0, #0]
		__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 80007fa:	f8c1 d000 	str.w	sp, [r1]
		/* Check if any periodic thread is waiting, if so, load it in instead */


		/* CHOOSE NEXT THREAD */

		__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 80007fe:	6849      	ldr	r1, [r1, #4]
		__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 8000800:	6001      	str	r1, [r0, #0]
		__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 8000802:	f8d1 d000 	ldr.w	sp, [r1]
		__asm("POP {R4-R11}");			/* restore r4-r11 */
 8000806:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("CPSIE I");				/* enable global interrupts */
 800080a:	b662      	cpsie	i
		__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 800080c:	4770      	bx	lr


		//	ICSR |= ICSR_PENDSVSET; /* Trigger the PendSV interrupt handler to perform the context switch.*/
}
 800080e:	bf00      	nop
 8000810:	20000170 	.word	0x20000170

08000814 <pa>:
#include "kernel/kernel.h"

int a = 0;
int b = 0;

void pa(void){
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	while(1){
		a++;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <pa+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a01      	ldr	r2, [pc, #4]	; (8000824 <pa+0x10>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e7f9      	b.n	8000818 <pa+0x4>
 8000824:	20001138 	.word	0x20001138

08000828 <pb>:
	}
}

void pb(void){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	while(1){
		b++;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <pb+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a01      	ldr	r2, [pc, #4]	; (8000838 <pb+0x10>)
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	e7f9      	b.n	800082c <pb+0x4>
 8000838:	2000113c 	.word	0x2000113c

0800083c <on>:
	}
}

void on(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	LED_ON();
 8000840:	f7ff fd3c 	bl	80002bc <LED_ON>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <off>:
void off(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	LED_OFF();
 800084c:	f7ff fd46 	bl	80002dc <LED_OFF>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <main>:


int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	 * */




	__init__(); /* ysRTOS initialisation */
 8000858:	f7ff fde8 	bl	800042c <__init__>

	/* Add all your threads below */

	 add_thread(&pa);
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <main+0x30>)
 800085e:	f7ff fead 	bl	80005bc <add_thread>
	 add_thread(&pb);
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <main+0x34>)
 8000864:	f7ff feaa 	bl	80005bc <add_thread>
	 add_periodic_thread(&on,50);
 8000868:	2132      	movs	r1, #50	; 0x32
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <main+0x38>)
 800086c:	f7ff ff3e 	bl	80006ec <add_periodic_thread>
	 add_periodic_thread(&off,130);
 8000870:	2182      	movs	r1, #130	; 0x82
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <main+0x3c>)
 8000874:	f7ff ff3a 	bl	80006ec <add_periodic_thread>

	/*  */

	kernel_launch();
 8000878:	f7ff fe6c 	bl	8000554 <kernel_launch>
 800087c:	2300      	movs	r3, #0


}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08000815 	.word	0x08000815
 8000888:	08000829 	.word	0x08000829
 800088c:	0800083d 	.word	0x0800083d
 8000890:	08000849 	.word	0x08000849

08000894 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800089e:	f000 f9cf 	bl	8000c40 <__errno>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2216      	movs	r2, #22
 80008a6:	601a      	str	r2, [r3, #0]
  return -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_exit>:

void _exit (int status)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ffe7 	bl	8000894 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008c6:	e7fe      	b.n	80008c6 <_exit+0x12>

080008c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e00a      	b.n	80008f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008da:	f3af 8000 	nop.w
 80008de:	4601      	mov	r1, r0
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	60ba      	str	r2, [r7, #8]
 80008e6:	b2ca      	uxtb	r2, r1
 80008e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3301      	adds	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbf0      	blt.n	80008da <_read+0x12>
  }

  return len;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e009      	b.n	8000928 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fced 	bl	80002fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf1      	blt.n	8000914 <_write+0x12>
  }
  return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_close>:

int _close(int file)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000962:	605a      	str	r2, [r3, #4]
  return 0;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_isatty>:

int _isatty(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f000 f934 	bl	8000c40 <__errno>
 80009d8:	4603      	mov	r3, r0
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20020000 	.word	0x20020000
 8000a04:	00000400 	.word	0x00000400
 8000a08:	20001140 	.word	0x20001140
 8000a0c:	20001158 	.word	0x20001158

08000a10 <__NVIC_EnableIRQ>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	; (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <tim2_1ms_interrupt_init+0x54>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <tim2_1ms_interrupt_init+0x54>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 16000 - 1;	 /*Set timer prescaler*/
 8000ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	2209      	movs	r2, #9
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 8000ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 8000aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 8000ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f7ff ff94 	bl	8000a10 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,TIM2_PRIO);
 8000ae8:	2107      	movs	r1, #7
 8000aea:	201c      	movs	r0, #28
 8000aec:	f7ff ffae 	bl	8000a4c <__NVIC_SetPriority>


}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <TIM2_IRQHandler+0xd4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <TIM2_IRQHandler+0xd8>)
 8000b06:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0a:	0a9b      	lsrs	r3, r3, #10
 8000b0c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <TIM2_IRQHandler+0xd4>)
 8000b18:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 8000b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2a:	b672      	cpsid	i
}
 8000b2c:	bf00      	nop

	__disable_irq();

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <TIM2_IRQHandler+0xdc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	e03c      	b.n	8000bb0 <TIM2_IRQHandler+0xb8>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000b36:	4928      	ldr	r1, [pc, #160]	; (8000bd8 <TIM2_IRQHandler+0xe0>)
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	3314      	adds	r3, #20
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d12e      	bne.n	8000baa <TIM2_IRQHandler+0xb2>
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000b4c:	4922      	ldr	r1, [pc, #136]	; (8000bd8 <TIM2_IRQHandler+0xe0>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	3310      	adds	r3, #16
 8000b5c:	681b      	ldr	r3, [r3, #0]
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d023      	beq.n	8000baa <TIM2_IRQHandler+0xb2>
		   (sys_counter % __tcbs__[current_thread_id].period == 0)){
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <TIM2_IRQHandler+0xd4>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <TIM2_IRQHandler+0xe0>)
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	440b      	add	r3, r1
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4403      	add	r3, r0
 8000b74:	3310      	adds	r3, #16
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8000b7c:	fb01 f303 	mul.w	r3, r1, r3
 8000b80:	1ad3      	subs	r3, r2, r3
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d111      	bne.n	8000baa <TIM2_IRQHandler+0xb2>
			 * Gives the periodic thread, the CPU.
			 * After execution, for "quanta" time, we resume the normal scheduling from where we stopped.
			 *
			 * */

			__current_periodic_ptr__ = &__tcbs__[current_thread_id];
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <TIM2_IRQHandler+0xe0>)
 8000b92:	4413      	add	r3, r2
 8000b94:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <TIM2_IRQHandler+0xe4>)
 8000b96:	6013      	str	r3, [r2, #0]

			/* yield the CPU */
			SysTick->VAL = 0; /* clear SysTick Current Value Register */
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <TIM2_IRQHandler+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
			ICSR |= ICSR_PENDSTSET; /* trigger SysTick */
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <TIM2_IRQHandler+0xec>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <TIM2_IRQHandler+0xec>)
 8000ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ba8:	6013      	str	r3, [r2, #0]
			current_thread_id++)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3301      	adds	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <TIM2_IRQHandler+0xf0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d9bd      	bls.n	8000b36 <TIM2_IRQHandler+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bba:	b662      	cpsie	i
}
 8000bbc:	bf00      	nop
	}

	__enable_irq();


}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20001134 	.word	0x20001134
 8000bd0:	10624dd3 	.word	0x10624dd3
 8000bd4:	2000112c 	.word	0x2000112c
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	20000174 	.word	0x20000174
 8000be0:	e000e010 	.word	0xe000e010
 8000be4:	e000ed04 	.word	0xe000ed04
 8000be8:	20001130 	.word	0x20001130

08000bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1a:	f000 f83d 	bl	8000c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fe19 	bl	8000854 <main>

08000c22 <LoopForever>:

LoopForever:
  b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c30:	08001d08 	.word	0x08001d08
  ldr r2, =_sbss
 8000c34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c38:	20001154 	.word	0x20001154

08000c3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <__errno>:
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <__errno+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000000 	.word	0x20000000

08000c4c <exit>:
 8000c4c:	b508      	push	{r3, lr}
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <exit+0x20>)
 8000c50:	4604      	mov	r4, r0
 8000c52:	b113      	cbz	r3, 8000c5a <exit+0xe>
 8000c54:	2100      	movs	r1, #0
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <exit+0x24>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c60:	b103      	cbz	r3, 8000c64 <exit+0x18>
 8000c62:	4798      	blx	r3
 8000c64:	4620      	mov	r0, r4
 8000c66:	f7ff fe25 	bl	80008b4 <_exit>
 8000c6a:	bf00      	nop
 8000c6c:	00000000 	.word	0x00000000
 8000c70:	08001c68 	.word	0x08001c68

08000c74 <fiprintf>:
 8000c74:	b40e      	push	{r1, r2, r3}
 8000c76:	b503      	push	{r0, r1, lr}
 8000c78:	4601      	mov	r1, r0
 8000c7a:	ab03      	add	r3, sp, #12
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <fiprintf+0x20>)
 8000c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c82:	6800      	ldr	r0, [r0, #0]
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	f000 f85d 	bl	8000d44 <_vfiprintf_r>
 8000c8a:	b002      	add	sp, #8
 8000c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c90:	b003      	add	sp, #12
 8000c92:	4770      	bx	lr
 8000c94:	20000000 	.word	0x20000000

08000c98 <__libc_init_array>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	4d0d      	ldr	r5, [pc, #52]	; (8000cd0 <__libc_init_array+0x38>)
 8000c9c:	4c0d      	ldr	r4, [pc, #52]	; (8000cd4 <__libc_init_array+0x3c>)
 8000c9e:	1b64      	subs	r4, r4, r5
 8000ca0:	10a4      	asrs	r4, r4, #2
 8000ca2:	2600      	movs	r6, #0
 8000ca4:	42a6      	cmp	r6, r4
 8000ca6:	d109      	bne.n	8000cbc <__libc_init_array+0x24>
 8000ca8:	4d0b      	ldr	r5, [pc, #44]	; (8000cd8 <__libc_init_array+0x40>)
 8000caa:	4c0c      	ldr	r4, [pc, #48]	; (8000cdc <__libc_init_array+0x44>)
 8000cac:	f000 ff96 	bl	8001bdc <_init>
 8000cb0:	1b64      	subs	r4, r4, r5
 8000cb2:	10a4      	asrs	r4, r4, #2
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	42a6      	cmp	r6, r4
 8000cb8:	d105      	bne.n	8000cc6 <__libc_init_array+0x2e>
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
 8000cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc0:	4798      	blx	r3
 8000cc2:	3601      	adds	r6, #1
 8000cc4:	e7ee      	b.n	8000ca4 <__libc_init_array+0xc>
 8000cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cca:	4798      	blx	r3
 8000ccc:	3601      	adds	r6, #1
 8000cce:	e7f2      	b.n	8000cb6 <__libc_init_array+0x1e>
 8000cd0:	08001d00 	.word	0x08001d00
 8000cd4:	08001d00 	.word	0x08001d00
 8000cd8:	08001d00 	.word	0x08001d00
 8000cdc:	08001d04 	.word	0x08001d04

08000ce0 <memset>:
 8000ce0:	4402      	add	r2, r0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d100      	bne.n	8000cea <memset+0xa>
 8000ce8:	4770      	bx	lr
 8000cea:	f803 1b01 	strb.w	r1, [r3], #1
 8000cee:	e7f9      	b.n	8000ce4 <memset+0x4>

08000cf0 <__sfputc_r>:
 8000cf0:	6893      	ldr	r3, [r2, #8]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	b410      	push	{r4}
 8000cf8:	6093      	str	r3, [r2, #8]
 8000cfa:	da08      	bge.n	8000d0e <__sfputc_r+0x1e>
 8000cfc:	6994      	ldr	r4, [r2, #24]
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	db01      	blt.n	8000d06 <__sfputc_r+0x16>
 8000d02:	290a      	cmp	r1, #10
 8000d04:	d103      	bne.n	8000d0e <__sfputc_r+0x1e>
 8000d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d0a:	f000 badf 	b.w	80012cc <__swbuf_r>
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	1c58      	adds	r0, r3, #1
 8000d12:	6010      	str	r0, [r2, #0]
 8000d14:	7019      	strb	r1, [r3, #0]
 8000d16:	4608      	mov	r0, r1
 8000d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <__sfputs_r>:
 8000d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d20:	4606      	mov	r6, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	4614      	mov	r4, r2
 8000d26:	18d5      	adds	r5, r2, r3
 8000d28:	42ac      	cmp	r4, r5
 8000d2a:	d101      	bne.n	8000d30 <__sfputs_r+0x12>
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	e007      	b.n	8000d40 <__sfputs_r+0x22>
 8000d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d34:	463a      	mov	r2, r7
 8000d36:	4630      	mov	r0, r6
 8000d38:	f7ff ffda 	bl	8000cf0 <__sfputc_r>
 8000d3c:	1c43      	adds	r3, r0, #1
 8000d3e:	d1f3      	bne.n	8000d28 <__sfputs_r+0xa>
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d44 <_vfiprintf_r>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	460d      	mov	r5, r1
 8000d4a:	b09d      	sub	sp, #116	; 0x74
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	4698      	mov	r8, r3
 8000d50:	4606      	mov	r6, r0
 8000d52:	b118      	cbz	r0, 8000d5c <_vfiprintf_r+0x18>
 8000d54:	6983      	ldr	r3, [r0, #24]
 8000d56:	b90b      	cbnz	r3, 8000d5c <_vfiprintf_r+0x18>
 8000d58:	f000 fc92 	bl	8001680 <__sinit>
 8000d5c:	4b89      	ldr	r3, [pc, #548]	; (8000f84 <_vfiprintf_r+0x240>)
 8000d5e:	429d      	cmp	r5, r3
 8000d60:	d11b      	bne.n	8000d9a <_vfiprintf_r+0x56>
 8000d62:	6875      	ldr	r5, [r6, #4]
 8000d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d66:	07d9      	lsls	r1, r3, #31
 8000d68:	d405      	bmi.n	8000d76 <_vfiprintf_r+0x32>
 8000d6a:	89ab      	ldrh	r3, [r5, #12]
 8000d6c:	059a      	lsls	r2, r3, #22
 8000d6e:	d402      	bmi.n	8000d76 <_vfiprintf_r+0x32>
 8000d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d72:	f000 fd23 	bl	80017bc <__retarget_lock_acquire_recursive>
 8000d76:	89ab      	ldrh	r3, [r5, #12]
 8000d78:	071b      	lsls	r3, r3, #28
 8000d7a:	d501      	bpl.n	8000d80 <_vfiprintf_r+0x3c>
 8000d7c:	692b      	ldr	r3, [r5, #16]
 8000d7e:	b9eb      	cbnz	r3, 8000dbc <_vfiprintf_r+0x78>
 8000d80:	4629      	mov	r1, r5
 8000d82:	4630      	mov	r0, r6
 8000d84:	f000 faf4 	bl	8001370 <__swsetup_r>
 8000d88:	b1c0      	cbz	r0, 8000dbc <_vfiprintf_r+0x78>
 8000d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d8c:	07dc      	lsls	r4, r3, #31
 8000d8e:	d50e      	bpl.n	8000dae <_vfiprintf_r+0x6a>
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d94:	b01d      	add	sp, #116	; 0x74
 8000d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <_vfiprintf_r+0x244>)
 8000d9c:	429d      	cmp	r5, r3
 8000d9e:	d101      	bne.n	8000da4 <_vfiprintf_r+0x60>
 8000da0:	68b5      	ldr	r5, [r6, #8]
 8000da2:	e7df      	b.n	8000d64 <_vfiprintf_r+0x20>
 8000da4:	4b79      	ldr	r3, [pc, #484]	; (8000f8c <_vfiprintf_r+0x248>)
 8000da6:	429d      	cmp	r5, r3
 8000da8:	bf08      	it	eq
 8000daa:	68f5      	ldreq	r5, [r6, #12]
 8000dac:	e7da      	b.n	8000d64 <_vfiprintf_r+0x20>
 8000dae:	89ab      	ldrh	r3, [r5, #12]
 8000db0:	0598      	lsls	r0, r3, #22
 8000db2:	d4ed      	bmi.n	8000d90 <_vfiprintf_r+0x4c>
 8000db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000db6:	f000 fd02 	bl	80017be <__retarget_lock_release_recursive>
 8000dba:	e7e9      	b.n	8000d90 <_vfiprintf_r+0x4c>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dca:	2330      	movs	r3, #48	; 0x30
 8000dcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000f90 <_vfiprintf_r+0x24c>
 8000dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dd4:	f04f 0901 	mov.w	r9, #1
 8000dd8:	4623      	mov	r3, r4
 8000dda:	469a      	mov	sl, r3
 8000ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000de0:	b10a      	cbz	r2, 8000de6 <_vfiprintf_r+0xa2>
 8000de2:	2a25      	cmp	r2, #37	; 0x25
 8000de4:	d1f9      	bne.n	8000dda <_vfiprintf_r+0x96>
 8000de6:	ebba 0b04 	subs.w	fp, sl, r4
 8000dea:	d00b      	beq.n	8000e04 <_vfiprintf_r+0xc0>
 8000dec:	465b      	mov	r3, fp
 8000dee:	4622      	mov	r2, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	4630      	mov	r0, r6
 8000df4:	f7ff ff93 	bl	8000d1e <__sfputs_r>
 8000df8:	3001      	adds	r0, #1
 8000dfa:	f000 80aa 	beq.w	8000f52 <_vfiprintf_r+0x20e>
 8000dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e00:	445a      	add	r2, fp
 8000e02:	9209      	str	r2, [sp, #36]	; 0x24
 8000e04:	f89a 3000 	ldrb.w	r3, [sl]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80a2 	beq.w	8000f52 <_vfiprintf_r+0x20e>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e18:	f10a 0a01 	add.w	sl, sl, #1
 8000e1c:	9304      	str	r3, [sp, #16]
 8000e1e:	9307      	str	r3, [sp, #28]
 8000e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e24:	931a      	str	r3, [sp, #104]	; 0x68
 8000e26:	4654      	mov	r4, sl
 8000e28:	2205      	movs	r2, #5
 8000e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2e:	4858      	ldr	r0, [pc, #352]	; (8000f90 <_vfiprintf_r+0x24c>)
 8000e30:	f7ff f9d6 	bl	80001e0 <memchr>
 8000e34:	9a04      	ldr	r2, [sp, #16]
 8000e36:	b9d8      	cbnz	r0, 8000e70 <_vfiprintf_r+0x12c>
 8000e38:	06d1      	lsls	r1, r2, #27
 8000e3a:	bf44      	itt	mi
 8000e3c:	2320      	movmi	r3, #32
 8000e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e42:	0713      	lsls	r3, r2, #28
 8000e44:	bf44      	itt	mi
 8000e46:	232b      	movmi	r3, #43	; 0x2b
 8000e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e50:	2b2a      	cmp	r3, #42	; 0x2a
 8000e52:	d015      	beq.n	8000e80 <_vfiprintf_r+0x13c>
 8000e54:	9a07      	ldr	r2, [sp, #28]
 8000e56:	4654      	mov	r4, sl
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f04f 0c0a 	mov.w	ip, #10
 8000e5e:	4621      	mov	r1, r4
 8000e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e64:	3b30      	subs	r3, #48	; 0x30
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	d94e      	bls.n	8000f08 <_vfiprintf_r+0x1c4>
 8000e6a:	b1b0      	cbz	r0, 8000e9a <_vfiprintf_r+0x156>
 8000e6c:	9207      	str	r2, [sp, #28]
 8000e6e:	e014      	b.n	8000e9a <_vfiprintf_r+0x156>
 8000e70:	eba0 0308 	sub.w	r3, r0, r8
 8000e74:	fa09 f303 	lsl.w	r3, r9, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	9304      	str	r3, [sp, #16]
 8000e7c:	46a2      	mov	sl, r4
 8000e7e:	e7d2      	b.n	8000e26 <_vfiprintf_r+0xe2>
 8000e80:	9b03      	ldr	r3, [sp, #12]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	9103      	str	r1, [sp, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bfbb      	ittet	lt
 8000e8c:	425b      	neglt	r3, r3
 8000e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e92:	9307      	strge	r3, [sp, #28]
 8000e94:	9307      	strlt	r3, [sp, #28]
 8000e96:	bfb8      	it	lt
 8000e98:	9204      	strlt	r2, [sp, #16]
 8000e9a:	7823      	ldrb	r3, [r4, #0]
 8000e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e9e:	d10c      	bne.n	8000eba <_vfiprintf_r+0x176>
 8000ea0:	7863      	ldrb	r3, [r4, #1]
 8000ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ea4:	d135      	bne.n	8000f12 <_vfiprintf_r+0x1ce>
 8000ea6:	9b03      	ldr	r3, [sp, #12]
 8000ea8:	1d1a      	adds	r2, r3, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	9203      	str	r2, [sp, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bfb8      	it	lt
 8000eb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000eb6:	3402      	adds	r4, #2
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000fa0 <_vfiprintf_r+0x25c>
 8000ebe:	7821      	ldrb	r1, [r4, #0]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4650      	mov	r0, sl
 8000ec4:	f7ff f98c 	bl	80001e0 <memchr>
 8000ec8:	b140      	cbz	r0, 8000edc <_vfiprintf_r+0x198>
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	eba0 000a 	sub.w	r0, r0, sl
 8000ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ed4:	9b04      	ldr	r3, [sp, #16]
 8000ed6:	4303      	orrs	r3, r0
 8000ed8:	3401      	adds	r4, #1
 8000eda:	9304      	str	r3, [sp, #16]
 8000edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ee0:	482c      	ldr	r0, [pc, #176]	; (8000f94 <_vfiprintf_r+0x250>)
 8000ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ee6:	2206      	movs	r2, #6
 8000ee8:	f7ff f97a 	bl	80001e0 <memchr>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d03f      	beq.n	8000f70 <_vfiprintf_r+0x22c>
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <_vfiprintf_r+0x254>)
 8000ef2:	bb1b      	cbnz	r3, 8000f3c <_vfiprintf_r+0x1f8>
 8000ef4:	9b03      	ldr	r3, [sp, #12]
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	f023 0307 	bic.w	r3, r3, #7
 8000efc:	3308      	adds	r3, #8
 8000efe:	9303      	str	r3, [sp, #12]
 8000f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f02:	443b      	add	r3, r7
 8000f04:	9309      	str	r3, [sp, #36]	; 0x24
 8000f06:	e767      	b.n	8000dd8 <_vfiprintf_r+0x94>
 8000f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f0c:	460c      	mov	r4, r1
 8000f0e:	2001      	movs	r0, #1
 8000f10:	e7a5      	b.n	8000e5e <_vfiprintf_r+0x11a>
 8000f12:	2300      	movs	r3, #0
 8000f14:	3401      	adds	r4, #1
 8000f16:	9305      	str	r3, [sp, #20]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 0c0a 	mov.w	ip, #10
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f24:	3a30      	subs	r2, #48	; 0x30
 8000f26:	2a09      	cmp	r2, #9
 8000f28:	d903      	bls.n	8000f32 <_vfiprintf_r+0x1ee>
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0c5      	beq.n	8000eba <_vfiprintf_r+0x176>
 8000f2e:	9105      	str	r1, [sp, #20]
 8000f30:	e7c3      	b.n	8000eba <_vfiprintf_r+0x176>
 8000f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f36:	4604      	mov	r4, r0
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e7f0      	b.n	8000f1e <_vfiprintf_r+0x1da>
 8000f3c:	ab03      	add	r3, sp, #12
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	462a      	mov	r2, r5
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <_vfiprintf_r+0x258>)
 8000f44:	a904      	add	r1, sp, #16
 8000f46:	4630      	mov	r0, r6
 8000f48:	f3af 8000 	nop.w
 8000f4c:	4607      	mov	r7, r0
 8000f4e:	1c78      	adds	r0, r7, #1
 8000f50:	d1d6      	bne.n	8000f00 <_vfiprintf_r+0x1bc>
 8000f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f54:	07d9      	lsls	r1, r3, #31
 8000f56:	d405      	bmi.n	8000f64 <_vfiprintf_r+0x220>
 8000f58:	89ab      	ldrh	r3, [r5, #12]
 8000f5a:	059a      	lsls	r2, r3, #22
 8000f5c:	d402      	bmi.n	8000f64 <_vfiprintf_r+0x220>
 8000f5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f60:	f000 fc2d 	bl	80017be <__retarget_lock_release_recursive>
 8000f64:	89ab      	ldrh	r3, [r5, #12]
 8000f66:	065b      	lsls	r3, r3, #25
 8000f68:	f53f af12 	bmi.w	8000d90 <_vfiprintf_r+0x4c>
 8000f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f6e:	e711      	b.n	8000d94 <_vfiprintf_r+0x50>
 8000f70:	ab03      	add	r3, sp, #12
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	462a      	mov	r2, r5
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <_vfiprintf_r+0x258>)
 8000f78:	a904      	add	r1, sp, #16
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	f000 f880 	bl	8001080 <_printf_i>
 8000f80:	e7e4      	b.n	8000f4c <_vfiprintf_r+0x208>
 8000f82:	bf00      	nop
 8000f84:	08001cc0 	.word	0x08001cc0
 8000f88:	08001ce0 	.word	0x08001ce0
 8000f8c:	08001ca0 	.word	0x08001ca0
 8000f90:	08001c6c 	.word	0x08001c6c
 8000f94:	08001c76 	.word	0x08001c76
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	08000d1f 	.word	0x08000d1f
 8000fa0:	08001c72 	.word	0x08001c72

08000fa4 <_printf_common>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	4616      	mov	r6, r2
 8000faa:	4699      	mov	r9, r3
 8000fac:	688a      	ldr	r2, [r1, #8]
 8000fae:	690b      	ldr	r3, [r1, #16]
 8000fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	bfb8      	it	lt
 8000fb8:	4613      	movlt	r3, r2
 8000fba:	6033      	str	r3, [r6, #0]
 8000fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fc0:	4607      	mov	r7, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	b10a      	cbz	r2, 8000fca <_printf_common+0x26>
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	6033      	str	r3, [r6, #0]
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	0699      	lsls	r1, r3, #26
 8000fce:	bf42      	ittt	mi
 8000fd0:	6833      	ldrmi	r3, [r6, #0]
 8000fd2:	3302      	addmi	r3, #2
 8000fd4:	6033      	strmi	r3, [r6, #0]
 8000fd6:	6825      	ldr	r5, [r4, #0]
 8000fd8:	f015 0506 	ands.w	r5, r5, #6
 8000fdc:	d106      	bne.n	8000fec <_printf_common+0x48>
 8000fde:	f104 0a19 	add.w	sl, r4, #25
 8000fe2:	68e3      	ldr	r3, [r4, #12]
 8000fe4:	6832      	ldr	r2, [r6, #0]
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	42ab      	cmp	r3, r5
 8000fea:	dc26      	bgt.n	800103a <_printf_common+0x96>
 8000fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	bf18      	it	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	0692      	lsls	r2, r2, #26
 8000ffa:	d42b      	bmi.n	8001054 <_printf_common+0xb0>
 8000ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001000:	4649      	mov	r1, r9
 8001002:	4638      	mov	r0, r7
 8001004:	47c0      	blx	r8
 8001006:	3001      	adds	r0, #1
 8001008:	d01e      	beq.n	8001048 <_printf_common+0xa4>
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	68e5      	ldr	r5, [r4, #12]
 800100e:	6832      	ldr	r2, [r6, #0]
 8001010:	f003 0306 	and.w	r3, r3, #6
 8001014:	2b04      	cmp	r3, #4
 8001016:	bf08      	it	eq
 8001018:	1aad      	subeq	r5, r5, r2
 800101a:	68a3      	ldr	r3, [r4, #8]
 800101c:	6922      	ldr	r2, [r4, #16]
 800101e:	bf0c      	ite	eq
 8001020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001024:	2500      	movne	r5, #0
 8001026:	4293      	cmp	r3, r2
 8001028:	bfc4      	itt	gt
 800102a:	1a9b      	subgt	r3, r3, r2
 800102c:	18ed      	addgt	r5, r5, r3
 800102e:	2600      	movs	r6, #0
 8001030:	341a      	adds	r4, #26
 8001032:	42b5      	cmp	r5, r6
 8001034:	d11a      	bne.n	800106c <_printf_common+0xc8>
 8001036:	2000      	movs	r0, #0
 8001038:	e008      	b.n	800104c <_printf_common+0xa8>
 800103a:	2301      	movs	r3, #1
 800103c:	4652      	mov	r2, sl
 800103e:	4649      	mov	r1, r9
 8001040:	4638      	mov	r0, r7
 8001042:	47c0      	blx	r8
 8001044:	3001      	adds	r0, #1
 8001046:	d103      	bne.n	8001050 <_printf_common+0xac>
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	3501      	adds	r5, #1
 8001052:	e7c6      	b.n	8000fe2 <_printf_common+0x3e>
 8001054:	18e1      	adds	r1, r4, r3
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800105e:	4422      	add	r2, r4
 8001060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001068:	3302      	adds	r3, #2
 800106a:	e7c7      	b.n	8000ffc <_printf_common+0x58>
 800106c:	2301      	movs	r3, #1
 800106e:	4622      	mov	r2, r4
 8001070:	4649      	mov	r1, r9
 8001072:	4638      	mov	r0, r7
 8001074:	47c0      	blx	r8
 8001076:	3001      	adds	r0, #1
 8001078:	d0e6      	beq.n	8001048 <_printf_common+0xa4>
 800107a:	3601      	adds	r6, #1
 800107c:	e7d9      	b.n	8001032 <_printf_common+0x8e>
	...

08001080 <_printf_i>:
 8001080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001084:	7e0f      	ldrb	r7, [r1, #24]
 8001086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001088:	2f78      	cmp	r7, #120	; 0x78
 800108a:	4691      	mov	r9, r2
 800108c:	4680      	mov	r8, r0
 800108e:	460c      	mov	r4, r1
 8001090:	469a      	mov	sl, r3
 8001092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001096:	d807      	bhi.n	80010a8 <_printf_i+0x28>
 8001098:	2f62      	cmp	r7, #98	; 0x62
 800109a:	d80a      	bhi.n	80010b2 <_printf_i+0x32>
 800109c:	2f00      	cmp	r7, #0
 800109e:	f000 80d8 	beq.w	8001252 <_printf_i+0x1d2>
 80010a2:	2f58      	cmp	r7, #88	; 0x58
 80010a4:	f000 80a3 	beq.w	80011ee <_printf_i+0x16e>
 80010a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010b0:	e03a      	b.n	8001128 <_printf_i+0xa8>
 80010b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010b6:	2b15      	cmp	r3, #21
 80010b8:	d8f6      	bhi.n	80010a8 <_printf_i+0x28>
 80010ba:	a101      	add	r1, pc, #4	; (adr r1, 80010c0 <_printf_i+0x40>)
 80010bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010c0:	08001119 	.word	0x08001119
 80010c4:	0800112d 	.word	0x0800112d
 80010c8:	080010a9 	.word	0x080010a9
 80010cc:	080010a9 	.word	0x080010a9
 80010d0:	080010a9 	.word	0x080010a9
 80010d4:	080010a9 	.word	0x080010a9
 80010d8:	0800112d 	.word	0x0800112d
 80010dc:	080010a9 	.word	0x080010a9
 80010e0:	080010a9 	.word	0x080010a9
 80010e4:	080010a9 	.word	0x080010a9
 80010e8:	080010a9 	.word	0x080010a9
 80010ec:	08001239 	.word	0x08001239
 80010f0:	0800115d 	.word	0x0800115d
 80010f4:	0800121b 	.word	0x0800121b
 80010f8:	080010a9 	.word	0x080010a9
 80010fc:	080010a9 	.word	0x080010a9
 8001100:	0800125b 	.word	0x0800125b
 8001104:	080010a9 	.word	0x080010a9
 8001108:	0800115d 	.word	0x0800115d
 800110c:	080010a9 	.word	0x080010a9
 8001110:	080010a9 	.word	0x080010a9
 8001114:	08001223 	.word	0x08001223
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	1d1a      	adds	r2, r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	602a      	str	r2, [r5, #0]
 8001120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001128:	2301      	movs	r3, #1
 800112a:	e0a3      	b.n	8001274 <_printf_i+0x1f4>
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	6829      	ldr	r1, [r5, #0]
 8001130:	0606      	lsls	r6, r0, #24
 8001132:	f101 0304 	add.w	r3, r1, #4
 8001136:	d50a      	bpl.n	800114e <_printf_i+0xce>
 8001138:	680e      	ldr	r6, [r1, #0]
 800113a:	602b      	str	r3, [r5, #0]
 800113c:	2e00      	cmp	r6, #0
 800113e:	da03      	bge.n	8001148 <_printf_i+0xc8>
 8001140:	232d      	movs	r3, #45	; 0x2d
 8001142:	4276      	negs	r6, r6
 8001144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001148:	485e      	ldr	r0, [pc, #376]	; (80012c4 <_printf_i+0x244>)
 800114a:	230a      	movs	r3, #10
 800114c:	e019      	b.n	8001182 <_printf_i+0x102>
 800114e:	680e      	ldr	r6, [r1, #0]
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001156:	bf18      	it	ne
 8001158:	b236      	sxthne	r6, r6
 800115a:	e7ef      	b.n	800113c <_printf_i+0xbc>
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	1d19      	adds	r1, r3, #4
 8001162:	6029      	str	r1, [r5, #0]
 8001164:	0601      	lsls	r1, r0, #24
 8001166:	d501      	bpl.n	800116c <_printf_i+0xec>
 8001168:	681e      	ldr	r6, [r3, #0]
 800116a:	e002      	b.n	8001172 <_printf_i+0xf2>
 800116c:	0646      	lsls	r6, r0, #25
 800116e:	d5fb      	bpl.n	8001168 <_printf_i+0xe8>
 8001170:	881e      	ldrh	r6, [r3, #0]
 8001172:	4854      	ldr	r0, [pc, #336]	; (80012c4 <_printf_i+0x244>)
 8001174:	2f6f      	cmp	r7, #111	; 0x6f
 8001176:	bf0c      	ite	eq
 8001178:	2308      	moveq	r3, #8
 800117a:	230a      	movne	r3, #10
 800117c:	2100      	movs	r1, #0
 800117e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001182:	6865      	ldr	r5, [r4, #4]
 8001184:	60a5      	str	r5, [r4, #8]
 8001186:	2d00      	cmp	r5, #0
 8001188:	bfa2      	ittt	ge
 800118a:	6821      	ldrge	r1, [r4, #0]
 800118c:	f021 0104 	bicge.w	r1, r1, #4
 8001190:	6021      	strge	r1, [r4, #0]
 8001192:	b90e      	cbnz	r6, 8001198 <_printf_i+0x118>
 8001194:	2d00      	cmp	r5, #0
 8001196:	d04d      	beq.n	8001234 <_printf_i+0x1b4>
 8001198:	4615      	mov	r5, r2
 800119a:	fbb6 f1f3 	udiv	r1, r6, r3
 800119e:	fb03 6711 	mls	r7, r3, r1, r6
 80011a2:	5dc7      	ldrb	r7, [r0, r7]
 80011a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80011a8:	4637      	mov	r7, r6
 80011aa:	42bb      	cmp	r3, r7
 80011ac:	460e      	mov	r6, r1
 80011ae:	d9f4      	bls.n	800119a <_printf_i+0x11a>
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d10b      	bne.n	80011cc <_printf_i+0x14c>
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	07de      	lsls	r6, r3, #31
 80011b8:	d508      	bpl.n	80011cc <_printf_i+0x14c>
 80011ba:	6923      	ldr	r3, [r4, #16]
 80011bc:	6861      	ldr	r1, [r4, #4]
 80011be:	4299      	cmp	r1, r3
 80011c0:	bfde      	ittt	le
 80011c2:	2330      	movle	r3, #48	; 0x30
 80011c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80011cc:	1b52      	subs	r2, r2, r5
 80011ce:	6122      	str	r2, [r4, #16]
 80011d0:	f8cd a000 	str.w	sl, [sp]
 80011d4:	464b      	mov	r3, r9
 80011d6:	aa03      	add	r2, sp, #12
 80011d8:	4621      	mov	r1, r4
 80011da:	4640      	mov	r0, r8
 80011dc:	f7ff fee2 	bl	8000fa4 <_printf_common>
 80011e0:	3001      	adds	r0, #1
 80011e2:	d14c      	bne.n	800127e <_printf_i+0x1fe>
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e8:	b004      	add	sp, #16
 80011ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ee:	4835      	ldr	r0, [pc, #212]	; (80012c4 <_printf_i+0x244>)
 80011f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80011f4:	6829      	ldr	r1, [r5, #0]
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80011fc:	6029      	str	r1, [r5, #0]
 80011fe:	061d      	lsls	r5, r3, #24
 8001200:	d514      	bpl.n	800122c <_printf_i+0x1ac>
 8001202:	07df      	lsls	r7, r3, #31
 8001204:	bf44      	itt	mi
 8001206:	f043 0320 	orrmi.w	r3, r3, #32
 800120a:	6023      	strmi	r3, [r4, #0]
 800120c:	b91e      	cbnz	r6, 8001216 <_printf_i+0x196>
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	f023 0320 	bic.w	r3, r3, #32
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	2310      	movs	r3, #16
 8001218:	e7b0      	b.n	800117c <_printf_i+0xfc>
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	2378      	movs	r3, #120	; 0x78
 8001224:	4828      	ldr	r0, [pc, #160]	; (80012c8 <_printf_i+0x248>)
 8001226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800122a:	e7e3      	b.n	80011f4 <_printf_i+0x174>
 800122c:	0659      	lsls	r1, r3, #25
 800122e:	bf48      	it	mi
 8001230:	b2b6      	uxthmi	r6, r6
 8001232:	e7e6      	b.n	8001202 <_printf_i+0x182>
 8001234:	4615      	mov	r5, r2
 8001236:	e7bb      	b.n	80011b0 <_printf_i+0x130>
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	6826      	ldr	r6, [r4, #0]
 800123c:	6961      	ldr	r1, [r4, #20]
 800123e:	1d18      	adds	r0, r3, #4
 8001240:	6028      	str	r0, [r5, #0]
 8001242:	0635      	lsls	r5, r6, #24
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	d501      	bpl.n	800124c <_printf_i+0x1cc>
 8001248:	6019      	str	r1, [r3, #0]
 800124a:	e002      	b.n	8001252 <_printf_i+0x1d2>
 800124c:	0670      	lsls	r0, r6, #25
 800124e:	d5fb      	bpl.n	8001248 <_printf_i+0x1c8>
 8001250:	8019      	strh	r1, [r3, #0]
 8001252:	2300      	movs	r3, #0
 8001254:	6123      	str	r3, [r4, #16]
 8001256:	4615      	mov	r5, r2
 8001258:	e7ba      	b.n	80011d0 <_printf_i+0x150>
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	1d1a      	adds	r2, r3, #4
 800125e:	602a      	str	r2, [r5, #0]
 8001260:	681d      	ldr	r5, [r3, #0]
 8001262:	6862      	ldr	r2, [r4, #4]
 8001264:	2100      	movs	r1, #0
 8001266:	4628      	mov	r0, r5
 8001268:	f7fe ffba 	bl	80001e0 <memchr>
 800126c:	b108      	cbz	r0, 8001272 <_printf_i+0x1f2>
 800126e:	1b40      	subs	r0, r0, r5
 8001270:	6060      	str	r0, [r4, #4]
 8001272:	6863      	ldr	r3, [r4, #4]
 8001274:	6123      	str	r3, [r4, #16]
 8001276:	2300      	movs	r3, #0
 8001278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800127c:	e7a8      	b.n	80011d0 <_printf_i+0x150>
 800127e:	6923      	ldr	r3, [r4, #16]
 8001280:	462a      	mov	r2, r5
 8001282:	4649      	mov	r1, r9
 8001284:	4640      	mov	r0, r8
 8001286:	47d0      	blx	sl
 8001288:	3001      	adds	r0, #1
 800128a:	d0ab      	beq.n	80011e4 <_printf_i+0x164>
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	079b      	lsls	r3, r3, #30
 8001290:	d413      	bmi.n	80012ba <_printf_i+0x23a>
 8001292:	68e0      	ldr	r0, [r4, #12]
 8001294:	9b03      	ldr	r3, [sp, #12]
 8001296:	4298      	cmp	r0, r3
 8001298:	bfb8      	it	lt
 800129a:	4618      	movlt	r0, r3
 800129c:	e7a4      	b.n	80011e8 <_printf_i+0x168>
 800129e:	2301      	movs	r3, #1
 80012a0:	4632      	mov	r2, r6
 80012a2:	4649      	mov	r1, r9
 80012a4:	4640      	mov	r0, r8
 80012a6:	47d0      	blx	sl
 80012a8:	3001      	adds	r0, #1
 80012aa:	d09b      	beq.n	80011e4 <_printf_i+0x164>
 80012ac:	3501      	adds	r5, #1
 80012ae:	68e3      	ldr	r3, [r4, #12]
 80012b0:	9903      	ldr	r1, [sp, #12]
 80012b2:	1a5b      	subs	r3, r3, r1
 80012b4:	42ab      	cmp	r3, r5
 80012b6:	dcf2      	bgt.n	800129e <_printf_i+0x21e>
 80012b8:	e7eb      	b.n	8001292 <_printf_i+0x212>
 80012ba:	2500      	movs	r5, #0
 80012bc:	f104 0619 	add.w	r6, r4, #25
 80012c0:	e7f5      	b.n	80012ae <_printf_i+0x22e>
 80012c2:	bf00      	nop
 80012c4:	08001c7d 	.word	0x08001c7d
 80012c8:	08001c8e 	.word	0x08001c8e

080012cc <__swbuf_r>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	460e      	mov	r6, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	4605      	mov	r5, r0
 80012d4:	b118      	cbz	r0, 80012de <__swbuf_r+0x12>
 80012d6:	6983      	ldr	r3, [r0, #24]
 80012d8:	b90b      	cbnz	r3, 80012de <__swbuf_r+0x12>
 80012da:	f000 f9d1 	bl	8001680 <__sinit>
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <__swbuf_r+0x98>)
 80012e0:	429c      	cmp	r4, r3
 80012e2:	d12b      	bne.n	800133c <__swbuf_r+0x70>
 80012e4:	686c      	ldr	r4, [r5, #4]
 80012e6:	69a3      	ldr	r3, [r4, #24]
 80012e8:	60a3      	str	r3, [r4, #8]
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	071a      	lsls	r2, r3, #28
 80012ee:	d52f      	bpl.n	8001350 <__swbuf_r+0x84>
 80012f0:	6923      	ldr	r3, [r4, #16]
 80012f2:	b36b      	cbz	r3, 8001350 <__swbuf_r+0x84>
 80012f4:	6923      	ldr	r3, [r4, #16]
 80012f6:	6820      	ldr	r0, [r4, #0]
 80012f8:	1ac0      	subs	r0, r0, r3
 80012fa:	6963      	ldr	r3, [r4, #20]
 80012fc:	b2f6      	uxtb	r6, r6
 80012fe:	4283      	cmp	r3, r0
 8001300:	4637      	mov	r7, r6
 8001302:	dc04      	bgt.n	800130e <__swbuf_r+0x42>
 8001304:	4621      	mov	r1, r4
 8001306:	4628      	mov	r0, r5
 8001308:	f000 f926 	bl	8001558 <_fflush_r>
 800130c:	bb30      	cbnz	r0, 800135c <__swbuf_r+0x90>
 800130e:	68a3      	ldr	r3, [r4, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60a3      	str	r3, [r4, #8]
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	6022      	str	r2, [r4, #0]
 800131a:	701e      	strb	r6, [r3, #0]
 800131c:	6963      	ldr	r3, [r4, #20]
 800131e:	3001      	adds	r0, #1
 8001320:	4283      	cmp	r3, r0
 8001322:	d004      	beq.n	800132e <__swbuf_r+0x62>
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	07db      	lsls	r3, r3, #31
 8001328:	d506      	bpl.n	8001338 <__swbuf_r+0x6c>
 800132a:	2e0a      	cmp	r6, #10
 800132c:	d104      	bne.n	8001338 <__swbuf_r+0x6c>
 800132e:	4621      	mov	r1, r4
 8001330:	4628      	mov	r0, r5
 8001332:	f000 f911 	bl	8001558 <_fflush_r>
 8001336:	b988      	cbnz	r0, 800135c <__swbuf_r+0x90>
 8001338:	4638      	mov	r0, r7
 800133a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <__swbuf_r+0x9c>)
 800133e:	429c      	cmp	r4, r3
 8001340:	d101      	bne.n	8001346 <__swbuf_r+0x7a>
 8001342:	68ac      	ldr	r4, [r5, #8]
 8001344:	e7cf      	b.n	80012e6 <__swbuf_r+0x1a>
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <__swbuf_r+0xa0>)
 8001348:	429c      	cmp	r4, r3
 800134a:	bf08      	it	eq
 800134c:	68ec      	ldreq	r4, [r5, #12]
 800134e:	e7ca      	b.n	80012e6 <__swbuf_r+0x1a>
 8001350:	4621      	mov	r1, r4
 8001352:	4628      	mov	r0, r5
 8001354:	f000 f80c 	bl	8001370 <__swsetup_r>
 8001358:	2800      	cmp	r0, #0
 800135a:	d0cb      	beq.n	80012f4 <__swbuf_r+0x28>
 800135c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001360:	e7ea      	b.n	8001338 <__swbuf_r+0x6c>
 8001362:	bf00      	nop
 8001364:	08001cc0 	.word	0x08001cc0
 8001368:	08001ce0 	.word	0x08001ce0
 800136c:	08001ca0 	.word	0x08001ca0

08001370 <__swsetup_r>:
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <__swsetup_r+0xcc>)
 8001372:	b570      	push	{r4, r5, r6, lr}
 8001374:	681d      	ldr	r5, [r3, #0]
 8001376:	4606      	mov	r6, r0
 8001378:	460c      	mov	r4, r1
 800137a:	b125      	cbz	r5, 8001386 <__swsetup_r+0x16>
 800137c:	69ab      	ldr	r3, [r5, #24]
 800137e:	b913      	cbnz	r3, 8001386 <__swsetup_r+0x16>
 8001380:	4628      	mov	r0, r5
 8001382:	f000 f97d 	bl	8001680 <__sinit>
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <__swsetup_r+0xd0>)
 8001388:	429c      	cmp	r4, r3
 800138a:	d10f      	bne.n	80013ac <__swsetup_r+0x3c>
 800138c:	686c      	ldr	r4, [r5, #4]
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001394:	0719      	lsls	r1, r3, #28
 8001396:	d42c      	bmi.n	80013f2 <__swsetup_r+0x82>
 8001398:	06dd      	lsls	r5, r3, #27
 800139a:	d411      	bmi.n	80013c0 <__swsetup_r+0x50>
 800139c:	2309      	movs	r3, #9
 800139e:	6033      	str	r3, [r6, #0]
 80013a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013a4:	81a3      	strh	r3, [r4, #12]
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013aa:	e03e      	b.n	800142a <__swsetup_r+0xba>
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <__swsetup_r+0xd4>)
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d101      	bne.n	80013b6 <__swsetup_r+0x46>
 80013b2:	68ac      	ldr	r4, [r5, #8]
 80013b4:	e7eb      	b.n	800138e <__swsetup_r+0x1e>
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <__swsetup_r+0xd8>)
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf08      	it	eq
 80013bc:	68ec      	ldreq	r4, [r5, #12]
 80013be:	e7e6      	b.n	800138e <__swsetup_r+0x1e>
 80013c0:	0758      	lsls	r0, r3, #29
 80013c2:	d512      	bpl.n	80013ea <__swsetup_r+0x7a>
 80013c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013c6:	b141      	cbz	r1, 80013da <__swsetup_r+0x6a>
 80013c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d002      	beq.n	80013d6 <__swsetup_r+0x66>
 80013d0:	4630      	mov	r0, r6
 80013d2:	f000 fa5b 	bl	800188c <_free_r>
 80013d6:	2300      	movs	r3, #0
 80013d8:	6363      	str	r3, [r4, #52]	; 0x34
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013e0:	81a3      	strh	r3, [r4, #12]
 80013e2:	2300      	movs	r3, #0
 80013e4:	6063      	str	r3, [r4, #4]
 80013e6:	6923      	ldr	r3, [r4, #16]
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	81a3      	strh	r3, [r4, #12]
 80013f2:	6923      	ldr	r3, [r4, #16]
 80013f4:	b94b      	cbnz	r3, 800140a <__swsetup_r+0x9a>
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001400:	d003      	beq.n	800140a <__swsetup_r+0x9a>
 8001402:	4621      	mov	r1, r4
 8001404:	4630      	mov	r0, r6
 8001406:	f000 fa01 	bl	800180c <__smakebuf_r>
 800140a:	89a0      	ldrh	r0, [r4, #12]
 800140c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001410:	f010 0301 	ands.w	r3, r0, #1
 8001414:	d00a      	beq.n	800142c <__swsetup_r+0xbc>
 8001416:	2300      	movs	r3, #0
 8001418:	60a3      	str	r3, [r4, #8]
 800141a:	6963      	ldr	r3, [r4, #20]
 800141c:	425b      	negs	r3, r3
 800141e:	61a3      	str	r3, [r4, #24]
 8001420:	6923      	ldr	r3, [r4, #16]
 8001422:	b943      	cbnz	r3, 8001436 <__swsetup_r+0xc6>
 8001424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001428:	d1ba      	bne.n	80013a0 <__swsetup_r+0x30>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	0781      	lsls	r1, r0, #30
 800142e:	bf58      	it	pl
 8001430:	6963      	ldrpl	r3, [r4, #20]
 8001432:	60a3      	str	r3, [r4, #8]
 8001434:	e7f4      	b.n	8001420 <__swsetup_r+0xb0>
 8001436:	2000      	movs	r0, #0
 8001438:	e7f7      	b.n	800142a <__swsetup_r+0xba>
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	08001cc0 	.word	0x08001cc0
 8001444:	08001ce0 	.word	0x08001ce0
 8001448:	08001ca0 	.word	0x08001ca0

0800144c <__sflush_r>:
 800144c:	898a      	ldrh	r2, [r1, #12]
 800144e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001452:	4605      	mov	r5, r0
 8001454:	0710      	lsls	r0, r2, #28
 8001456:	460c      	mov	r4, r1
 8001458:	d458      	bmi.n	800150c <__sflush_r+0xc0>
 800145a:	684b      	ldr	r3, [r1, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dc05      	bgt.n	800146c <__sflush_r+0x20>
 8001460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	dc02      	bgt.n	800146c <__sflush_r+0x20>
 8001466:	2000      	movs	r0, #0
 8001468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800146c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800146e:	2e00      	cmp	r6, #0
 8001470:	d0f9      	beq.n	8001466 <__sflush_r+0x1a>
 8001472:	2300      	movs	r3, #0
 8001474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001478:	682f      	ldr	r7, [r5, #0]
 800147a:	602b      	str	r3, [r5, #0]
 800147c:	d032      	beq.n	80014e4 <__sflush_r+0x98>
 800147e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	075a      	lsls	r2, r3, #29
 8001484:	d505      	bpl.n	8001492 <__sflush_r+0x46>
 8001486:	6863      	ldr	r3, [r4, #4]
 8001488:	1ac0      	subs	r0, r0, r3
 800148a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800148c:	b10b      	cbz	r3, 8001492 <__sflush_r+0x46>
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	1ac0      	subs	r0, r0, r3
 8001492:	2300      	movs	r3, #0
 8001494:	4602      	mov	r2, r0
 8001496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001498:	6a21      	ldr	r1, [r4, #32]
 800149a:	4628      	mov	r0, r5
 800149c:	47b0      	blx	r6
 800149e:	1c43      	adds	r3, r0, #1
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	d106      	bne.n	80014b2 <__sflush_r+0x66>
 80014a4:	6829      	ldr	r1, [r5, #0]
 80014a6:	291d      	cmp	r1, #29
 80014a8:	d82c      	bhi.n	8001504 <__sflush_r+0xb8>
 80014aa:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <__sflush_r+0x108>)
 80014ac:	40ca      	lsrs	r2, r1
 80014ae:	07d6      	lsls	r6, r2, #31
 80014b0:	d528      	bpl.n	8001504 <__sflush_r+0xb8>
 80014b2:	2200      	movs	r2, #0
 80014b4:	6062      	str	r2, [r4, #4]
 80014b6:	04d9      	lsls	r1, r3, #19
 80014b8:	6922      	ldr	r2, [r4, #16]
 80014ba:	6022      	str	r2, [r4, #0]
 80014bc:	d504      	bpl.n	80014c8 <__sflush_r+0x7c>
 80014be:	1c42      	adds	r2, r0, #1
 80014c0:	d101      	bne.n	80014c6 <__sflush_r+0x7a>
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	b903      	cbnz	r3, 80014c8 <__sflush_r+0x7c>
 80014c6:	6560      	str	r0, [r4, #84]	; 0x54
 80014c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ca:	602f      	str	r7, [r5, #0]
 80014cc:	2900      	cmp	r1, #0
 80014ce:	d0ca      	beq.n	8001466 <__sflush_r+0x1a>
 80014d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014d4:	4299      	cmp	r1, r3
 80014d6:	d002      	beq.n	80014de <__sflush_r+0x92>
 80014d8:	4628      	mov	r0, r5
 80014da:	f000 f9d7 	bl	800188c <_free_r>
 80014de:	2000      	movs	r0, #0
 80014e0:	6360      	str	r0, [r4, #52]	; 0x34
 80014e2:	e7c1      	b.n	8001468 <__sflush_r+0x1c>
 80014e4:	6a21      	ldr	r1, [r4, #32]
 80014e6:	2301      	movs	r3, #1
 80014e8:	4628      	mov	r0, r5
 80014ea:	47b0      	blx	r6
 80014ec:	1c41      	adds	r1, r0, #1
 80014ee:	d1c7      	bne.n	8001480 <__sflush_r+0x34>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0c4      	beq.n	8001480 <__sflush_r+0x34>
 80014f6:	2b1d      	cmp	r3, #29
 80014f8:	d001      	beq.n	80014fe <__sflush_r+0xb2>
 80014fa:	2b16      	cmp	r3, #22
 80014fc:	d101      	bne.n	8001502 <__sflush_r+0xb6>
 80014fe:	602f      	str	r7, [r5, #0]
 8001500:	e7b1      	b.n	8001466 <__sflush_r+0x1a>
 8001502:	89a3      	ldrh	r3, [r4, #12]
 8001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001508:	81a3      	strh	r3, [r4, #12]
 800150a:	e7ad      	b.n	8001468 <__sflush_r+0x1c>
 800150c:	690f      	ldr	r7, [r1, #16]
 800150e:	2f00      	cmp	r7, #0
 8001510:	d0a9      	beq.n	8001466 <__sflush_r+0x1a>
 8001512:	0793      	lsls	r3, r2, #30
 8001514:	680e      	ldr	r6, [r1, #0]
 8001516:	bf08      	it	eq
 8001518:	694b      	ldreq	r3, [r1, #20]
 800151a:	600f      	str	r7, [r1, #0]
 800151c:	bf18      	it	ne
 800151e:	2300      	movne	r3, #0
 8001520:	eba6 0807 	sub.w	r8, r6, r7
 8001524:	608b      	str	r3, [r1, #8]
 8001526:	f1b8 0f00 	cmp.w	r8, #0
 800152a:	dd9c      	ble.n	8001466 <__sflush_r+0x1a>
 800152c:	6a21      	ldr	r1, [r4, #32]
 800152e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001530:	4643      	mov	r3, r8
 8001532:	463a      	mov	r2, r7
 8001534:	4628      	mov	r0, r5
 8001536:	47b0      	blx	r6
 8001538:	2800      	cmp	r0, #0
 800153a:	dc06      	bgt.n	800154a <__sflush_r+0xfe>
 800153c:	89a3      	ldrh	r3, [r4, #12]
 800153e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001542:	81a3      	strh	r3, [r4, #12]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	e78e      	b.n	8001468 <__sflush_r+0x1c>
 800154a:	4407      	add	r7, r0
 800154c:	eba8 0800 	sub.w	r8, r8, r0
 8001550:	e7e9      	b.n	8001526 <__sflush_r+0xda>
 8001552:	bf00      	nop
 8001554:	20400001 	.word	0x20400001

08001558 <_fflush_r>:
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	690b      	ldr	r3, [r1, #16]
 800155c:	4605      	mov	r5, r0
 800155e:	460c      	mov	r4, r1
 8001560:	b913      	cbnz	r3, 8001568 <_fflush_r+0x10>
 8001562:	2500      	movs	r5, #0
 8001564:	4628      	mov	r0, r5
 8001566:	bd38      	pop	{r3, r4, r5, pc}
 8001568:	b118      	cbz	r0, 8001572 <_fflush_r+0x1a>
 800156a:	6983      	ldr	r3, [r0, #24]
 800156c:	b90b      	cbnz	r3, 8001572 <_fflush_r+0x1a>
 800156e:	f000 f887 	bl	8001680 <__sinit>
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <_fflush_r+0x6c>)
 8001574:	429c      	cmp	r4, r3
 8001576:	d11b      	bne.n	80015b0 <_fflush_r+0x58>
 8001578:	686c      	ldr	r4, [r5, #4]
 800157a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0ef      	beq.n	8001562 <_fflush_r+0xa>
 8001582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001584:	07d0      	lsls	r0, r2, #31
 8001586:	d404      	bmi.n	8001592 <_fflush_r+0x3a>
 8001588:	0599      	lsls	r1, r3, #22
 800158a:	d402      	bmi.n	8001592 <_fflush_r+0x3a>
 800158c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800158e:	f000 f915 	bl	80017bc <__retarget_lock_acquire_recursive>
 8001592:	4628      	mov	r0, r5
 8001594:	4621      	mov	r1, r4
 8001596:	f7ff ff59 	bl	800144c <__sflush_r>
 800159a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800159c:	07da      	lsls	r2, r3, #31
 800159e:	4605      	mov	r5, r0
 80015a0:	d4e0      	bmi.n	8001564 <_fflush_r+0xc>
 80015a2:	89a3      	ldrh	r3, [r4, #12]
 80015a4:	059b      	lsls	r3, r3, #22
 80015a6:	d4dd      	bmi.n	8001564 <_fflush_r+0xc>
 80015a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015aa:	f000 f908 	bl	80017be <__retarget_lock_release_recursive>
 80015ae:	e7d9      	b.n	8001564 <_fflush_r+0xc>
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <_fflush_r+0x70>)
 80015b2:	429c      	cmp	r4, r3
 80015b4:	d101      	bne.n	80015ba <_fflush_r+0x62>
 80015b6:	68ac      	ldr	r4, [r5, #8]
 80015b8:	e7df      	b.n	800157a <_fflush_r+0x22>
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <_fflush_r+0x74>)
 80015bc:	429c      	cmp	r4, r3
 80015be:	bf08      	it	eq
 80015c0:	68ec      	ldreq	r4, [r5, #12]
 80015c2:	e7da      	b.n	800157a <_fflush_r+0x22>
 80015c4:	08001cc0 	.word	0x08001cc0
 80015c8:	08001ce0 	.word	0x08001ce0
 80015cc:	08001ca0 	.word	0x08001ca0

080015d0 <std>:
 80015d0:	2300      	movs	r3, #0
 80015d2:	b510      	push	{r4, lr}
 80015d4:	4604      	mov	r4, r0
 80015d6:	e9c0 3300 	strd	r3, r3, [r0]
 80015da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015de:	6083      	str	r3, [r0, #8]
 80015e0:	8181      	strh	r1, [r0, #12]
 80015e2:	6643      	str	r3, [r0, #100]	; 0x64
 80015e4:	81c2      	strh	r2, [r0, #14]
 80015e6:	6183      	str	r3, [r0, #24]
 80015e8:	4619      	mov	r1, r3
 80015ea:	2208      	movs	r2, #8
 80015ec:	305c      	adds	r0, #92	; 0x5c
 80015ee:	f7ff fb77 	bl	8000ce0 <memset>
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <std+0x38>)
 80015f4:	6263      	str	r3, [r4, #36]	; 0x24
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <std+0x3c>)
 80015f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <std+0x40>)
 80015fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <std+0x44>)
 8001600:	6224      	str	r4, [r4, #32]
 8001602:	6323      	str	r3, [r4, #48]	; 0x30
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	08001a6d 	.word	0x08001a6d
 800160c:	08001a8f 	.word	0x08001a8f
 8001610:	08001ac7 	.word	0x08001ac7
 8001614:	08001aeb 	.word	0x08001aeb

08001618 <_cleanup_r>:
 8001618:	4901      	ldr	r1, [pc, #4]	; (8001620 <_cleanup_r+0x8>)
 800161a:	f000 b8af 	b.w	800177c <_fwalk_reent>
 800161e:	bf00      	nop
 8001620:	08001559 	.word	0x08001559

08001624 <__sfmoreglue>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	2268      	movs	r2, #104	; 0x68
 8001628:	1e4d      	subs	r5, r1, #1
 800162a:	4355      	muls	r5, r2
 800162c:	460e      	mov	r6, r1
 800162e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001632:	f000 f997 	bl	8001964 <_malloc_r>
 8001636:	4604      	mov	r4, r0
 8001638:	b140      	cbz	r0, 800164c <__sfmoreglue+0x28>
 800163a:	2100      	movs	r1, #0
 800163c:	e9c0 1600 	strd	r1, r6, [r0]
 8001640:	300c      	adds	r0, #12
 8001642:	60a0      	str	r0, [r4, #8]
 8001644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001648:	f7ff fb4a 	bl	8000ce0 <memset>
 800164c:	4620      	mov	r0, r4
 800164e:	bd70      	pop	{r4, r5, r6, pc}

08001650 <__sfp_lock_acquire>:
 8001650:	4801      	ldr	r0, [pc, #4]	; (8001658 <__sfp_lock_acquire+0x8>)
 8001652:	f000 b8b3 	b.w	80017bc <__retarget_lock_acquire_recursive>
 8001656:	bf00      	nop
 8001658:	20001145 	.word	0x20001145

0800165c <__sfp_lock_release>:
 800165c:	4801      	ldr	r0, [pc, #4]	; (8001664 <__sfp_lock_release+0x8>)
 800165e:	f000 b8ae 	b.w	80017be <__retarget_lock_release_recursive>
 8001662:	bf00      	nop
 8001664:	20001145 	.word	0x20001145

08001668 <__sinit_lock_acquire>:
 8001668:	4801      	ldr	r0, [pc, #4]	; (8001670 <__sinit_lock_acquire+0x8>)
 800166a:	f000 b8a7 	b.w	80017bc <__retarget_lock_acquire_recursive>
 800166e:	bf00      	nop
 8001670:	20001146 	.word	0x20001146

08001674 <__sinit_lock_release>:
 8001674:	4801      	ldr	r0, [pc, #4]	; (800167c <__sinit_lock_release+0x8>)
 8001676:	f000 b8a2 	b.w	80017be <__retarget_lock_release_recursive>
 800167a:	bf00      	nop
 800167c:	20001146 	.word	0x20001146

08001680 <__sinit>:
 8001680:	b510      	push	{r4, lr}
 8001682:	4604      	mov	r4, r0
 8001684:	f7ff fff0 	bl	8001668 <__sinit_lock_acquire>
 8001688:	69a3      	ldr	r3, [r4, #24]
 800168a:	b11b      	cbz	r3, 8001694 <__sinit+0x14>
 800168c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001690:	f7ff bff0 	b.w	8001674 <__sinit_lock_release>
 8001694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001698:	6523      	str	r3, [r4, #80]	; 0x50
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <__sinit+0x68>)
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <__sinit+0x6c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80016a2:	42a3      	cmp	r3, r4
 80016a4:	bf04      	itt	eq
 80016a6:	2301      	moveq	r3, #1
 80016a8:	61a3      	streq	r3, [r4, #24]
 80016aa:	4620      	mov	r0, r4
 80016ac:	f000 f820 	bl	80016f0 <__sfp>
 80016b0:	6060      	str	r0, [r4, #4]
 80016b2:	4620      	mov	r0, r4
 80016b4:	f000 f81c 	bl	80016f0 <__sfp>
 80016b8:	60a0      	str	r0, [r4, #8]
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 f818 	bl	80016f0 <__sfp>
 80016c0:	2200      	movs	r2, #0
 80016c2:	60e0      	str	r0, [r4, #12]
 80016c4:	2104      	movs	r1, #4
 80016c6:	6860      	ldr	r0, [r4, #4]
 80016c8:	f7ff ff82 	bl	80015d0 <std>
 80016cc:	68a0      	ldr	r0, [r4, #8]
 80016ce:	2201      	movs	r2, #1
 80016d0:	2109      	movs	r1, #9
 80016d2:	f7ff ff7d 	bl	80015d0 <std>
 80016d6:	68e0      	ldr	r0, [r4, #12]
 80016d8:	2202      	movs	r2, #2
 80016da:	2112      	movs	r1, #18
 80016dc:	f7ff ff78 	bl	80015d0 <std>
 80016e0:	2301      	movs	r3, #1
 80016e2:	61a3      	str	r3, [r4, #24]
 80016e4:	e7d2      	b.n	800168c <__sinit+0xc>
 80016e6:	bf00      	nop
 80016e8:	08001c68 	.word	0x08001c68
 80016ec:	08001619 	.word	0x08001619

080016f0 <__sfp>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	4607      	mov	r7, r0
 80016f4:	f7ff ffac 	bl	8001650 <__sfp_lock_acquire>
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <__sfp+0x84>)
 80016fa:	681e      	ldr	r6, [r3, #0]
 80016fc:	69b3      	ldr	r3, [r6, #24]
 80016fe:	b913      	cbnz	r3, 8001706 <__sfp+0x16>
 8001700:	4630      	mov	r0, r6
 8001702:	f7ff ffbd 	bl	8001680 <__sinit>
 8001706:	3648      	adds	r6, #72	; 0x48
 8001708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800170c:	3b01      	subs	r3, #1
 800170e:	d503      	bpl.n	8001718 <__sfp+0x28>
 8001710:	6833      	ldr	r3, [r6, #0]
 8001712:	b30b      	cbz	r3, 8001758 <__sfp+0x68>
 8001714:	6836      	ldr	r6, [r6, #0]
 8001716:	e7f7      	b.n	8001708 <__sfp+0x18>
 8001718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800171c:	b9d5      	cbnz	r5, 8001754 <__sfp+0x64>
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <__sfp+0x88>)
 8001720:	60e3      	str	r3, [r4, #12]
 8001722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001726:	6665      	str	r5, [r4, #100]	; 0x64
 8001728:	f000 f847 	bl	80017ba <__retarget_lock_init_recursive>
 800172c:	f7ff ff96 	bl	800165c <__sfp_lock_release>
 8001730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001738:	6025      	str	r5, [r4, #0]
 800173a:	61a5      	str	r5, [r4, #24]
 800173c:	2208      	movs	r2, #8
 800173e:	4629      	mov	r1, r5
 8001740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001744:	f7ff facc 	bl	8000ce0 <memset>
 8001748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800174c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001750:	4620      	mov	r0, r4
 8001752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001754:	3468      	adds	r4, #104	; 0x68
 8001756:	e7d9      	b.n	800170c <__sfp+0x1c>
 8001758:	2104      	movs	r1, #4
 800175a:	4638      	mov	r0, r7
 800175c:	f7ff ff62 	bl	8001624 <__sfmoreglue>
 8001760:	4604      	mov	r4, r0
 8001762:	6030      	str	r0, [r6, #0]
 8001764:	2800      	cmp	r0, #0
 8001766:	d1d5      	bne.n	8001714 <__sfp+0x24>
 8001768:	f7ff ff78 	bl	800165c <__sfp_lock_release>
 800176c:	230c      	movs	r3, #12
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	e7ee      	b.n	8001750 <__sfp+0x60>
 8001772:	bf00      	nop
 8001774:	08001c68 	.word	0x08001c68
 8001778:	ffff0001 	.word	0xffff0001

0800177c <_fwalk_reent>:
 800177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001780:	4606      	mov	r6, r0
 8001782:	4688      	mov	r8, r1
 8001784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001788:	2700      	movs	r7, #0
 800178a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800178e:	f1b9 0901 	subs.w	r9, r9, #1
 8001792:	d505      	bpl.n	80017a0 <_fwalk_reent+0x24>
 8001794:	6824      	ldr	r4, [r4, #0]
 8001796:	2c00      	cmp	r4, #0
 8001798:	d1f7      	bne.n	800178a <_fwalk_reent+0xe>
 800179a:	4638      	mov	r0, r7
 800179c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017a0:	89ab      	ldrh	r3, [r5, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d907      	bls.n	80017b6 <_fwalk_reent+0x3a>
 80017a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017aa:	3301      	adds	r3, #1
 80017ac:	d003      	beq.n	80017b6 <_fwalk_reent+0x3a>
 80017ae:	4629      	mov	r1, r5
 80017b0:	4630      	mov	r0, r6
 80017b2:	47c0      	blx	r8
 80017b4:	4307      	orrs	r7, r0
 80017b6:	3568      	adds	r5, #104	; 0x68
 80017b8:	e7e9      	b.n	800178e <_fwalk_reent+0x12>

080017ba <__retarget_lock_init_recursive>:
 80017ba:	4770      	bx	lr

080017bc <__retarget_lock_acquire_recursive>:
 80017bc:	4770      	bx	lr

080017be <__retarget_lock_release_recursive>:
 80017be:	4770      	bx	lr

080017c0 <__swhatbuf_r>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	460e      	mov	r6, r1
 80017c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c8:	2900      	cmp	r1, #0
 80017ca:	b096      	sub	sp, #88	; 0x58
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	da08      	bge.n	80017e4 <__swhatbuf_r+0x24>
 80017d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	602a      	str	r2, [r5, #0]
 80017da:	061a      	lsls	r2, r3, #24
 80017dc:	d410      	bmi.n	8001800 <__swhatbuf_r+0x40>
 80017de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e2:	e00e      	b.n	8001802 <__swhatbuf_r+0x42>
 80017e4:	466a      	mov	r2, sp
 80017e6:	f000 f9a7 	bl	8001b38 <_fstat_r>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	dbf1      	blt.n	80017d2 <__swhatbuf_r+0x12>
 80017ee:	9a01      	ldr	r2, [sp, #4]
 80017f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80017f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80017f8:	425a      	negs	r2, r3
 80017fa:	415a      	adcs	r2, r3
 80017fc:	602a      	str	r2, [r5, #0]
 80017fe:	e7ee      	b.n	80017de <__swhatbuf_r+0x1e>
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	2000      	movs	r0, #0
 8001804:	6023      	str	r3, [r4, #0]
 8001806:	b016      	add	sp, #88	; 0x58
 8001808:	bd70      	pop	{r4, r5, r6, pc}
	...

0800180c <__smakebuf_r>:
 800180c:	898b      	ldrh	r3, [r1, #12]
 800180e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001810:	079d      	lsls	r5, r3, #30
 8001812:	4606      	mov	r6, r0
 8001814:	460c      	mov	r4, r1
 8001816:	d507      	bpl.n	8001828 <__smakebuf_r+0x1c>
 8001818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	6123      	str	r3, [r4, #16]
 8001820:	2301      	movs	r3, #1
 8001822:	6163      	str	r3, [r4, #20]
 8001824:	b002      	add	sp, #8
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	ab01      	add	r3, sp, #4
 800182a:	466a      	mov	r2, sp
 800182c:	f7ff ffc8 	bl	80017c0 <__swhatbuf_r>
 8001830:	9900      	ldr	r1, [sp, #0]
 8001832:	4605      	mov	r5, r0
 8001834:	4630      	mov	r0, r6
 8001836:	f000 f895 	bl	8001964 <_malloc_r>
 800183a:	b948      	cbnz	r0, 8001850 <__smakebuf_r+0x44>
 800183c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001840:	059a      	lsls	r2, r3, #22
 8001842:	d4ef      	bmi.n	8001824 <__smakebuf_r+0x18>
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	81a3      	strh	r3, [r4, #12]
 800184e:	e7e3      	b.n	8001818 <__smakebuf_r+0xc>
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <__smakebuf_r+0x7c>)
 8001852:	62b3      	str	r3, [r6, #40]	; 0x28
 8001854:	89a3      	ldrh	r3, [r4, #12]
 8001856:	6020      	str	r0, [r4, #0]
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	81a3      	strh	r3, [r4, #12]
 800185e:	9b00      	ldr	r3, [sp, #0]
 8001860:	6163      	str	r3, [r4, #20]
 8001862:	9b01      	ldr	r3, [sp, #4]
 8001864:	6120      	str	r0, [r4, #16]
 8001866:	b15b      	cbz	r3, 8001880 <__smakebuf_r+0x74>
 8001868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800186c:	4630      	mov	r0, r6
 800186e:	f000 f975 	bl	8001b5c <_isatty_r>
 8001872:	b128      	cbz	r0, 8001880 <__smakebuf_r+0x74>
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	f023 0303 	bic.w	r3, r3, #3
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	81a3      	strh	r3, [r4, #12]
 8001880:	89a0      	ldrh	r0, [r4, #12]
 8001882:	4305      	orrs	r5, r0
 8001884:	81a5      	strh	r5, [r4, #12]
 8001886:	e7cd      	b.n	8001824 <__smakebuf_r+0x18>
 8001888:	08001619 	.word	0x08001619

0800188c <_free_r>:
 800188c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800188e:	2900      	cmp	r1, #0
 8001890:	d044      	beq.n	800191c <_free_r+0x90>
 8001892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001896:	9001      	str	r0, [sp, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f1a1 0404 	sub.w	r4, r1, #4
 800189e:	bfb8      	it	lt
 80018a0:	18e4      	addlt	r4, r4, r3
 80018a2:	f000 f97d 	bl	8001ba0 <__malloc_lock>
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <_free_r+0x94>)
 80018a8:	9801      	ldr	r0, [sp, #4]
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	b933      	cbnz	r3, 80018bc <_free_r+0x30>
 80018ae:	6063      	str	r3, [r4, #4]
 80018b0:	6014      	str	r4, [r2, #0]
 80018b2:	b003      	add	sp, #12
 80018b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018b8:	f000 b978 	b.w	8001bac <__malloc_unlock>
 80018bc:	42a3      	cmp	r3, r4
 80018be:	d908      	bls.n	80018d2 <_free_r+0x46>
 80018c0:	6825      	ldr	r5, [r4, #0]
 80018c2:	1961      	adds	r1, r4, r5
 80018c4:	428b      	cmp	r3, r1
 80018c6:	bf01      	itttt	eq
 80018c8:	6819      	ldreq	r1, [r3, #0]
 80018ca:	685b      	ldreq	r3, [r3, #4]
 80018cc:	1949      	addeq	r1, r1, r5
 80018ce:	6021      	streq	r1, [r4, #0]
 80018d0:	e7ed      	b.n	80018ae <_free_r+0x22>
 80018d2:	461a      	mov	r2, r3
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	b10b      	cbz	r3, 80018dc <_free_r+0x50>
 80018d8:	42a3      	cmp	r3, r4
 80018da:	d9fa      	bls.n	80018d2 <_free_r+0x46>
 80018dc:	6811      	ldr	r1, [r2, #0]
 80018de:	1855      	adds	r5, r2, r1
 80018e0:	42a5      	cmp	r5, r4
 80018e2:	d10b      	bne.n	80018fc <_free_r+0x70>
 80018e4:	6824      	ldr	r4, [r4, #0]
 80018e6:	4421      	add	r1, r4
 80018e8:	1854      	adds	r4, r2, r1
 80018ea:	42a3      	cmp	r3, r4
 80018ec:	6011      	str	r1, [r2, #0]
 80018ee:	d1e0      	bne.n	80018b2 <_free_r+0x26>
 80018f0:	681c      	ldr	r4, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	6053      	str	r3, [r2, #4]
 80018f6:	4421      	add	r1, r4
 80018f8:	6011      	str	r1, [r2, #0]
 80018fa:	e7da      	b.n	80018b2 <_free_r+0x26>
 80018fc:	d902      	bls.n	8001904 <_free_r+0x78>
 80018fe:	230c      	movs	r3, #12
 8001900:	6003      	str	r3, [r0, #0]
 8001902:	e7d6      	b.n	80018b2 <_free_r+0x26>
 8001904:	6825      	ldr	r5, [r4, #0]
 8001906:	1961      	adds	r1, r4, r5
 8001908:	428b      	cmp	r3, r1
 800190a:	bf04      	itt	eq
 800190c:	6819      	ldreq	r1, [r3, #0]
 800190e:	685b      	ldreq	r3, [r3, #4]
 8001910:	6063      	str	r3, [r4, #4]
 8001912:	bf04      	itt	eq
 8001914:	1949      	addeq	r1, r1, r5
 8001916:	6021      	streq	r1, [r4, #0]
 8001918:	6054      	str	r4, [r2, #4]
 800191a:	e7ca      	b.n	80018b2 <_free_r+0x26>
 800191c:	b003      	add	sp, #12
 800191e:	bd30      	pop	{r4, r5, pc}
 8001920:	20001148 	.word	0x20001148

08001924 <sbrk_aligned>:
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	4e0e      	ldr	r6, [pc, #56]	; (8001960 <sbrk_aligned+0x3c>)
 8001928:	460c      	mov	r4, r1
 800192a:	6831      	ldr	r1, [r6, #0]
 800192c:	4605      	mov	r5, r0
 800192e:	b911      	cbnz	r1, 8001936 <sbrk_aligned+0x12>
 8001930:	f000 f88c 	bl	8001a4c <_sbrk_r>
 8001934:	6030      	str	r0, [r6, #0]
 8001936:	4621      	mov	r1, r4
 8001938:	4628      	mov	r0, r5
 800193a:	f000 f887 	bl	8001a4c <_sbrk_r>
 800193e:	1c43      	adds	r3, r0, #1
 8001940:	d00a      	beq.n	8001958 <sbrk_aligned+0x34>
 8001942:	1cc4      	adds	r4, r0, #3
 8001944:	f024 0403 	bic.w	r4, r4, #3
 8001948:	42a0      	cmp	r0, r4
 800194a:	d007      	beq.n	800195c <sbrk_aligned+0x38>
 800194c:	1a21      	subs	r1, r4, r0
 800194e:	4628      	mov	r0, r5
 8001950:	f000 f87c 	bl	8001a4c <_sbrk_r>
 8001954:	3001      	adds	r0, #1
 8001956:	d101      	bne.n	800195c <sbrk_aligned+0x38>
 8001958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800195c:	4620      	mov	r0, r4
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	2000114c 	.word	0x2000114c

08001964 <_malloc_r>:
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	1ccd      	adds	r5, r1, #3
 800196a:	f025 0503 	bic.w	r5, r5, #3
 800196e:	3508      	adds	r5, #8
 8001970:	2d0c      	cmp	r5, #12
 8001972:	bf38      	it	cc
 8001974:	250c      	movcc	r5, #12
 8001976:	2d00      	cmp	r5, #0
 8001978:	4607      	mov	r7, r0
 800197a:	db01      	blt.n	8001980 <_malloc_r+0x1c>
 800197c:	42a9      	cmp	r1, r5
 800197e:	d905      	bls.n	800198c <_malloc_r+0x28>
 8001980:	230c      	movs	r3, #12
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	2600      	movs	r6, #0
 8001986:	4630      	mov	r0, r6
 8001988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198c:	4e2e      	ldr	r6, [pc, #184]	; (8001a48 <_malloc_r+0xe4>)
 800198e:	f000 f907 	bl	8001ba0 <__malloc_lock>
 8001992:	6833      	ldr	r3, [r6, #0]
 8001994:	461c      	mov	r4, r3
 8001996:	bb34      	cbnz	r4, 80019e6 <_malloc_r+0x82>
 8001998:	4629      	mov	r1, r5
 800199a:	4638      	mov	r0, r7
 800199c:	f7ff ffc2 	bl	8001924 <sbrk_aligned>
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	4604      	mov	r4, r0
 80019a4:	d14d      	bne.n	8001a42 <_malloc_r+0xde>
 80019a6:	6834      	ldr	r4, [r6, #0]
 80019a8:	4626      	mov	r6, r4
 80019aa:	2e00      	cmp	r6, #0
 80019ac:	d140      	bne.n	8001a30 <_malloc_r+0xcc>
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	4631      	mov	r1, r6
 80019b2:	4638      	mov	r0, r7
 80019b4:	eb04 0803 	add.w	r8, r4, r3
 80019b8:	f000 f848 	bl	8001a4c <_sbrk_r>
 80019bc:	4580      	cmp	r8, r0
 80019be:	d13a      	bne.n	8001a36 <_malloc_r+0xd2>
 80019c0:	6821      	ldr	r1, [r4, #0]
 80019c2:	3503      	adds	r5, #3
 80019c4:	1a6d      	subs	r5, r5, r1
 80019c6:	f025 0503 	bic.w	r5, r5, #3
 80019ca:	3508      	adds	r5, #8
 80019cc:	2d0c      	cmp	r5, #12
 80019ce:	bf38      	it	cc
 80019d0:	250c      	movcc	r5, #12
 80019d2:	4629      	mov	r1, r5
 80019d4:	4638      	mov	r0, r7
 80019d6:	f7ff ffa5 	bl	8001924 <sbrk_aligned>
 80019da:	3001      	adds	r0, #1
 80019dc:	d02b      	beq.n	8001a36 <_malloc_r+0xd2>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	442b      	add	r3, r5
 80019e2:	6023      	str	r3, [r4, #0]
 80019e4:	e00e      	b.n	8001a04 <_malloc_r+0xa0>
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	1b52      	subs	r2, r2, r5
 80019ea:	d41e      	bmi.n	8001a2a <_malloc_r+0xc6>
 80019ec:	2a0b      	cmp	r2, #11
 80019ee:	d916      	bls.n	8001a1e <_malloc_r+0xba>
 80019f0:	1961      	adds	r1, r4, r5
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	6025      	str	r5, [r4, #0]
 80019f6:	bf18      	it	ne
 80019f8:	6059      	strne	r1, [r3, #4]
 80019fa:	6863      	ldr	r3, [r4, #4]
 80019fc:	bf08      	it	eq
 80019fe:	6031      	streq	r1, [r6, #0]
 8001a00:	5162      	str	r2, [r4, r5]
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	4638      	mov	r0, r7
 8001a06:	f104 060b 	add.w	r6, r4, #11
 8001a0a:	f000 f8cf 	bl	8001bac <__malloc_unlock>
 8001a0e:	f026 0607 	bic.w	r6, r6, #7
 8001a12:	1d23      	adds	r3, r4, #4
 8001a14:	1af2      	subs	r2, r6, r3
 8001a16:	d0b6      	beq.n	8001986 <_malloc_r+0x22>
 8001a18:	1b9b      	subs	r3, r3, r6
 8001a1a:	50a3      	str	r3, [r4, r2]
 8001a1c:	e7b3      	b.n	8001986 <_malloc_r+0x22>
 8001a1e:	6862      	ldr	r2, [r4, #4]
 8001a20:	42a3      	cmp	r3, r4
 8001a22:	bf0c      	ite	eq
 8001a24:	6032      	streq	r2, [r6, #0]
 8001a26:	605a      	strne	r2, [r3, #4]
 8001a28:	e7ec      	b.n	8001a04 <_malloc_r+0xa0>
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	6864      	ldr	r4, [r4, #4]
 8001a2e:	e7b2      	b.n	8001996 <_malloc_r+0x32>
 8001a30:	4634      	mov	r4, r6
 8001a32:	6876      	ldr	r6, [r6, #4]
 8001a34:	e7b9      	b.n	80019aa <_malloc_r+0x46>
 8001a36:	230c      	movs	r3, #12
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	f000 f8b6 	bl	8001bac <__malloc_unlock>
 8001a40:	e7a1      	b.n	8001986 <_malloc_r+0x22>
 8001a42:	6025      	str	r5, [r4, #0]
 8001a44:	e7de      	b.n	8001a04 <_malloc_r+0xa0>
 8001a46:	bf00      	nop
 8001a48:	20001148 	.word	0x20001148

08001a4c <_sbrk_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4d06      	ldr	r5, [pc, #24]	; (8001a68 <_sbrk_r+0x1c>)
 8001a50:	2300      	movs	r3, #0
 8001a52:	4604      	mov	r4, r0
 8001a54:	4608      	mov	r0, r1
 8001a56:	602b      	str	r3, [r5, #0]
 8001a58:	f7fe ffa4 	bl	80009a4 <_sbrk>
 8001a5c:	1c43      	adds	r3, r0, #1
 8001a5e:	d102      	bne.n	8001a66 <_sbrk_r+0x1a>
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	b103      	cbz	r3, 8001a66 <_sbrk_r+0x1a>
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
 8001a68:	20001150 	.word	0x20001150

08001a6c <__sread>:
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	460c      	mov	r4, r1
 8001a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a74:	f000 f8a0 	bl	8001bb8 <_read_r>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	bfab      	itete	ge
 8001a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a80:	181b      	addge	r3, r3, r0
 8001a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a86:	bfac      	ite	ge
 8001a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a8a:	81a3      	strhlt	r3, [r4, #12]
 8001a8c:	bd10      	pop	{r4, pc}

08001a8e <__swrite>:
 8001a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a92:	461f      	mov	r7, r3
 8001a94:	898b      	ldrh	r3, [r1, #12]
 8001a96:	05db      	lsls	r3, r3, #23
 8001a98:	4605      	mov	r5, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4616      	mov	r6, r2
 8001a9e:	d505      	bpl.n	8001aac <__swrite+0x1e>
 8001aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f000 f868 	bl	8001b7c <_lseek_r>
 8001aac:	89a3      	ldrh	r3, [r4, #12]
 8001aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab6:	81a3      	strh	r3, [r4, #12]
 8001ab8:	4632      	mov	r2, r6
 8001aba:	463b      	mov	r3, r7
 8001abc:	4628      	mov	r0, r5
 8001abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac2:	f000 b817 	b.w	8001af4 <_write_r>

08001ac6 <__sseek>:
 8001ac6:	b510      	push	{r4, lr}
 8001ac8:	460c      	mov	r4, r1
 8001aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ace:	f000 f855 	bl	8001b7c <_lseek_r>
 8001ad2:	1c43      	adds	r3, r0, #1
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	bf15      	itete	ne
 8001ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ae2:	81a3      	strheq	r3, [r4, #12]
 8001ae4:	bf18      	it	ne
 8001ae6:	81a3      	strhne	r3, [r4, #12]
 8001ae8:	bd10      	pop	{r4, pc}

08001aea <__sclose>:
 8001aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aee:	f000 b813 	b.w	8001b18 <_close_r>
	...

08001af4 <_write_r>:
 8001af4:	b538      	push	{r3, r4, r5, lr}
 8001af6:	4d07      	ldr	r5, [pc, #28]	; (8001b14 <_write_r+0x20>)
 8001af8:	4604      	mov	r4, r0
 8001afa:	4608      	mov	r0, r1
 8001afc:	4611      	mov	r1, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	602a      	str	r2, [r5, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f7fe fefd 	bl	8000902 <_write>
 8001b08:	1c43      	adds	r3, r0, #1
 8001b0a:	d102      	bne.n	8001b12 <_write_r+0x1e>
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	b103      	cbz	r3, 8001b12 <_write_r+0x1e>
 8001b10:	6023      	str	r3, [r4, #0]
 8001b12:	bd38      	pop	{r3, r4, r5, pc}
 8001b14:	20001150 	.word	0x20001150

08001b18 <_close_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4d06      	ldr	r5, [pc, #24]	; (8001b34 <_close_r+0x1c>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	602b      	str	r3, [r5, #0]
 8001b24:	f7fe ff09 	bl	800093a <_close>
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	d102      	bne.n	8001b32 <_close_r+0x1a>
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	b103      	cbz	r3, 8001b32 <_close_r+0x1a>
 8001b30:	6023      	str	r3, [r4, #0]
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
 8001b34:	20001150 	.word	0x20001150

08001b38 <_fstat_r>:
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4d07      	ldr	r5, [pc, #28]	; (8001b58 <_fstat_r+0x20>)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4604      	mov	r4, r0
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	602b      	str	r3, [r5, #0]
 8001b46:	f7fe ff04 	bl	8000952 <_fstat>
 8001b4a:	1c43      	adds	r3, r0, #1
 8001b4c:	d102      	bne.n	8001b54 <_fstat_r+0x1c>
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	b103      	cbz	r3, 8001b54 <_fstat_r+0x1c>
 8001b52:	6023      	str	r3, [r4, #0]
 8001b54:	bd38      	pop	{r3, r4, r5, pc}
 8001b56:	bf00      	nop
 8001b58:	20001150 	.word	0x20001150

08001b5c <_isatty_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4d06      	ldr	r5, [pc, #24]	; (8001b78 <_isatty_r+0x1c>)
 8001b60:	2300      	movs	r3, #0
 8001b62:	4604      	mov	r4, r0
 8001b64:	4608      	mov	r0, r1
 8001b66:	602b      	str	r3, [r5, #0]
 8001b68:	f7fe ff03 	bl	8000972 <_isatty>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	d102      	bne.n	8001b76 <_isatty_r+0x1a>
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	b103      	cbz	r3, 8001b76 <_isatty_r+0x1a>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	20001150 	.word	0x20001150

08001b7c <_lseek_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4d07      	ldr	r5, [pc, #28]	; (8001b9c <_lseek_r+0x20>)
 8001b80:	4604      	mov	r4, r0
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	602a      	str	r2, [r5, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f7fe fefc 	bl	8000988 <_lseek>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_lseek_r+0x1e>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_lseek_r+0x1e>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	20001150 	.word	0x20001150

08001ba0 <__malloc_lock>:
 8001ba0:	4801      	ldr	r0, [pc, #4]	; (8001ba8 <__malloc_lock+0x8>)
 8001ba2:	f7ff be0b 	b.w	80017bc <__retarget_lock_acquire_recursive>
 8001ba6:	bf00      	nop
 8001ba8:	20001144 	.word	0x20001144

08001bac <__malloc_unlock>:
 8001bac:	4801      	ldr	r0, [pc, #4]	; (8001bb4 <__malloc_unlock+0x8>)
 8001bae:	f7ff be06 	b.w	80017be <__retarget_lock_release_recursive>
 8001bb2:	bf00      	nop
 8001bb4:	20001144 	.word	0x20001144

08001bb8 <_read_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4d07      	ldr	r5, [pc, #28]	; (8001bd8 <_read_r+0x20>)
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	602a      	str	r2, [r5, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f7fe fe7e 	bl	80008c8 <_read>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_read_r+0x1e>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_read_r+0x1e>
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	20001150 	.word	0x20001150

08001bdc <_init>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

08001be8 <_fini>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr
