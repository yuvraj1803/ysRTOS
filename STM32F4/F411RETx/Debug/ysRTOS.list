
ysRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bb4  08001bb4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001bb4  08001bb4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bb4  08001bb4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bb4  08001bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bb8  08001bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  20000064  08001c20  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08001c20  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c1c  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b63  00000000  00000000  00022cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00023818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00023a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc4d  00000000  00000000  00023c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004311  00000000  00000000  000338bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055f60  00000000  00000000  00037bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008db2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f04  00000000  00000000  0008db80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001a90 	.word	0x08001a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001a90 	.word	0x08001a90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LED_INIT+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LED_INIT+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <LED_INIT+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <LED_INIT+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 10);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <LED_INIT+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <LED_INIT+0x38>)
 80002a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002a6:	6013      	str	r3, [r2, #0]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <LED_ON>:

void LED_ON(void){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

	GPIOA -> ODR |= LED_PIN; /* Set LED_PIN high in GPIOA's output data register */
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <LED_ON+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <LED_ON+0x1c>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020000 	.word	0x40020000

080002dc <LED_OFF>:

void LED_OFF(void){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// set LED pin LOW

	GPIOA -> ODR &= ~LED_PIN; /* Set LED_PIN low in GPIOA's output data register */
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <LED_OFF+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <LED_OFF+0x1c>)
 80002e6:	f023 0320 	bic.w	r3, r3, #32
 80002ea:	6153      	str	r3, [r2, #20]

}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <__io_putchar>:
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);
void uart_tx_init(void);

int __io_putchar(int ch){ /* defined in syscalls.c */
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f805 	bl	8000314 <uart_write>

	return ch;
 800030a:	687b      	ldr	r3, [r7, #4]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <uart_write>:

	USART2 -> CR1 |= CR1_UE; /* enable UART module */

}

static void uart_write(int ch){
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]

	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 800031c:	bf00      	nop
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <uart_write+0x2c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <uart_write+0x2c>)
 800032e:	b2db      	uxtb	r3, r3
 8000330:	6053      	str	r3, [r2, #4]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40004400 	.word	0x40004400

08000344 <__init__>:


#include "init.h"


void __init__(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000348:	f7ff ff9a 	bl	8000280 <LED_INIT>



	/* Initialise the kernel */

	kernel_init();
 800034c:	f000 f82c 	bl	80003a8 <kernel_init>


}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	db0a      	blt.n	800037e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	490c      	ldr	r1, [pc, #48]	; (80003a0 <__NVIC_SetPriority+0x4c>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800037c:	e00a      	b.n	8000394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4908      	ldr	r1, [pc, #32]	; (80003a4 <__NVIC_SetPriority+0x50>)
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	f003 030f 	and.w	r3, r3, #15
 800038a:	3b04      	subs	r3, #4
 800038c:	0112      	lsls	r2, r2, #4
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	440b      	add	r3, r1
 8000392:	761a      	strb	r2, [r3, #24]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <kernel_init>:
/*
 * Note: Thread ID is simply the index of the TCB_STACK in which the thread's content is stored.
 * */


void kernel_init(void){
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <kernel_init+0x48>)
 80003ae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003b2:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <kernel_init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <kernel_init+0x50>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <kernel_init+0x54>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	601a      	str	r2, [r3, #0]

	min_periodic_thread_id = MAX_THREADS;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <kernel_init+0x58>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <kernel_init+0x5c>)
 80003ce:	2209      	movs	r2, #9
 80003d0:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <kernel_init+0x50>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <kernel_init+0x60>)
 80003da:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <kernel_init+0x58>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <kernel_init+0x64>)
 80003e4:	6013      	str	r3, [r2, #0]


}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	20001114 	.word	0x20001114
 80003f4:	20001130 	.word	0x20001130
 80003f8:	20001120 	.word	0x20001120
 80003fc:	20001124 	.word	0x20001124
 8000400:	20001128 	.word	0x20001128
 8000404:	2000112c 	.word	0x2000112c
 8000408:	20001118 	.word	0x20001118
 800040c:	2000111c 	.word	0x2000111c

08000410 <stk_init>:

void stk_init(uint32_t thread_id){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800041e:	fb02 f303 	mul.w	r3, r2, r3
 8000422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <stk_init+0x50>)
 8000428:	1899      	adds	r1, r3, r2
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <stk_init+0x54>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	4403      	add	r3, r0
 8000438:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <stk_init+0x50>)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000442:	fb01 f303 	mul.w	r3, r1, r3
 8000446:	4413      	add	r3, r2
 8000448:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800044c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000450:	601a      	str	r2, [r3, #0]
		TCB_STACK[THREAD_NO][STACK_SIZE-16] = 0xAAAAAAAA; // R4

			(FOR DEBUGGING PURPOSES)
		*/

}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000174 	.word	0x20000174
 8000464:	20000080 	.word	0x20000080

08000468 <kernel_launch>:

void kernel_launch(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <kernel_launch+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <kernel_launch+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <kernel_launch+0x54>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4613      	mov	r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4413      	add	r3, r2
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <kernel_launch+0x50>)
 8000486:	3b01      	subs	r3, #1
 8000488:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, 15); /* Set SysTick to low-priority */
 800048a:	210f      	movs	r1, #15
 800048c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000490:	f7ff ff60 	bl	8000354 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <kernel_launch+0x50>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <kernel_launch+0x50>)
 800049a:	f043 0305 	orr.w	r3, r3, #5
 800049e:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <kernel_launch+0x50>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <kernel_launch+0x50>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	6013      	str	r3, [r2, #0]
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 80004ac:	f000 fa58 	bl	8000960 <tim2_1ms_interrupt_init>
		}

		scheduler_launch();
 80004b0:	f000 f906 	bl	80006c0 <scheduler_launch>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	e000e010 	.word	0xe000e010
 80004bc:	20001114 	.word	0x20001114

080004c0 <add_thread>:

void add_thread(void (*thread)(void)){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <add_thread+0x114>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <add_thread+0x118>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d10a      	bne.n	80004ea <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 80004d4:	4b41      	ldr	r3, [pc, #260]	; (80005dc <add_thread+0x11c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	1d3a      	adds	r2, r7, #4
 80004dc:	4940      	ldr	r1, [pc, #256]	; (80005e0 <add_thread+0x120>)
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fb22 	bl	8000b28 <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fb0b 	bl	8000b00 <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 80004ea:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <add_thread+0x114>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f2:	b672      	cpsid	i
}
 80004f4:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 80004f6:	493b      	ldr	r1, [pc, #236]	; (80005e4 <add_thread+0x124>)
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	4613      	mov	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	440b      	add	r3, r1
 8000504:	3308      	adds	r3, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 800050a:	4936      	ldr	r1, [pc, #216]	; (80005e4 <add_thread+0x124>)
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	4613      	mov	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	4413      	add	r3, r2
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	440b      	add	r3, r1
 8000518:	330c      	adds	r3, #12
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0;
 800051e:	4931      	ldr	r1, [pc, #196]	; (80005e4 <add_thread+0x124>)
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	4613      	mov	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4413      	add	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	440b      	add	r3, r1
 800052c:	3310      	adds	r3, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 8000532:	492c      	ldr	r1, [pc, #176]	; (80005e4 <add_thread+0x124>)
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	440b      	add	r3, r1
 8000540:	3314      	adds	r3, #20
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f7ff ff62 	bl	8000410 <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4618      	mov	r0, r3
 8000550:	4a25      	ldr	r2, [pc, #148]	; (80005e8 <add_thread+0x128>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000558:	fb01 f303 	mul.w	r3, r1, r3
 800055c:	4413      	add	r3, r2
 800055e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000562:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d106      	bne.n	8000578 <add_thread+0xb8>
		__current_ptr__ = &__tcbs__[0];
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <add_thread+0x12c>)
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <add_thread+0x124>)
 800056e:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <add_thread+0x124>)
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <add_thread+0x124>)
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	e023      	b.n	80005c0 <add_thread+0x100>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <add_thread+0x114>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4919      	ldr	r1, [pc, #100]	; (80005e4 <add_thread+0x124>)
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	3304      	adds	r3, #4
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <add_thread+0x124>)
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4613      	mov	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4403      	add	r3, r0
 800059a:	3304      	adds	r3, #4
 800059c:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <add_thread+0x114>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	68f9      	ldr	r1, [r7, #12]
 80005a4:	460b      	mov	r3, r1
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	440b      	add	r3, r1
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	490d      	ldr	r1, [pc, #52]	; (80005e4 <add_thread+0x124>)
 80005ae:	4419      	add	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <add_thread+0x124>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4403      	add	r3, r0
 80005bc:	3304      	adds	r3, #4
 80005be:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <add_thread+0x114>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005c6:	b662      	cpsie	i
}
 80005c8:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20001118 	.word	0x20001118
 80005d8:	20001124 	.word	0x20001124
 80005dc:	20000000 	.word	0x20000000
 80005e0:	08001aa8 	.word	0x08001aa8
 80005e4:	20000080 	.word	0x20000080
 80005e8:	20000174 	.word	0x20000174
 80005ec:	20000170 	.word	0x20000170

080005f0 <add_periodic_thread>:

void add_periodic_thread(void (*pthread)(void), uint32_t period){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	 * TIM2_IRQHandler will be called when TIM2->CNT hits 0. This will initiate the context switching process.
	 *
	 *
	 * */

	if(recently_added_periodic_thread_id == max_periodic_thread_id){
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <add_periodic_thread+0xb8>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <add_periodic_thread+0xbc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d10a      	bne.n	800061c <add_periodic_thread+0x2c>
		fprintf(stderr, "Cannot add periodic thread %p, max periodic thread limit reached", &pthread);
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <add_periodic_thread+0xc0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	1d3a      	adds	r2, r7, #4
 800060e:	4929      	ldr	r1, [pc, #164]	; (80006b4 <add_periodic_thread+0xc4>)
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fa89 	bl	8000b28 <fiprintf>
		exit(__ADD_PERIODIC_THREAD_FAILURE__);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fa72 	bl	8000b00 <exit>
	}

	uint32_t pthread_id = recently_added_periodic_thread_id + 1;
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <add_periodic_thread+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop

	__disable_irq();

	__tcbs__[pthread_id].sleeptime = 0;
 8000628:	4923      	ldr	r1, [pc, #140]	; (80006b8 <add_periodic_thread+0xc8>)
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	440b      	add	r3, r1
 8000636:	3308      	adds	r3, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].thread_id = pthread_id;
 800063c:	491e      	ldr	r1, [pc, #120]	; (80006b8 <add_periodic_thread+0xc8>)
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	330c      	adds	r3, #12
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].period = period;
 8000650:	4919      	ldr	r1, [pc, #100]	; (80006b8 <add_periodic_thread+0xc8>)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	440b      	add	r3, r1
 800065e:	3310      	adds	r3, #16
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	601a      	str	r2, [r3, #0]
	__tcbs__[pthread_id].status = THREAD_ACTIVE;
 8000664:	4914      	ldr	r1, [pc, #80]	; (80006b8 <add_periodic_thread+0xc8>)
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	440b      	add	r3, r1
 8000672:	3314      	adds	r3, #20
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]

	stk_init(pthread_id);
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff fec9 	bl	8000410 <stk_init>
	TCB_STACK[pthread_id][STACK_SIZE-2] = (uint32_t) pthread;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4618      	mov	r0, r3
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <add_periodic_thread+0xcc>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800068a:	fb01 f303 	mul.w	r3, r1, r3
 800068e:	4413      	add	r3, r2
 8000690:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000694:	6018      	str	r0, [r3, #0]

	recently_added_periodic_thread_id = pthread_id;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <add_periodic_thread+0xb8>)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800069c:	b662      	cpsie	i
}
 800069e:	bf00      	nop

	__enable_irq();



}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000111c 	.word	0x2000111c
 80006ac:	2000112c 	.word	0x2000112c
 80006b0:	20000000 	.word	0x20000000
 80006b4:	08001ad8 	.word	0x08001ad8
 80006b8:	20000080 	.word	0x20000080
 80006bc:	20000174 	.word	0x20000174

080006c0 <scheduler_launch>:
/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */
#define ICSR_PENDSVSET		(1U << 28) 		/* PendSV  Exception pending bit*/

void scheduler_launch(void){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 80006c6:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 80006c8:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 80006cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 80006d0:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 80006d4:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 80006d6:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 80006d8:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 80006dc:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 80006de:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 80006e0:	4770      	bx	lr

}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	20000170 	.word	0x20000170

080006f0 <PendSV_Handler>:
			 *	-> Restore all the Registers.
			 * */

			/* SUSPEND CURRENT THREAD */

			__asm("CPSID I");		/* disable global interrupts */
 80006f0:	b672      	cpsid	i
			__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 80006f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
			__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <PendSV_Handler+0x20>)
			__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 80006f8:	6801      	ldr	r1, [r0, #0]
			__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 80006fa:	f8c1 d000 	str.w	sp, [r1]

			/* CHOOSE NEXT THREAD */

			__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 80006fe:	6849      	ldr	r1, [r1, #4]
			__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 8000700:	6001      	str	r1, [r0, #0]
			__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 8000702:	f8d1 d000 	ldr.w	sp, [r1]
			__asm("POP {R4-R11}");			/* restore r4-r11 */
 8000706:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
			__asm("CPSIE I");				/* enable global interrupts */
 800070a:	b662      	cpsie	i
			__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr
 800070c:	4770      	bx	lr

			 */
}
 800070e:	bf00      	nop
 8000710:	20000170 	.word	0x20000170

08000714 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void){

	ICSR |= ICSR_PENDSVSET; /* Trigger the PendSV interrupt handler to perform the context switch.*/
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <SysTick_Handler+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a02      	ldr	r2, [pc, #8]	; (8000724 <SysTick_Handler+0x10>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6013      	str	r3, [r2, #0]

}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	e000ed04 	.word	0xe000ed04

08000728 <pa>:
#include "kernel/kernel.h"

int a = 0;
int b = 0;

void pa(void){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	while(1){
		a++;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <pa+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a01      	ldr	r2, [pc, #4]	; (8000738 <pa+0x10>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e7f9      	b.n	800072c <pa+0x4>
 8000738:	20001134 	.word	0x20001134

0800073c <pb>:
	}
}

void pb(void){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	while(1){
		b++;
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <pb+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	4a01      	ldr	r2, [pc, #4]	; (800074c <pb+0x10>)
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	e7f9      	b.n	8000740 <pb+0x4>
 800074c:	20001138 	.word	0x20001138

08000750 <on>:
	}
}

void on(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	LED_ON();
 8000754:	f7ff fdb2 	bl	80002bc <LED_ON>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <off>:
void off(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	LED_OFF();
 8000760:	f7ff fdbc 	bl	80002dc <LED_OFF>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <main>:


int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	******************/




	__init__(); /* ysRTOS initialisation */
 800076c:	f7ff fdea 	bl	8000344 <__init__>


	/* Add all your threads below */

	 add_thread(&pa);
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <main+0x30>)
 8000772:	f7ff fea5 	bl	80004c0 <add_thread>
	 add_thread(&pb);
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <main+0x34>)
 8000778:	f7ff fea2 	bl	80004c0 <add_thread>
	 add_periodic_thread(&on,1);
 800077c:	2101      	movs	r1, #1
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x38>)
 8000780:	f7ff ff36 	bl	80005f0 <add_periodic_thread>
	 add_periodic_thread(&off,200);
 8000784:	21c8      	movs	r1, #200	; 0xc8
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <main+0x3c>)
 8000788:	f7ff ff32 	bl	80005f0 <add_periodic_thread>

	/*  */

	kernel_launch();
 800078c:	f7ff fe6c 	bl	8000468 <kernel_launch>
 8000790:	2300      	movs	r3, #0


}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08000729 	.word	0x08000729
 800079c:	0800073d 	.word	0x0800073d
 80007a0:	08000751 	.word	0x08000751
 80007a4:	0800075d 	.word	0x0800075d

080007a8 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007b2:	f000 f99f 	bl	8000af4 <__errno>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2216      	movs	r2, #22
 80007ba:	601a      	str	r2, [r3, #0]
  return -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_exit>:

void _exit (int status)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ffe7 	bl	80007a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007da:	e7fe      	b.n	80007da <_exit+0x12>

080007dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	e00a      	b.n	8000804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ee:	f3af 8000 	nop.w
 80007f2:	4601      	mov	r1, r0
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	b2ca      	uxtb	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dbf0      	blt.n	80007ee <_read+0x12>
  }

  return len;
 800080c:	687b      	ldr	r3, [r7, #4]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e009      	b.n	800083c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	60ba      	str	r2, [r7, #8]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd63 	bl	80002fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf1      	blt.n	8000828 <_write+0x12>
  }
  return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_close>:

int _close(int file)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000876:	605a      	str	r2, [r3, #4]
  return 0;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_isatty>:

int _isatty(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f000 f904 	bl	8000af4 <__errno>
 80008ec:	4603      	mov	r3, r0
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <_sbrk+0x64>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20020000 	.word	0x20020000
 8000918:	00000400 	.word	0x00000400
 800091c:	2000113c 	.word	0x2000113c
 8000920:	20001150 	.word	0x20001150

08000924 <__NVIC_EnableIRQ>:
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <__NVIC_EnableIRQ+0x38>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100

08000960 <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <tim2_1ms_interrupt_init+0x4c>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <tim2_1ms_interrupt_init+0x4c>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 16000 - 1;	 /*Set timer prescaler*/
 8000970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000974:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 800097a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097e:	2209      	movs	r2, #9
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 8000982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 800098a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 8000992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 80009a2:	201c      	movs	r0, #28
 80009a4:	f7ff ffbe 	bl	8000924 <__NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <TIM2_IRQHandler+0xd0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <TIM2_IRQHandler+0xd4>)
 80009be:	fba3 1302 	umull	r1, r3, r3, r2
 80009c2:	0a9b      	lsrs	r3, r3, #10
 80009c4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80009c8:	fb01 f303 	mul.w	r3, r1, r3
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <TIM2_IRQHandler+0xd0>)
 80009d0:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 80009d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6113      	str	r3, [r2, #16]

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <TIM2_IRQHandler+0xd8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	e03d      	b.n	8000a66 <TIM2_IRQHandler+0xb6>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if(sys_counter % __tcbs__[current_thread_id].period == 0 && __tcbs__[current_thread_id].status == THREAD_ACTIVE){
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <TIM2_IRQHandler+0xd0>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4827      	ldr	r0, [pc, #156]	; (8000a8c <TIM2_IRQHandler+0xdc>)
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	440b      	add	r3, r1
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4403      	add	r3, r0
 80009fc:	3310      	adds	r3, #16
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d128      	bne.n	8000a60 <TIM2_IRQHandler+0xb0>
 8000a0e:	491f      	ldr	r1, [pc, #124]	; (8000a8c <TIM2_IRQHandler+0xdc>)
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3314      	adds	r3, #20
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d11d      	bne.n	8000a60 <TIM2_IRQHandler+0xb0>
			 * Gives the periodic thread, the CPU.
			 * After execution, for "quanta" time, we resume the normal scheduling from where we stopped.
			 *
			 * */

			__tcbs__[current_thread_id].next_thread = __current_ptr__->next_thread;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <TIM2_IRQHandler+0xe0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6859      	ldr	r1, [r3, #4]
 8000a2a:	4818      	ldr	r0, [pc, #96]	; (8000a8c <TIM2_IRQHandler+0xdc>)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	4403      	add	r3, r0
 8000a38:	3304      	adds	r3, #4
 8000a3a:	6019      	str	r1, [r3, #0]
			__current_ptr__ = &__tcbs__[current_thread_id];
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <TIM2_IRQHandler+0xdc>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <TIM2_IRQHandler+0xe0>)
 8000a4c:	6013      	str	r3, [r2, #0]

			/* yield the CPU */
			SysTick->VAL = 0; /* clear SysTick Current Value Register */
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <TIM2_IRQHandler+0xe4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
			ICSR |= ICSR_PENDSTSET; /* trigger SysTick */
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <TIM2_IRQHandler+0xe8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <TIM2_IRQHandler+0xe8>)
 8000a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a5e:	6013      	str	r3, [r2, #0]
			current_thread_id++)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3301      	adds	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <TIM2_IRQHandler+0xec>)
 8000a68:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d9bc      	bls.n	80009ea <TIM2_IRQHandler+0x3a>

		}
	}


}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20001130 	.word	0x20001130
 8000a84:	10624dd3 	.word	0x10624dd3
 8000a88:	20001128 	.word	0x20001128
 8000a8c:	20000080 	.word	0x20000080
 8000a90:	20000170 	.word	0x20000170
 8000a94:	e000e010 	.word	0xe000e010
 8000a98:	e000ed04 	.word	0xe000ed04
 8000a9c:	2000112c 	.word	0x2000112c

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f000 f83d 	bl	8000b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad2:	f7ff fe49 	bl	8000768 <main>

08000ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ae4:	08001bbc 	.word	0x08001bbc
  ldr r2, =_sbss
 8000ae8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000aec:	20001150 	.word	0x20001150

08000af0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <__errno>:
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <__errno+0x8>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000000 	.word	0x20000000

08000b00 <exit>:
 8000b00:	b508      	push	{r3, lr}
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <exit+0x20>)
 8000b04:	4604      	mov	r4, r0
 8000b06:	b113      	cbz	r3, 8000b0e <exit+0xe>
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <exit+0x24>)
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b14:	b103      	cbz	r3, 8000b18 <exit+0x18>
 8000b16:	4798      	blx	r3
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f7ff fe55 	bl	80007c8 <_exit>
 8000b1e:	bf00      	nop
 8000b20:	00000000 	.word	0x00000000
 8000b24:	08001b1c 	.word	0x08001b1c

08000b28 <fiprintf>:
 8000b28:	b40e      	push	{r1, r2, r3}
 8000b2a:	b503      	push	{r0, r1, lr}
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	ab03      	add	r3, sp, #12
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <fiprintf+0x20>)
 8000b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b36:	6800      	ldr	r0, [r0, #0]
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	f000 f85d 	bl	8000bf8 <_vfiprintf_r>
 8000b3e:	b002      	add	sp, #8
 8000b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b44:	b003      	add	sp, #12
 8000b46:	4770      	bx	lr
 8000b48:	20000000 	.word	0x20000000

08000b4c <__libc_init_array>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	4d0d      	ldr	r5, [pc, #52]	; (8000b84 <__libc_init_array+0x38>)
 8000b50:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <__libc_init_array+0x3c>)
 8000b52:	1b64      	subs	r4, r4, r5
 8000b54:	10a4      	asrs	r4, r4, #2
 8000b56:	2600      	movs	r6, #0
 8000b58:	42a6      	cmp	r6, r4
 8000b5a:	d109      	bne.n	8000b70 <__libc_init_array+0x24>
 8000b5c:	4d0b      	ldr	r5, [pc, #44]	; (8000b8c <__libc_init_array+0x40>)
 8000b5e:	4c0c      	ldr	r4, [pc, #48]	; (8000b90 <__libc_init_array+0x44>)
 8000b60:	f000 ff96 	bl	8001a90 <_init>
 8000b64:	1b64      	subs	r4, r4, r5
 8000b66:	10a4      	asrs	r4, r4, #2
 8000b68:	2600      	movs	r6, #0
 8000b6a:	42a6      	cmp	r6, r4
 8000b6c:	d105      	bne.n	8000b7a <__libc_init_array+0x2e>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b74:	4798      	blx	r3
 8000b76:	3601      	adds	r6, #1
 8000b78:	e7ee      	b.n	8000b58 <__libc_init_array+0xc>
 8000b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7e:	4798      	blx	r3
 8000b80:	3601      	adds	r6, #1
 8000b82:	e7f2      	b.n	8000b6a <__libc_init_array+0x1e>
 8000b84:	08001bb4 	.word	0x08001bb4
 8000b88:	08001bb4 	.word	0x08001bb4
 8000b8c:	08001bb4 	.word	0x08001bb4
 8000b90:	08001bb8 	.word	0x08001bb8

08000b94 <memset>:
 8000b94:	4402      	add	r2, r0
 8000b96:	4603      	mov	r3, r0
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d100      	bne.n	8000b9e <memset+0xa>
 8000b9c:	4770      	bx	lr
 8000b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000ba2:	e7f9      	b.n	8000b98 <memset+0x4>

08000ba4 <__sfputc_r>:
 8000ba4:	6893      	ldr	r3, [r2, #8]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	b410      	push	{r4}
 8000bac:	6093      	str	r3, [r2, #8]
 8000bae:	da08      	bge.n	8000bc2 <__sfputc_r+0x1e>
 8000bb0:	6994      	ldr	r4, [r2, #24]
 8000bb2:	42a3      	cmp	r3, r4
 8000bb4:	db01      	blt.n	8000bba <__sfputc_r+0x16>
 8000bb6:	290a      	cmp	r1, #10
 8000bb8:	d103      	bne.n	8000bc2 <__sfputc_r+0x1e>
 8000bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bbe:	f000 badf 	b.w	8001180 <__swbuf_r>
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	1c58      	adds	r0, r3, #1
 8000bc6:	6010      	str	r0, [r2, #0]
 8000bc8:	7019      	strb	r1, [r3, #0]
 8000bca:	4608      	mov	r0, r1
 8000bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <__sfputs_r>:
 8000bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	4614      	mov	r4, r2
 8000bda:	18d5      	adds	r5, r2, r3
 8000bdc:	42ac      	cmp	r4, r5
 8000bde:	d101      	bne.n	8000be4 <__sfputs_r+0x12>
 8000be0:	2000      	movs	r0, #0
 8000be2:	e007      	b.n	8000bf4 <__sfputs_r+0x22>
 8000be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be8:	463a      	mov	r2, r7
 8000bea:	4630      	mov	r0, r6
 8000bec:	f7ff ffda 	bl	8000ba4 <__sfputc_r>
 8000bf0:	1c43      	adds	r3, r0, #1
 8000bf2:	d1f3      	bne.n	8000bdc <__sfputs_r+0xa>
 8000bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bf8 <_vfiprintf_r>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	460d      	mov	r5, r1
 8000bfe:	b09d      	sub	sp, #116	; 0x74
 8000c00:	4614      	mov	r4, r2
 8000c02:	4698      	mov	r8, r3
 8000c04:	4606      	mov	r6, r0
 8000c06:	b118      	cbz	r0, 8000c10 <_vfiprintf_r+0x18>
 8000c08:	6983      	ldr	r3, [r0, #24]
 8000c0a:	b90b      	cbnz	r3, 8000c10 <_vfiprintf_r+0x18>
 8000c0c:	f000 fc92 	bl	8001534 <__sinit>
 8000c10:	4b89      	ldr	r3, [pc, #548]	; (8000e38 <_vfiprintf_r+0x240>)
 8000c12:	429d      	cmp	r5, r3
 8000c14:	d11b      	bne.n	8000c4e <_vfiprintf_r+0x56>
 8000c16:	6875      	ldr	r5, [r6, #4]
 8000c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c1a:	07d9      	lsls	r1, r3, #31
 8000c1c:	d405      	bmi.n	8000c2a <_vfiprintf_r+0x32>
 8000c1e:	89ab      	ldrh	r3, [r5, #12]
 8000c20:	059a      	lsls	r2, r3, #22
 8000c22:	d402      	bmi.n	8000c2a <_vfiprintf_r+0x32>
 8000c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c26:	f000 fd23 	bl	8001670 <__retarget_lock_acquire_recursive>
 8000c2a:	89ab      	ldrh	r3, [r5, #12]
 8000c2c:	071b      	lsls	r3, r3, #28
 8000c2e:	d501      	bpl.n	8000c34 <_vfiprintf_r+0x3c>
 8000c30:	692b      	ldr	r3, [r5, #16]
 8000c32:	b9eb      	cbnz	r3, 8000c70 <_vfiprintf_r+0x78>
 8000c34:	4629      	mov	r1, r5
 8000c36:	4630      	mov	r0, r6
 8000c38:	f000 faf4 	bl	8001224 <__swsetup_r>
 8000c3c:	b1c0      	cbz	r0, 8000c70 <_vfiprintf_r+0x78>
 8000c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c40:	07dc      	lsls	r4, r3, #31
 8000c42:	d50e      	bpl.n	8000c62 <_vfiprintf_r+0x6a>
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	b01d      	add	sp, #116	; 0x74
 8000c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4e:	4b7b      	ldr	r3, [pc, #492]	; (8000e3c <_vfiprintf_r+0x244>)
 8000c50:	429d      	cmp	r5, r3
 8000c52:	d101      	bne.n	8000c58 <_vfiprintf_r+0x60>
 8000c54:	68b5      	ldr	r5, [r6, #8]
 8000c56:	e7df      	b.n	8000c18 <_vfiprintf_r+0x20>
 8000c58:	4b79      	ldr	r3, [pc, #484]	; (8000e40 <_vfiprintf_r+0x248>)
 8000c5a:	429d      	cmp	r5, r3
 8000c5c:	bf08      	it	eq
 8000c5e:	68f5      	ldreq	r5, [r6, #12]
 8000c60:	e7da      	b.n	8000c18 <_vfiprintf_r+0x20>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	0598      	lsls	r0, r3, #22
 8000c66:	d4ed      	bmi.n	8000c44 <_vfiprintf_r+0x4c>
 8000c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c6a:	f000 fd02 	bl	8001672 <__retarget_lock_release_recursive>
 8000c6e:	e7e9      	b.n	8000c44 <_vfiprintf_r+0x4c>
 8000c70:	2300      	movs	r3, #0
 8000c72:	9309      	str	r3, [sp, #36]	; 0x24
 8000c74:	2320      	movs	r3, #32
 8000c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c7e:	2330      	movs	r3, #48	; 0x30
 8000c80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e44 <_vfiprintf_r+0x24c>
 8000c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c88:	f04f 0901 	mov.w	r9, #1
 8000c8c:	4623      	mov	r3, r4
 8000c8e:	469a      	mov	sl, r3
 8000c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c94:	b10a      	cbz	r2, 8000c9a <_vfiprintf_r+0xa2>
 8000c96:	2a25      	cmp	r2, #37	; 0x25
 8000c98:	d1f9      	bne.n	8000c8e <_vfiprintf_r+0x96>
 8000c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8000c9e:	d00b      	beq.n	8000cb8 <_vfiprintf_r+0xc0>
 8000ca0:	465b      	mov	r3, fp
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f7ff ff93 	bl	8000bd2 <__sfputs_r>
 8000cac:	3001      	adds	r0, #1
 8000cae:	f000 80aa 	beq.w	8000e06 <_vfiprintf_r+0x20e>
 8000cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cb4:	445a      	add	r2, fp
 8000cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8000cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 80a2 	beq.w	8000e06 <_vfiprintf_r+0x20e>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ccc:	f10a 0a01 	add.w	sl, sl, #1
 8000cd0:	9304      	str	r3, [sp, #16]
 8000cd2:	9307      	str	r3, [sp, #28]
 8000cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8000cda:	4654      	mov	r4, sl
 8000cdc:	2205      	movs	r2, #5
 8000cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce2:	4858      	ldr	r0, [pc, #352]	; (8000e44 <_vfiprintf_r+0x24c>)
 8000ce4:	f7ff fa7c 	bl	80001e0 <memchr>
 8000ce8:	9a04      	ldr	r2, [sp, #16]
 8000cea:	b9d8      	cbnz	r0, 8000d24 <_vfiprintf_r+0x12c>
 8000cec:	06d1      	lsls	r1, r2, #27
 8000cee:	bf44      	itt	mi
 8000cf0:	2320      	movmi	r3, #32
 8000cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cf6:	0713      	lsls	r3, r2, #28
 8000cf8:	bf44      	itt	mi
 8000cfa:	232b      	movmi	r3, #43	; 0x2b
 8000cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d00:	f89a 3000 	ldrb.w	r3, [sl]
 8000d04:	2b2a      	cmp	r3, #42	; 0x2a
 8000d06:	d015      	beq.n	8000d34 <_vfiprintf_r+0x13c>
 8000d08:	9a07      	ldr	r2, [sp, #28]
 8000d0a:	4654      	mov	r4, sl
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f04f 0c0a 	mov.w	ip, #10
 8000d12:	4621      	mov	r1, r4
 8000d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d18:	3b30      	subs	r3, #48	; 0x30
 8000d1a:	2b09      	cmp	r3, #9
 8000d1c:	d94e      	bls.n	8000dbc <_vfiprintf_r+0x1c4>
 8000d1e:	b1b0      	cbz	r0, 8000d4e <_vfiprintf_r+0x156>
 8000d20:	9207      	str	r2, [sp, #28]
 8000d22:	e014      	b.n	8000d4e <_vfiprintf_r+0x156>
 8000d24:	eba0 0308 	sub.w	r3, r0, r8
 8000d28:	fa09 f303 	lsl.w	r3, r9, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	46a2      	mov	sl, r4
 8000d32:	e7d2      	b.n	8000cda <_vfiprintf_r+0xe2>
 8000d34:	9b03      	ldr	r3, [sp, #12]
 8000d36:	1d19      	adds	r1, r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	9103      	str	r1, [sp, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfbb      	ittet	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	f042 0202 	orrlt.w	r2, r2, #2
 8000d46:	9307      	strge	r3, [sp, #28]
 8000d48:	9307      	strlt	r3, [sp, #28]
 8000d4a:	bfb8      	it	lt
 8000d4c:	9204      	strlt	r2, [sp, #16]
 8000d4e:	7823      	ldrb	r3, [r4, #0]
 8000d50:	2b2e      	cmp	r3, #46	; 0x2e
 8000d52:	d10c      	bne.n	8000d6e <_vfiprintf_r+0x176>
 8000d54:	7863      	ldrb	r3, [r4, #1]
 8000d56:	2b2a      	cmp	r3, #42	; 0x2a
 8000d58:	d135      	bne.n	8000dc6 <_vfiprintf_r+0x1ce>
 8000d5a:	9b03      	ldr	r3, [sp, #12]
 8000d5c:	1d1a      	adds	r2, r3, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	9203      	str	r2, [sp, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bfb8      	it	lt
 8000d66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d6a:	3402      	adds	r4, #2
 8000d6c:	9305      	str	r3, [sp, #20]
 8000d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000e54 <_vfiprintf_r+0x25c>
 8000d72:	7821      	ldrb	r1, [r4, #0]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4650      	mov	r0, sl
 8000d78:	f7ff fa32 	bl	80001e0 <memchr>
 8000d7c:	b140      	cbz	r0, 8000d90 <_vfiprintf_r+0x198>
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	eba0 000a 	sub.w	r0, r0, sl
 8000d84:	fa03 f000 	lsl.w	r0, r3, r0
 8000d88:	9b04      	ldr	r3, [sp, #16]
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	3401      	adds	r4, #1
 8000d8e:	9304      	str	r3, [sp, #16]
 8000d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d94:	482c      	ldr	r0, [pc, #176]	; (8000e48 <_vfiprintf_r+0x250>)
 8000d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d9a:	2206      	movs	r2, #6
 8000d9c:	f7ff fa20 	bl	80001e0 <memchr>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d03f      	beq.n	8000e24 <_vfiprintf_r+0x22c>
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <_vfiprintf_r+0x254>)
 8000da6:	bb1b      	cbnz	r3, 8000df0 <_vfiprintf_r+0x1f8>
 8000da8:	9b03      	ldr	r3, [sp, #12]
 8000daa:	3307      	adds	r3, #7
 8000dac:	f023 0307 	bic.w	r3, r3, #7
 8000db0:	3308      	adds	r3, #8
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000db6:	443b      	add	r3, r7
 8000db8:	9309      	str	r3, [sp, #36]	; 0x24
 8000dba:	e767      	b.n	8000c8c <_vfiprintf_r+0x94>
 8000dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e7a5      	b.n	8000d12 <_vfiprintf_r+0x11a>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	3401      	adds	r4, #1
 8000dca:	9305      	str	r3, [sp, #20]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 0c0a 	mov.w	ip, #10
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dd8:	3a30      	subs	r2, #48	; 0x30
 8000dda:	2a09      	cmp	r2, #9
 8000ddc:	d903      	bls.n	8000de6 <_vfiprintf_r+0x1ee>
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0c5      	beq.n	8000d6e <_vfiprintf_r+0x176>
 8000de2:	9105      	str	r1, [sp, #20]
 8000de4:	e7c3      	b.n	8000d6e <_vfiprintf_r+0x176>
 8000de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dea:	4604      	mov	r4, r0
 8000dec:	2301      	movs	r3, #1
 8000dee:	e7f0      	b.n	8000dd2 <_vfiprintf_r+0x1da>
 8000df0:	ab03      	add	r3, sp, #12
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	462a      	mov	r2, r5
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <_vfiprintf_r+0x258>)
 8000df8:	a904      	add	r1, sp, #16
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	f3af 8000 	nop.w
 8000e00:	4607      	mov	r7, r0
 8000e02:	1c78      	adds	r0, r7, #1
 8000e04:	d1d6      	bne.n	8000db4 <_vfiprintf_r+0x1bc>
 8000e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e08:	07d9      	lsls	r1, r3, #31
 8000e0a:	d405      	bmi.n	8000e18 <_vfiprintf_r+0x220>
 8000e0c:	89ab      	ldrh	r3, [r5, #12]
 8000e0e:	059a      	lsls	r2, r3, #22
 8000e10:	d402      	bmi.n	8000e18 <_vfiprintf_r+0x220>
 8000e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e14:	f000 fc2d 	bl	8001672 <__retarget_lock_release_recursive>
 8000e18:	89ab      	ldrh	r3, [r5, #12]
 8000e1a:	065b      	lsls	r3, r3, #25
 8000e1c:	f53f af12 	bmi.w	8000c44 <_vfiprintf_r+0x4c>
 8000e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e22:	e711      	b.n	8000c48 <_vfiprintf_r+0x50>
 8000e24:	ab03      	add	r3, sp, #12
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	462a      	mov	r2, r5
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <_vfiprintf_r+0x258>)
 8000e2c:	a904      	add	r1, sp, #16
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f000 f880 	bl	8000f34 <_printf_i>
 8000e34:	e7e4      	b.n	8000e00 <_vfiprintf_r+0x208>
 8000e36:	bf00      	nop
 8000e38:	08001b74 	.word	0x08001b74
 8000e3c:	08001b94 	.word	0x08001b94
 8000e40:	08001b54 	.word	0x08001b54
 8000e44:	08001b20 	.word	0x08001b20
 8000e48:	08001b2a 	.word	0x08001b2a
 8000e4c:	00000000 	.word	0x00000000
 8000e50:	08000bd3 	.word	0x08000bd3
 8000e54:	08001b26 	.word	0x08001b26

08000e58 <_printf_common>:
 8000e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e5c:	4616      	mov	r6, r2
 8000e5e:	4699      	mov	r9, r3
 8000e60:	688a      	ldr	r2, [r1, #8]
 8000e62:	690b      	ldr	r3, [r1, #16]
 8000e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bfb8      	it	lt
 8000e6c:	4613      	movlt	r3, r2
 8000e6e:	6033      	str	r3, [r6, #0]
 8000e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e74:	4607      	mov	r7, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	b10a      	cbz	r2, 8000e7e <_printf_common+0x26>
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	6033      	str	r3, [r6, #0]
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	0699      	lsls	r1, r3, #26
 8000e82:	bf42      	ittt	mi
 8000e84:	6833      	ldrmi	r3, [r6, #0]
 8000e86:	3302      	addmi	r3, #2
 8000e88:	6033      	strmi	r3, [r6, #0]
 8000e8a:	6825      	ldr	r5, [r4, #0]
 8000e8c:	f015 0506 	ands.w	r5, r5, #6
 8000e90:	d106      	bne.n	8000ea0 <_printf_common+0x48>
 8000e92:	f104 0a19 	add.w	sl, r4, #25
 8000e96:	68e3      	ldr	r3, [r4, #12]
 8000e98:	6832      	ldr	r2, [r6, #0]
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	42ab      	cmp	r3, r5
 8000e9e:	dc26      	bgt.n	8000eee <_printf_common+0x96>
 8000ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	bf18      	it	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	0692      	lsls	r2, r2, #26
 8000eae:	d42b      	bmi.n	8000f08 <_printf_common+0xb0>
 8000eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	47c0      	blx	r8
 8000eba:	3001      	adds	r0, #1
 8000ebc:	d01e      	beq.n	8000efc <_printf_common+0xa4>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	68e5      	ldr	r5, [r4, #12]
 8000ec2:	6832      	ldr	r2, [r6, #0]
 8000ec4:	f003 0306 	and.w	r3, r3, #6
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	bf08      	it	eq
 8000ecc:	1aad      	subeq	r5, r5, r2
 8000ece:	68a3      	ldr	r3, [r4, #8]
 8000ed0:	6922      	ldr	r2, [r4, #16]
 8000ed2:	bf0c      	ite	eq
 8000ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ed8:	2500      	movne	r5, #0
 8000eda:	4293      	cmp	r3, r2
 8000edc:	bfc4      	itt	gt
 8000ede:	1a9b      	subgt	r3, r3, r2
 8000ee0:	18ed      	addgt	r5, r5, r3
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	341a      	adds	r4, #26
 8000ee6:	42b5      	cmp	r5, r6
 8000ee8:	d11a      	bne.n	8000f20 <_printf_common+0xc8>
 8000eea:	2000      	movs	r0, #0
 8000eec:	e008      	b.n	8000f00 <_printf_common+0xa8>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4652      	mov	r2, sl
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	47c0      	blx	r8
 8000ef8:	3001      	adds	r0, #1
 8000efa:	d103      	bne.n	8000f04 <_printf_common+0xac>
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	3501      	adds	r5, #1
 8000f06:	e7c6      	b.n	8000e96 <_printf_common+0x3e>
 8000f08:	18e1      	adds	r1, r4, r3
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	2030      	movs	r0, #48	; 0x30
 8000f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f12:	4422      	add	r2, r4
 8000f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	e7c7      	b.n	8000eb0 <_printf_common+0x58>
 8000f20:	2301      	movs	r3, #1
 8000f22:	4622      	mov	r2, r4
 8000f24:	4649      	mov	r1, r9
 8000f26:	4638      	mov	r0, r7
 8000f28:	47c0      	blx	r8
 8000f2a:	3001      	adds	r0, #1
 8000f2c:	d0e6      	beq.n	8000efc <_printf_common+0xa4>
 8000f2e:	3601      	adds	r6, #1
 8000f30:	e7d9      	b.n	8000ee6 <_printf_common+0x8e>
	...

08000f34 <_printf_i>:
 8000f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	7e0f      	ldrb	r7, [r1, #24]
 8000f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f3c:	2f78      	cmp	r7, #120	; 0x78
 8000f3e:	4691      	mov	r9, r2
 8000f40:	4680      	mov	r8, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	469a      	mov	sl, r3
 8000f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f4a:	d807      	bhi.n	8000f5c <_printf_i+0x28>
 8000f4c:	2f62      	cmp	r7, #98	; 0x62
 8000f4e:	d80a      	bhi.n	8000f66 <_printf_i+0x32>
 8000f50:	2f00      	cmp	r7, #0
 8000f52:	f000 80d8 	beq.w	8001106 <_printf_i+0x1d2>
 8000f56:	2f58      	cmp	r7, #88	; 0x58
 8000f58:	f000 80a3 	beq.w	80010a2 <_printf_i+0x16e>
 8000f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f64:	e03a      	b.n	8000fdc <_printf_i+0xa8>
 8000f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f6a:	2b15      	cmp	r3, #21
 8000f6c:	d8f6      	bhi.n	8000f5c <_printf_i+0x28>
 8000f6e:	a101      	add	r1, pc, #4	; (adr r1, 8000f74 <_printf_i+0x40>)
 8000f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f74:	08000fcd 	.word	0x08000fcd
 8000f78:	08000fe1 	.word	0x08000fe1
 8000f7c:	08000f5d 	.word	0x08000f5d
 8000f80:	08000f5d 	.word	0x08000f5d
 8000f84:	08000f5d 	.word	0x08000f5d
 8000f88:	08000f5d 	.word	0x08000f5d
 8000f8c:	08000fe1 	.word	0x08000fe1
 8000f90:	08000f5d 	.word	0x08000f5d
 8000f94:	08000f5d 	.word	0x08000f5d
 8000f98:	08000f5d 	.word	0x08000f5d
 8000f9c:	08000f5d 	.word	0x08000f5d
 8000fa0:	080010ed 	.word	0x080010ed
 8000fa4:	08001011 	.word	0x08001011
 8000fa8:	080010cf 	.word	0x080010cf
 8000fac:	08000f5d 	.word	0x08000f5d
 8000fb0:	08000f5d 	.word	0x08000f5d
 8000fb4:	0800110f 	.word	0x0800110f
 8000fb8:	08000f5d 	.word	0x08000f5d
 8000fbc:	08001011 	.word	0x08001011
 8000fc0:	08000f5d 	.word	0x08000f5d
 8000fc4:	08000f5d 	.word	0x08000f5d
 8000fc8:	080010d7 	.word	0x080010d7
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	602a      	str	r2, [r5, #0]
 8000fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0a3      	b.n	8001128 <_printf_i+0x1f4>
 8000fe0:	6820      	ldr	r0, [r4, #0]
 8000fe2:	6829      	ldr	r1, [r5, #0]
 8000fe4:	0606      	lsls	r6, r0, #24
 8000fe6:	f101 0304 	add.w	r3, r1, #4
 8000fea:	d50a      	bpl.n	8001002 <_printf_i+0xce>
 8000fec:	680e      	ldr	r6, [r1, #0]
 8000fee:	602b      	str	r3, [r5, #0]
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	da03      	bge.n	8000ffc <_printf_i+0xc8>
 8000ff4:	232d      	movs	r3, #45	; 0x2d
 8000ff6:	4276      	negs	r6, r6
 8000ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ffc:	485e      	ldr	r0, [pc, #376]	; (8001178 <_printf_i+0x244>)
 8000ffe:	230a      	movs	r3, #10
 8001000:	e019      	b.n	8001036 <_printf_i+0x102>
 8001002:	680e      	ldr	r6, [r1, #0]
 8001004:	602b      	str	r3, [r5, #0]
 8001006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800100a:	bf18      	it	ne
 800100c:	b236      	sxthne	r6, r6
 800100e:	e7ef      	b.n	8000ff0 <_printf_i+0xbc>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	1d19      	adds	r1, r3, #4
 8001016:	6029      	str	r1, [r5, #0]
 8001018:	0601      	lsls	r1, r0, #24
 800101a:	d501      	bpl.n	8001020 <_printf_i+0xec>
 800101c:	681e      	ldr	r6, [r3, #0]
 800101e:	e002      	b.n	8001026 <_printf_i+0xf2>
 8001020:	0646      	lsls	r6, r0, #25
 8001022:	d5fb      	bpl.n	800101c <_printf_i+0xe8>
 8001024:	881e      	ldrh	r6, [r3, #0]
 8001026:	4854      	ldr	r0, [pc, #336]	; (8001178 <_printf_i+0x244>)
 8001028:	2f6f      	cmp	r7, #111	; 0x6f
 800102a:	bf0c      	ite	eq
 800102c:	2308      	moveq	r3, #8
 800102e:	230a      	movne	r3, #10
 8001030:	2100      	movs	r1, #0
 8001032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001036:	6865      	ldr	r5, [r4, #4]
 8001038:	60a5      	str	r5, [r4, #8]
 800103a:	2d00      	cmp	r5, #0
 800103c:	bfa2      	ittt	ge
 800103e:	6821      	ldrge	r1, [r4, #0]
 8001040:	f021 0104 	bicge.w	r1, r1, #4
 8001044:	6021      	strge	r1, [r4, #0]
 8001046:	b90e      	cbnz	r6, 800104c <_printf_i+0x118>
 8001048:	2d00      	cmp	r5, #0
 800104a:	d04d      	beq.n	80010e8 <_printf_i+0x1b4>
 800104c:	4615      	mov	r5, r2
 800104e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001052:	fb03 6711 	mls	r7, r3, r1, r6
 8001056:	5dc7      	ldrb	r7, [r0, r7]
 8001058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800105c:	4637      	mov	r7, r6
 800105e:	42bb      	cmp	r3, r7
 8001060:	460e      	mov	r6, r1
 8001062:	d9f4      	bls.n	800104e <_printf_i+0x11a>
 8001064:	2b08      	cmp	r3, #8
 8001066:	d10b      	bne.n	8001080 <_printf_i+0x14c>
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	07de      	lsls	r6, r3, #31
 800106c:	d508      	bpl.n	8001080 <_printf_i+0x14c>
 800106e:	6923      	ldr	r3, [r4, #16]
 8001070:	6861      	ldr	r1, [r4, #4]
 8001072:	4299      	cmp	r1, r3
 8001074:	bfde      	ittt	le
 8001076:	2330      	movle	r3, #48	; 0x30
 8001078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800107c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001080:	1b52      	subs	r2, r2, r5
 8001082:	6122      	str	r2, [r4, #16]
 8001084:	f8cd a000 	str.w	sl, [sp]
 8001088:	464b      	mov	r3, r9
 800108a:	aa03      	add	r2, sp, #12
 800108c:	4621      	mov	r1, r4
 800108e:	4640      	mov	r0, r8
 8001090:	f7ff fee2 	bl	8000e58 <_printf_common>
 8001094:	3001      	adds	r0, #1
 8001096:	d14c      	bne.n	8001132 <_printf_i+0x1fe>
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	b004      	add	sp, #16
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	4835      	ldr	r0, [pc, #212]	; (8001178 <_printf_i+0x244>)
 80010a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80010a8:	6829      	ldr	r1, [r5, #0]
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80010b0:	6029      	str	r1, [r5, #0]
 80010b2:	061d      	lsls	r5, r3, #24
 80010b4:	d514      	bpl.n	80010e0 <_printf_i+0x1ac>
 80010b6:	07df      	lsls	r7, r3, #31
 80010b8:	bf44      	itt	mi
 80010ba:	f043 0320 	orrmi.w	r3, r3, #32
 80010be:	6023      	strmi	r3, [r4, #0]
 80010c0:	b91e      	cbnz	r6, 80010ca <_printf_i+0x196>
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	f023 0320 	bic.w	r3, r3, #32
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	2310      	movs	r3, #16
 80010cc:	e7b0      	b.n	8001030 <_printf_i+0xfc>
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	2378      	movs	r3, #120	; 0x78
 80010d8:	4828      	ldr	r0, [pc, #160]	; (800117c <_printf_i+0x248>)
 80010da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010de:	e7e3      	b.n	80010a8 <_printf_i+0x174>
 80010e0:	0659      	lsls	r1, r3, #25
 80010e2:	bf48      	it	mi
 80010e4:	b2b6      	uxthmi	r6, r6
 80010e6:	e7e6      	b.n	80010b6 <_printf_i+0x182>
 80010e8:	4615      	mov	r5, r2
 80010ea:	e7bb      	b.n	8001064 <_printf_i+0x130>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	6826      	ldr	r6, [r4, #0]
 80010f0:	6961      	ldr	r1, [r4, #20]
 80010f2:	1d18      	adds	r0, r3, #4
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	0635      	lsls	r5, r6, #24
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	d501      	bpl.n	8001100 <_printf_i+0x1cc>
 80010fc:	6019      	str	r1, [r3, #0]
 80010fe:	e002      	b.n	8001106 <_printf_i+0x1d2>
 8001100:	0670      	lsls	r0, r6, #25
 8001102:	d5fb      	bpl.n	80010fc <_printf_i+0x1c8>
 8001104:	8019      	strh	r1, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6123      	str	r3, [r4, #16]
 800110a:	4615      	mov	r5, r2
 800110c:	e7ba      	b.n	8001084 <_printf_i+0x150>
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	602a      	str	r2, [r5, #0]
 8001114:	681d      	ldr	r5, [r3, #0]
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	4628      	mov	r0, r5
 800111c:	f7ff f860 	bl	80001e0 <memchr>
 8001120:	b108      	cbz	r0, 8001126 <_printf_i+0x1f2>
 8001122:	1b40      	subs	r0, r0, r5
 8001124:	6060      	str	r0, [r4, #4]
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	2300      	movs	r3, #0
 800112c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001130:	e7a8      	b.n	8001084 <_printf_i+0x150>
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	462a      	mov	r2, r5
 8001136:	4649      	mov	r1, r9
 8001138:	4640      	mov	r0, r8
 800113a:	47d0      	blx	sl
 800113c:	3001      	adds	r0, #1
 800113e:	d0ab      	beq.n	8001098 <_printf_i+0x164>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	079b      	lsls	r3, r3, #30
 8001144:	d413      	bmi.n	800116e <_printf_i+0x23a>
 8001146:	68e0      	ldr	r0, [r4, #12]
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	4298      	cmp	r0, r3
 800114c:	bfb8      	it	lt
 800114e:	4618      	movlt	r0, r3
 8001150:	e7a4      	b.n	800109c <_printf_i+0x168>
 8001152:	2301      	movs	r3, #1
 8001154:	4632      	mov	r2, r6
 8001156:	4649      	mov	r1, r9
 8001158:	4640      	mov	r0, r8
 800115a:	47d0      	blx	sl
 800115c:	3001      	adds	r0, #1
 800115e:	d09b      	beq.n	8001098 <_printf_i+0x164>
 8001160:	3501      	adds	r5, #1
 8001162:	68e3      	ldr	r3, [r4, #12]
 8001164:	9903      	ldr	r1, [sp, #12]
 8001166:	1a5b      	subs	r3, r3, r1
 8001168:	42ab      	cmp	r3, r5
 800116a:	dcf2      	bgt.n	8001152 <_printf_i+0x21e>
 800116c:	e7eb      	b.n	8001146 <_printf_i+0x212>
 800116e:	2500      	movs	r5, #0
 8001170:	f104 0619 	add.w	r6, r4, #25
 8001174:	e7f5      	b.n	8001162 <_printf_i+0x22e>
 8001176:	bf00      	nop
 8001178:	08001b31 	.word	0x08001b31
 800117c:	08001b42 	.word	0x08001b42

08001180 <__swbuf_r>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	460e      	mov	r6, r1
 8001184:	4614      	mov	r4, r2
 8001186:	4605      	mov	r5, r0
 8001188:	b118      	cbz	r0, 8001192 <__swbuf_r+0x12>
 800118a:	6983      	ldr	r3, [r0, #24]
 800118c:	b90b      	cbnz	r3, 8001192 <__swbuf_r+0x12>
 800118e:	f000 f9d1 	bl	8001534 <__sinit>
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <__swbuf_r+0x98>)
 8001194:	429c      	cmp	r4, r3
 8001196:	d12b      	bne.n	80011f0 <__swbuf_r+0x70>
 8001198:	686c      	ldr	r4, [r5, #4]
 800119a:	69a3      	ldr	r3, [r4, #24]
 800119c:	60a3      	str	r3, [r4, #8]
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	071a      	lsls	r2, r3, #28
 80011a2:	d52f      	bpl.n	8001204 <__swbuf_r+0x84>
 80011a4:	6923      	ldr	r3, [r4, #16]
 80011a6:	b36b      	cbz	r3, 8001204 <__swbuf_r+0x84>
 80011a8:	6923      	ldr	r3, [r4, #16]
 80011aa:	6820      	ldr	r0, [r4, #0]
 80011ac:	1ac0      	subs	r0, r0, r3
 80011ae:	6963      	ldr	r3, [r4, #20]
 80011b0:	b2f6      	uxtb	r6, r6
 80011b2:	4283      	cmp	r3, r0
 80011b4:	4637      	mov	r7, r6
 80011b6:	dc04      	bgt.n	80011c2 <__swbuf_r+0x42>
 80011b8:	4621      	mov	r1, r4
 80011ba:	4628      	mov	r0, r5
 80011bc:	f000 f926 	bl	800140c <_fflush_r>
 80011c0:	bb30      	cbnz	r0, 8001210 <__swbuf_r+0x90>
 80011c2:	68a3      	ldr	r3, [r4, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60a3      	str	r3, [r4, #8]
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	6022      	str	r2, [r4, #0]
 80011ce:	701e      	strb	r6, [r3, #0]
 80011d0:	6963      	ldr	r3, [r4, #20]
 80011d2:	3001      	adds	r0, #1
 80011d4:	4283      	cmp	r3, r0
 80011d6:	d004      	beq.n	80011e2 <__swbuf_r+0x62>
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	07db      	lsls	r3, r3, #31
 80011dc:	d506      	bpl.n	80011ec <__swbuf_r+0x6c>
 80011de:	2e0a      	cmp	r6, #10
 80011e0:	d104      	bne.n	80011ec <__swbuf_r+0x6c>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f000 f911 	bl	800140c <_fflush_r>
 80011ea:	b988      	cbnz	r0, 8001210 <__swbuf_r+0x90>
 80011ec:	4638      	mov	r0, r7
 80011ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <__swbuf_r+0x9c>)
 80011f2:	429c      	cmp	r4, r3
 80011f4:	d101      	bne.n	80011fa <__swbuf_r+0x7a>
 80011f6:	68ac      	ldr	r4, [r5, #8]
 80011f8:	e7cf      	b.n	800119a <__swbuf_r+0x1a>
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <__swbuf_r+0xa0>)
 80011fc:	429c      	cmp	r4, r3
 80011fe:	bf08      	it	eq
 8001200:	68ec      	ldreq	r4, [r5, #12]
 8001202:	e7ca      	b.n	800119a <__swbuf_r+0x1a>
 8001204:	4621      	mov	r1, r4
 8001206:	4628      	mov	r0, r5
 8001208:	f000 f80c 	bl	8001224 <__swsetup_r>
 800120c:	2800      	cmp	r0, #0
 800120e:	d0cb      	beq.n	80011a8 <__swbuf_r+0x28>
 8001210:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001214:	e7ea      	b.n	80011ec <__swbuf_r+0x6c>
 8001216:	bf00      	nop
 8001218:	08001b74 	.word	0x08001b74
 800121c:	08001b94 	.word	0x08001b94
 8001220:	08001b54 	.word	0x08001b54

08001224 <__swsetup_r>:
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <__swsetup_r+0xcc>)
 8001226:	b570      	push	{r4, r5, r6, lr}
 8001228:	681d      	ldr	r5, [r3, #0]
 800122a:	4606      	mov	r6, r0
 800122c:	460c      	mov	r4, r1
 800122e:	b125      	cbz	r5, 800123a <__swsetup_r+0x16>
 8001230:	69ab      	ldr	r3, [r5, #24]
 8001232:	b913      	cbnz	r3, 800123a <__swsetup_r+0x16>
 8001234:	4628      	mov	r0, r5
 8001236:	f000 f97d 	bl	8001534 <__sinit>
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <__swsetup_r+0xd0>)
 800123c:	429c      	cmp	r4, r3
 800123e:	d10f      	bne.n	8001260 <__swsetup_r+0x3c>
 8001240:	686c      	ldr	r4, [r5, #4]
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001248:	0719      	lsls	r1, r3, #28
 800124a:	d42c      	bmi.n	80012a6 <__swsetup_r+0x82>
 800124c:	06dd      	lsls	r5, r3, #27
 800124e:	d411      	bmi.n	8001274 <__swsetup_r+0x50>
 8001250:	2309      	movs	r3, #9
 8001252:	6033      	str	r3, [r6, #0]
 8001254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001258:	81a3      	strh	r3, [r4, #12]
 800125a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800125e:	e03e      	b.n	80012de <__swsetup_r+0xba>
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <__swsetup_r+0xd4>)
 8001262:	429c      	cmp	r4, r3
 8001264:	d101      	bne.n	800126a <__swsetup_r+0x46>
 8001266:	68ac      	ldr	r4, [r5, #8]
 8001268:	e7eb      	b.n	8001242 <__swsetup_r+0x1e>
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <__swsetup_r+0xd8>)
 800126c:	429c      	cmp	r4, r3
 800126e:	bf08      	it	eq
 8001270:	68ec      	ldreq	r4, [r5, #12]
 8001272:	e7e6      	b.n	8001242 <__swsetup_r+0x1e>
 8001274:	0758      	lsls	r0, r3, #29
 8001276:	d512      	bpl.n	800129e <__swsetup_r+0x7a>
 8001278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800127a:	b141      	cbz	r1, 800128e <__swsetup_r+0x6a>
 800127c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001280:	4299      	cmp	r1, r3
 8001282:	d002      	beq.n	800128a <__swsetup_r+0x66>
 8001284:	4630      	mov	r0, r6
 8001286:	f000 fa5b 	bl	8001740 <_free_r>
 800128a:	2300      	movs	r3, #0
 800128c:	6363      	str	r3, [r4, #52]	; 0x34
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001294:	81a3      	strh	r3, [r4, #12]
 8001296:	2300      	movs	r3, #0
 8001298:	6063      	str	r3, [r4, #4]
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	81a3      	strh	r3, [r4, #12]
 80012a6:	6923      	ldr	r3, [r4, #16]
 80012a8:	b94b      	cbnz	r3, 80012be <__swsetup_r+0x9a>
 80012aa:	89a3      	ldrh	r3, [r4, #12]
 80012ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b4:	d003      	beq.n	80012be <__swsetup_r+0x9a>
 80012b6:	4621      	mov	r1, r4
 80012b8:	4630      	mov	r0, r6
 80012ba:	f000 fa01 	bl	80016c0 <__smakebuf_r>
 80012be:	89a0      	ldrh	r0, [r4, #12]
 80012c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012c4:	f010 0301 	ands.w	r3, r0, #1
 80012c8:	d00a      	beq.n	80012e0 <__swsetup_r+0xbc>
 80012ca:	2300      	movs	r3, #0
 80012cc:	60a3      	str	r3, [r4, #8]
 80012ce:	6963      	ldr	r3, [r4, #20]
 80012d0:	425b      	negs	r3, r3
 80012d2:	61a3      	str	r3, [r4, #24]
 80012d4:	6923      	ldr	r3, [r4, #16]
 80012d6:	b943      	cbnz	r3, 80012ea <__swsetup_r+0xc6>
 80012d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012dc:	d1ba      	bne.n	8001254 <__swsetup_r+0x30>
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	0781      	lsls	r1, r0, #30
 80012e2:	bf58      	it	pl
 80012e4:	6963      	ldrpl	r3, [r4, #20]
 80012e6:	60a3      	str	r3, [r4, #8]
 80012e8:	e7f4      	b.n	80012d4 <__swsetup_r+0xb0>
 80012ea:	2000      	movs	r0, #0
 80012ec:	e7f7      	b.n	80012de <__swsetup_r+0xba>
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000
 80012f4:	08001b74 	.word	0x08001b74
 80012f8:	08001b94 	.word	0x08001b94
 80012fc:	08001b54 	.word	0x08001b54

08001300 <__sflush_r>:
 8001300:	898a      	ldrh	r2, [r1, #12]
 8001302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001306:	4605      	mov	r5, r0
 8001308:	0710      	lsls	r0, r2, #28
 800130a:	460c      	mov	r4, r1
 800130c:	d458      	bmi.n	80013c0 <__sflush_r+0xc0>
 800130e:	684b      	ldr	r3, [r1, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dc05      	bgt.n	8001320 <__sflush_r+0x20>
 8001314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc02      	bgt.n	8001320 <__sflush_r+0x20>
 800131a:	2000      	movs	r0, #0
 800131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001322:	2e00      	cmp	r6, #0
 8001324:	d0f9      	beq.n	800131a <__sflush_r+0x1a>
 8001326:	2300      	movs	r3, #0
 8001328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800132c:	682f      	ldr	r7, [r5, #0]
 800132e:	602b      	str	r3, [r5, #0]
 8001330:	d032      	beq.n	8001398 <__sflush_r+0x98>
 8001332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	075a      	lsls	r2, r3, #29
 8001338:	d505      	bpl.n	8001346 <__sflush_r+0x46>
 800133a:	6863      	ldr	r3, [r4, #4]
 800133c:	1ac0      	subs	r0, r0, r3
 800133e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001340:	b10b      	cbz	r3, 8001346 <__sflush_r+0x46>
 8001342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001344:	1ac0      	subs	r0, r0, r3
 8001346:	2300      	movs	r3, #0
 8001348:	4602      	mov	r2, r0
 800134a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800134c:	6a21      	ldr	r1, [r4, #32]
 800134e:	4628      	mov	r0, r5
 8001350:	47b0      	blx	r6
 8001352:	1c43      	adds	r3, r0, #1
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	d106      	bne.n	8001366 <__sflush_r+0x66>
 8001358:	6829      	ldr	r1, [r5, #0]
 800135a:	291d      	cmp	r1, #29
 800135c:	d82c      	bhi.n	80013b8 <__sflush_r+0xb8>
 800135e:	4a2a      	ldr	r2, [pc, #168]	; (8001408 <__sflush_r+0x108>)
 8001360:	40ca      	lsrs	r2, r1
 8001362:	07d6      	lsls	r6, r2, #31
 8001364:	d528      	bpl.n	80013b8 <__sflush_r+0xb8>
 8001366:	2200      	movs	r2, #0
 8001368:	6062      	str	r2, [r4, #4]
 800136a:	04d9      	lsls	r1, r3, #19
 800136c:	6922      	ldr	r2, [r4, #16]
 800136e:	6022      	str	r2, [r4, #0]
 8001370:	d504      	bpl.n	800137c <__sflush_r+0x7c>
 8001372:	1c42      	adds	r2, r0, #1
 8001374:	d101      	bne.n	800137a <__sflush_r+0x7a>
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	b903      	cbnz	r3, 800137c <__sflush_r+0x7c>
 800137a:	6560      	str	r0, [r4, #84]	; 0x54
 800137c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800137e:	602f      	str	r7, [r5, #0]
 8001380:	2900      	cmp	r1, #0
 8001382:	d0ca      	beq.n	800131a <__sflush_r+0x1a>
 8001384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001388:	4299      	cmp	r1, r3
 800138a:	d002      	beq.n	8001392 <__sflush_r+0x92>
 800138c:	4628      	mov	r0, r5
 800138e:	f000 f9d7 	bl	8001740 <_free_r>
 8001392:	2000      	movs	r0, #0
 8001394:	6360      	str	r0, [r4, #52]	; 0x34
 8001396:	e7c1      	b.n	800131c <__sflush_r+0x1c>
 8001398:	6a21      	ldr	r1, [r4, #32]
 800139a:	2301      	movs	r3, #1
 800139c:	4628      	mov	r0, r5
 800139e:	47b0      	blx	r6
 80013a0:	1c41      	adds	r1, r0, #1
 80013a2:	d1c7      	bne.n	8001334 <__sflush_r+0x34>
 80013a4:	682b      	ldr	r3, [r5, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0c4      	beq.n	8001334 <__sflush_r+0x34>
 80013aa:	2b1d      	cmp	r3, #29
 80013ac:	d001      	beq.n	80013b2 <__sflush_r+0xb2>
 80013ae:	2b16      	cmp	r3, #22
 80013b0:	d101      	bne.n	80013b6 <__sflush_r+0xb6>
 80013b2:	602f      	str	r7, [r5, #0]
 80013b4:	e7b1      	b.n	800131a <__sflush_r+0x1a>
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013bc:	81a3      	strh	r3, [r4, #12]
 80013be:	e7ad      	b.n	800131c <__sflush_r+0x1c>
 80013c0:	690f      	ldr	r7, [r1, #16]
 80013c2:	2f00      	cmp	r7, #0
 80013c4:	d0a9      	beq.n	800131a <__sflush_r+0x1a>
 80013c6:	0793      	lsls	r3, r2, #30
 80013c8:	680e      	ldr	r6, [r1, #0]
 80013ca:	bf08      	it	eq
 80013cc:	694b      	ldreq	r3, [r1, #20]
 80013ce:	600f      	str	r7, [r1, #0]
 80013d0:	bf18      	it	ne
 80013d2:	2300      	movne	r3, #0
 80013d4:	eba6 0807 	sub.w	r8, r6, r7
 80013d8:	608b      	str	r3, [r1, #8]
 80013da:	f1b8 0f00 	cmp.w	r8, #0
 80013de:	dd9c      	ble.n	800131a <__sflush_r+0x1a>
 80013e0:	6a21      	ldr	r1, [r4, #32]
 80013e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013e4:	4643      	mov	r3, r8
 80013e6:	463a      	mov	r2, r7
 80013e8:	4628      	mov	r0, r5
 80013ea:	47b0      	blx	r6
 80013ec:	2800      	cmp	r0, #0
 80013ee:	dc06      	bgt.n	80013fe <__sflush_r+0xfe>
 80013f0:	89a3      	ldrh	r3, [r4, #12]
 80013f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f6:	81a3      	strh	r3, [r4, #12]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013fc:	e78e      	b.n	800131c <__sflush_r+0x1c>
 80013fe:	4407      	add	r7, r0
 8001400:	eba8 0800 	sub.w	r8, r8, r0
 8001404:	e7e9      	b.n	80013da <__sflush_r+0xda>
 8001406:	bf00      	nop
 8001408:	20400001 	.word	0x20400001

0800140c <_fflush_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	690b      	ldr	r3, [r1, #16]
 8001410:	4605      	mov	r5, r0
 8001412:	460c      	mov	r4, r1
 8001414:	b913      	cbnz	r3, 800141c <_fflush_r+0x10>
 8001416:	2500      	movs	r5, #0
 8001418:	4628      	mov	r0, r5
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	b118      	cbz	r0, 8001426 <_fflush_r+0x1a>
 800141e:	6983      	ldr	r3, [r0, #24]
 8001420:	b90b      	cbnz	r3, 8001426 <_fflush_r+0x1a>
 8001422:	f000 f887 	bl	8001534 <__sinit>
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <_fflush_r+0x6c>)
 8001428:	429c      	cmp	r4, r3
 800142a:	d11b      	bne.n	8001464 <_fflush_r+0x58>
 800142c:	686c      	ldr	r4, [r5, #4]
 800142e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0ef      	beq.n	8001416 <_fflush_r+0xa>
 8001436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001438:	07d0      	lsls	r0, r2, #31
 800143a:	d404      	bmi.n	8001446 <_fflush_r+0x3a>
 800143c:	0599      	lsls	r1, r3, #22
 800143e:	d402      	bmi.n	8001446 <_fflush_r+0x3a>
 8001440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001442:	f000 f915 	bl	8001670 <__retarget_lock_acquire_recursive>
 8001446:	4628      	mov	r0, r5
 8001448:	4621      	mov	r1, r4
 800144a:	f7ff ff59 	bl	8001300 <__sflush_r>
 800144e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001450:	07da      	lsls	r2, r3, #31
 8001452:	4605      	mov	r5, r0
 8001454:	d4e0      	bmi.n	8001418 <_fflush_r+0xc>
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	059b      	lsls	r3, r3, #22
 800145a:	d4dd      	bmi.n	8001418 <_fflush_r+0xc>
 800145c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800145e:	f000 f908 	bl	8001672 <__retarget_lock_release_recursive>
 8001462:	e7d9      	b.n	8001418 <_fflush_r+0xc>
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <_fflush_r+0x70>)
 8001466:	429c      	cmp	r4, r3
 8001468:	d101      	bne.n	800146e <_fflush_r+0x62>
 800146a:	68ac      	ldr	r4, [r5, #8]
 800146c:	e7df      	b.n	800142e <_fflush_r+0x22>
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <_fflush_r+0x74>)
 8001470:	429c      	cmp	r4, r3
 8001472:	bf08      	it	eq
 8001474:	68ec      	ldreq	r4, [r5, #12]
 8001476:	e7da      	b.n	800142e <_fflush_r+0x22>
 8001478:	08001b74 	.word	0x08001b74
 800147c:	08001b94 	.word	0x08001b94
 8001480:	08001b54 	.word	0x08001b54

08001484 <std>:
 8001484:	2300      	movs	r3, #0
 8001486:	b510      	push	{r4, lr}
 8001488:	4604      	mov	r4, r0
 800148a:	e9c0 3300 	strd	r3, r3, [r0]
 800148e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001492:	6083      	str	r3, [r0, #8]
 8001494:	8181      	strh	r1, [r0, #12]
 8001496:	6643      	str	r3, [r0, #100]	; 0x64
 8001498:	81c2      	strh	r2, [r0, #14]
 800149a:	6183      	str	r3, [r0, #24]
 800149c:	4619      	mov	r1, r3
 800149e:	2208      	movs	r2, #8
 80014a0:	305c      	adds	r0, #92	; 0x5c
 80014a2:	f7ff fb77 	bl	8000b94 <memset>
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <std+0x38>)
 80014a8:	6263      	str	r3, [r4, #36]	; 0x24
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <std+0x3c>)
 80014ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <std+0x40>)
 80014b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <std+0x44>)
 80014b4:	6224      	str	r4, [r4, #32]
 80014b6:	6323      	str	r3, [r4, #48]	; 0x30
 80014b8:	bd10      	pop	{r4, pc}
 80014ba:	bf00      	nop
 80014bc:	08001921 	.word	0x08001921
 80014c0:	08001943 	.word	0x08001943
 80014c4:	0800197b 	.word	0x0800197b
 80014c8:	0800199f 	.word	0x0800199f

080014cc <_cleanup_r>:
 80014cc:	4901      	ldr	r1, [pc, #4]	; (80014d4 <_cleanup_r+0x8>)
 80014ce:	f000 b8af 	b.w	8001630 <_fwalk_reent>
 80014d2:	bf00      	nop
 80014d4:	0800140d 	.word	0x0800140d

080014d8 <__sfmoreglue>:
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	2268      	movs	r2, #104	; 0x68
 80014dc:	1e4d      	subs	r5, r1, #1
 80014de:	4355      	muls	r5, r2
 80014e0:	460e      	mov	r6, r1
 80014e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014e6:	f000 f997 	bl	8001818 <_malloc_r>
 80014ea:	4604      	mov	r4, r0
 80014ec:	b140      	cbz	r0, 8001500 <__sfmoreglue+0x28>
 80014ee:	2100      	movs	r1, #0
 80014f0:	e9c0 1600 	strd	r1, r6, [r0]
 80014f4:	300c      	adds	r0, #12
 80014f6:	60a0      	str	r0, [r4, #8]
 80014f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014fc:	f7ff fb4a 	bl	8000b94 <memset>
 8001500:	4620      	mov	r0, r4
 8001502:	bd70      	pop	{r4, r5, r6, pc}

08001504 <__sfp_lock_acquire>:
 8001504:	4801      	ldr	r0, [pc, #4]	; (800150c <__sfp_lock_acquire+0x8>)
 8001506:	f000 b8b3 	b.w	8001670 <__retarget_lock_acquire_recursive>
 800150a:	bf00      	nop
 800150c:	20001141 	.word	0x20001141

08001510 <__sfp_lock_release>:
 8001510:	4801      	ldr	r0, [pc, #4]	; (8001518 <__sfp_lock_release+0x8>)
 8001512:	f000 b8ae 	b.w	8001672 <__retarget_lock_release_recursive>
 8001516:	bf00      	nop
 8001518:	20001141 	.word	0x20001141

0800151c <__sinit_lock_acquire>:
 800151c:	4801      	ldr	r0, [pc, #4]	; (8001524 <__sinit_lock_acquire+0x8>)
 800151e:	f000 b8a7 	b.w	8001670 <__retarget_lock_acquire_recursive>
 8001522:	bf00      	nop
 8001524:	20001142 	.word	0x20001142

08001528 <__sinit_lock_release>:
 8001528:	4801      	ldr	r0, [pc, #4]	; (8001530 <__sinit_lock_release+0x8>)
 800152a:	f000 b8a2 	b.w	8001672 <__retarget_lock_release_recursive>
 800152e:	bf00      	nop
 8001530:	20001142 	.word	0x20001142

08001534 <__sinit>:
 8001534:	b510      	push	{r4, lr}
 8001536:	4604      	mov	r4, r0
 8001538:	f7ff fff0 	bl	800151c <__sinit_lock_acquire>
 800153c:	69a3      	ldr	r3, [r4, #24]
 800153e:	b11b      	cbz	r3, 8001548 <__sinit+0x14>
 8001540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001544:	f7ff bff0 	b.w	8001528 <__sinit_lock_release>
 8001548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800154c:	6523      	str	r3, [r4, #80]	; 0x50
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <__sinit+0x68>)
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <__sinit+0x6c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	62a2      	str	r2, [r4, #40]	; 0x28
 8001556:	42a3      	cmp	r3, r4
 8001558:	bf04      	itt	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	61a3      	streq	r3, [r4, #24]
 800155e:	4620      	mov	r0, r4
 8001560:	f000 f820 	bl	80015a4 <__sfp>
 8001564:	6060      	str	r0, [r4, #4]
 8001566:	4620      	mov	r0, r4
 8001568:	f000 f81c 	bl	80015a4 <__sfp>
 800156c:	60a0      	str	r0, [r4, #8]
 800156e:	4620      	mov	r0, r4
 8001570:	f000 f818 	bl	80015a4 <__sfp>
 8001574:	2200      	movs	r2, #0
 8001576:	60e0      	str	r0, [r4, #12]
 8001578:	2104      	movs	r1, #4
 800157a:	6860      	ldr	r0, [r4, #4]
 800157c:	f7ff ff82 	bl	8001484 <std>
 8001580:	68a0      	ldr	r0, [r4, #8]
 8001582:	2201      	movs	r2, #1
 8001584:	2109      	movs	r1, #9
 8001586:	f7ff ff7d 	bl	8001484 <std>
 800158a:	68e0      	ldr	r0, [r4, #12]
 800158c:	2202      	movs	r2, #2
 800158e:	2112      	movs	r1, #18
 8001590:	f7ff ff78 	bl	8001484 <std>
 8001594:	2301      	movs	r3, #1
 8001596:	61a3      	str	r3, [r4, #24]
 8001598:	e7d2      	b.n	8001540 <__sinit+0xc>
 800159a:	bf00      	nop
 800159c:	08001b1c 	.word	0x08001b1c
 80015a0:	080014cd 	.word	0x080014cd

080015a4 <__sfp>:
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a6:	4607      	mov	r7, r0
 80015a8:	f7ff ffac 	bl	8001504 <__sfp_lock_acquire>
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <__sfp+0x84>)
 80015ae:	681e      	ldr	r6, [r3, #0]
 80015b0:	69b3      	ldr	r3, [r6, #24]
 80015b2:	b913      	cbnz	r3, 80015ba <__sfp+0x16>
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff ffbd 	bl	8001534 <__sinit>
 80015ba:	3648      	adds	r6, #72	; 0x48
 80015bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	d503      	bpl.n	80015cc <__sfp+0x28>
 80015c4:	6833      	ldr	r3, [r6, #0]
 80015c6:	b30b      	cbz	r3, 800160c <__sfp+0x68>
 80015c8:	6836      	ldr	r6, [r6, #0]
 80015ca:	e7f7      	b.n	80015bc <__sfp+0x18>
 80015cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015d0:	b9d5      	cbnz	r5, 8001608 <__sfp+0x64>
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <__sfp+0x88>)
 80015d4:	60e3      	str	r3, [r4, #12]
 80015d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015da:	6665      	str	r5, [r4, #100]	; 0x64
 80015dc:	f000 f847 	bl	800166e <__retarget_lock_init_recursive>
 80015e0:	f7ff ff96 	bl	8001510 <__sfp_lock_release>
 80015e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015ec:	6025      	str	r5, [r4, #0]
 80015ee:	61a5      	str	r5, [r4, #24]
 80015f0:	2208      	movs	r2, #8
 80015f2:	4629      	mov	r1, r5
 80015f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015f8:	f7ff facc 	bl	8000b94 <memset>
 80015fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001604:	4620      	mov	r0, r4
 8001606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001608:	3468      	adds	r4, #104	; 0x68
 800160a:	e7d9      	b.n	80015c0 <__sfp+0x1c>
 800160c:	2104      	movs	r1, #4
 800160e:	4638      	mov	r0, r7
 8001610:	f7ff ff62 	bl	80014d8 <__sfmoreglue>
 8001614:	4604      	mov	r4, r0
 8001616:	6030      	str	r0, [r6, #0]
 8001618:	2800      	cmp	r0, #0
 800161a:	d1d5      	bne.n	80015c8 <__sfp+0x24>
 800161c:	f7ff ff78 	bl	8001510 <__sfp_lock_release>
 8001620:	230c      	movs	r3, #12
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	e7ee      	b.n	8001604 <__sfp+0x60>
 8001626:	bf00      	nop
 8001628:	08001b1c 	.word	0x08001b1c
 800162c:	ffff0001 	.word	0xffff0001

08001630 <_fwalk_reent>:
 8001630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001634:	4606      	mov	r6, r0
 8001636:	4688      	mov	r8, r1
 8001638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800163c:	2700      	movs	r7, #0
 800163e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001642:	f1b9 0901 	subs.w	r9, r9, #1
 8001646:	d505      	bpl.n	8001654 <_fwalk_reent+0x24>
 8001648:	6824      	ldr	r4, [r4, #0]
 800164a:	2c00      	cmp	r4, #0
 800164c:	d1f7      	bne.n	800163e <_fwalk_reent+0xe>
 800164e:	4638      	mov	r0, r7
 8001650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001654:	89ab      	ldrh	r3, [r5, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d907      	bls.n	800166a <_fwalk_reent+0x3a>
 800165a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800165e:	3301      	adds	r3, #1
 8001660:	d003      	beq.n	800166a <_fwalk_reent+0x3a>
 8001662:	4629      	mov	r1, r5
 8001664:	4630      	mov	r0, r6
 8001666:	47c0      	blx	r8
 8001668:	4307      	orrs	r7, r0
 800166a:	3568      	adds	r5, #104	; 0x68
 800166c:	e7e9      	b.n	8001642 <_fwalk_reent+0x12>

0800166e <__retarget_lock_init_recursive>:
 800166e:	4770      	bx	lr

08001670 <__retarget_lock_acquire_recursive>:
 8001670:	4770      	bx	lr

08001672 <__retarget_lock_release_recursive>:
 8001672:	4770      	bx	lr

08001674 <__swhatbuf_r>:
 8001674:	b570      	push	{r4, r5, r6, lr}
 8001676:	460e      	mov	r6, r1
 8001678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800167c:	2900      	cmp	r1, #0
 800167e:	b096      	sub	sp, #88	; 0x58
 8001680:	4614      	mov	r4, r2
 8001682:	461d      	mov	r5, r3
 8001684:	da08      	bge.n	8001698 <__swhatbuf_r+0x24>
 8001686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	602a      	str	r2, [r5, #0]
 800168e:	061a      	lsls	r2, r3, #24
 8001690:	d410      	bmi.n	80016b4 <__swhatbuf_r+0x40>
 8001692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001696:	e00e      	b.n	80016b6 <__swhatbuf_r+0x42>
 8001698:	466a      	mov	r2, sp
 800169a:	f000 f9a7 	bl	80019ec <_fstat_r>
 800169e:	2800      	cmp	r0, #0
 80016a0:	dbf1      	blt.n	8001686 <__swhatbuf_r+0x12>
 80016a2:	9a01      	ldr	r2, [sp, #4]
 80016a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016ac:	425a      	negs	r2, r3
 80016ae:	415a      	adcs	r2, r3
 80016b0:	602a      	str	r2, [r5, #0]
 80016b2:	e7ee      	b.n	8001692 <__swhatbuf_r+0x1e>
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	2000      	movs	r0, #0
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	b016      	add	sp, #88	; 0x58
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080016c0 <__smakebuf_r>:
 80016c0:	898b      	ldrh	r3, [r1, #12]
 80016c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016c4:	079d      	lsls	r5, r3, #30
 80016c6:	4606      	mov	r6, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	d507      	bpl.n	80016dc <__smakebuf_r+0x1c>
 80016cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	6123      	str	r3, [r4, #16]
 80016d4:	2301      	movs	r3, #1
 80016d6:	6163      	str	r3, [r4, #20]
 80016d8:	b002      	add	sp, #8
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	ab01      	add	r3, sp, #4
 80016de:	466a      	mov	r2, sp
 80016e0:	f7ff ffc8 	bl	8001674 <__swhatbuf_r>
 80016e4:	9900      	ldr	r1, [sp, #0]
 80016e6:	4605      	mov	r5, r0
 80016e8:	4630      	mov	r0, r6
 80016ea:	f000 f895 	bl	8001818 <_malloc_r>
 80016ee:	b948      	cbnz	r0, 8001704 <__smakebuf_r+0x44>
 80016f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016f4:	059a      	lsls	r2, r3, #22
 80016f6:	d4ef      	bmi.n	80016d8 <__smakebuf_r+0x18>
 80016f8:	f023 0303 	bic.w	r3, r3, #3
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	81a3      	strh	r3, [r4, #12]
 8001702:	e7e3      	b.n	80016cc <__smakebuf_r+0xc>
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <__smakebuf_r+0x7c>)
 8001706:	62b3      	str	r3, [r6, #40]	; 0x28
 8001708:	89a3      	ldrh	r3, [r4, #12]
 800170a:	6020      	str	r0, [r4, #0]
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	81a3      	strh	r3, [r4, #12]
 8001712:	9b00      	ldr	r3, [sp, #0]
 8001714:	6163      	str	r3, [r4, #20]
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	6120      	str	r0, [r4, #16]
 800171a:	b15b      	cbz	r3, 8001734 <__smakebuf_r+0x74>
 800171c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001720:	4630      	mov	r0, r6
 8001722:	f000 f975 	bl	8001a10 <_isatty_r>
 8001726:	b128      	cbz	r0, 8001734 <__smakebuf_r+0x74>
 8001728:	89a3      	ldrh	r3, [r4, #12]
 800172a:	f023 0303 	bic.w	r3, r3, #3
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	81a3      	strh	r3, [r4, #12]
 8001734:	89a0      	ldrh	r0, [r4, #12]
 8001736:	4305      	orrs	r5, r0
 8001738:	81a5      	strh	r5, [r4, #12]
 800173a:	e7cd      	b.n	80016d8 <__smakebuf_r+0x18>
 800173c:	080014cd 	.word	0x080014cd

08001740 <_free_r>:
 8001740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001742:	2900      	cmp	r1, #0
 8001744:	d044      	beq.n	80017d0 <_free_r+0x90>
 8001746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800174a:	9001      	str	r0, [sp, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f1a1 0404 	sub.w	r4, r1, #4
 8001752:	bfb8      	it	lt
 8001754:	18e4      	addlt	r4, r4, r3
 8001756:	f000 f97d 	bl	8001a54 <__malloc_lock>
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <_free_r+0x94>)
 800175c:	9801      	ldr	r0, [sp, #4]
 800175e:	6813      	ldr	r3, [r2, #0]
 8001760:	b933      	cbnz	r3, 8001770 <_free_r+0x30>
 8001762:	6063      	str	r3, [r4, #4]
 8001764:	6014      	str	r4, [r2, #0]
 8001766:	b003      	add	sp, #12
 8001768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800176c:	f000 b978 	b.w	8001a60 <__malloc_unlock>
 8001770:	42a3      	cmp	r3, r4
 8001772:	d908      	bls.n	8001786 <_free_r+0x46>
 8001774:	6825      	ldr	r5, [r4, #0]
 8001776:	1961      	adds	r1, r4, r5
 8001778:	428b      	cmp	r3, r1
 800177a:	bf01      	itttt	eq
 800177c:	6819      	ldreq	r1, [r3, #0]
 800177e:	685b      	ldreq	r3, [r3, #4]
 8001780:	1949      	addeq	r1, r1, r5
 8001782:	6021      	streq	r1, [r4, #0]
 8001784:	e7ed      	b.n	8001762 <_free_r+0x22>
 8001786:	461a      	mov	r2, r3
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b10b      	cbz	r3, 8001790 <_free_r+0x50>
 800178c:	42a3      	cmp	r3, r4
 800178e:	d9fa      	bls.n	8001786 <_free_r+0x46>
 8001790:	6811      	ldr	r1, [r2, #0]
 8001792:	1855      	adds	r5, r2, r1
 8001794:	42a5      	cmp	r5, r4
 8001796:	d10b      	bne.n	80017b0 <_free_r+0x70>
 8001798:	6824      	ldr	r4, [r4, #0]
 800179a:	4421      	add	r1, r4
 800179c:	1854      	adds	r4, r2, r1
 800179e:	42a3      	cmp	r3, r4
 80017a0:	6011      	str	r1, [r2, #0]
 80017a2:	d1e0      	bne.n	8001766 <_free_r+0x26>
 80017a4:	681c      	ldr	r4, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	6053      	str	r3, [r2, #4]
 80017aa:	4421      	add	r1, r4
 80017ac:	6011      	str	r1, [r2, #0]
 80017ae:	e7da      	b.n	8001766 <_free_r+0x26>
 80017b0:	d902      	bls.n	80017b8 <_free_r+0x78>
 80017b2:	230c      	movs	r3, #12
 80017b4:	6003      	str	r3, [r0, #0]
 80017b6:	e7d6      	b.n	8001766 <_free_r+0x26>
 80017b8:	6825      	ldr	r5, [r4, #0]
 80017ba:	1961      	adds	r1, r4, r5
 80017bc:	428b      	cmp	r3, r1
 80017be:	bf04      	itt	eq
 80017c0:	6819      	ldreq	r1, [r3, #0]
 80017c2:	685b      	ldreq	r3, [r3, #4]
 80017c4:	6063      	str	r3, [r4, #4]
 80017c6:	bf04      	itt	eq
 80017c8:	1949      	addeq	r1, r1, r5
 80017ca:	6021      	streq	r1, [r4, #0]
 80017cc:	6054      	str	r4, [r2, #4]
 80017ce:	e7ca      	b.n	8001766 <_free_r+0x26>
 80017d0:	b003      	add	sp, #12
 80017d2:	bd30      	pop	{r4, r5, pc}
 80017d4:	20001144 	.word	0x20001144

080017d8 <sbrk_aligned>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	4e0e      	ldr	r6, [pc, #56]	; (8001814 <sbrk_aligned+0x3c>)
 80017dc:	460c      	mov	r4, r1
 80017de:	6831      	ldr	r1, [r6, #0]
 80017e0:	4605      	mov	r5, r0
 80017e2:	b911      	cbnz	r1, 80017ea <sbrk_aligned+0x12>
 80017e4:	f000 f88c 	bl	8001900 <_sbrk_r>
 80017e8:	6030      	str	r0, [r6, #0]
 80017ea:	4621      	mov	r1, r4
 80017ec:	4628      	mov	r0, r5
 80017ee:	f000 f887 	bl	8001900 <_sbrk_r>
 80017f2:	1c43      	adds	r3, r0, #1
 80017f4:	d00a      	beq.n	800180c <sbrk_aligned+0x34>
 80017f6:	1cc4      	adds	r4, r0, #3
 80017f8:	f024 0403 	bic.w	r4, r4, #3
 80017fc:	42a0      	cmp	r0, r4
 80017fe:	d007      	beq.n	8001810 <sbrk_aligned+0x38>
 8001800:	1a21      	subs	r1, r4, r0
 8001802:	4628      	mov	r0, r5
 8001804:	f000 f87c 	bl	8001900 <_sbrk_r>
 8001808:	3001      	adds	r0, #1
 800180a:	d101      	bne.n	8001810 <sbrk_aligned+0x38>
 800180c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001810:	4620      	mov	r0, r4
 8001812:	bd70      	pop	{r4, r5, r6, pc}
 8001814:	20001148 	.word	0x20001148

08001818 <_malloc_r>:
 8001818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800181c:	1ccd      	adds	r5, r1, #3
 800181e:	f025 0503 	bic.w	r5, r5, #3
 8001822:	3508      	adds	r5, #8
 8001824:	2d0c      	cmp	r5, #12
 8001826:	bf38      	it	cc
 8001828:	250c      	movcc	r5, #12
 800182a:	2d00      	cmp	r5, #0
 800182c:	4607      	mov	r7, r0
 800182e:	db01      	blt.n	8001834 <_malloc_r+0x1c>
 8001830:	42a9      	cmp	r1, r5
 8001832:	d905      	bls.n	8001840 <_malloc_r+0x28>
 8001834:	230c      	movs	r3, #12
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	2600      	movs	r6, #0
 800183a:	4630      	mov	r0, r6
 800183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001840:	4e2e      	ldr	r6, [pc, #184]	; (80018fc <_malloc_r+0xe4>)
 8001842:	f000 f907 	bl	8001a54 <__malloc_lock>
 8001846:	6833      	ldr	r3, [r6, #0]
 8001848:	461c      	mov	r4, r3
 800184a:	bb34      	cbnz	r4, 800189a <_malloc_r+0x82>
 800184c:	4629      	mov	r1, r5
 800184e:	4638      	mov	r0, r7
 8001850:	f7ff ffc2 	bl	80017d8 <sbrk_aligned>
 8001854:	1c43      	adds	r3, r0, #1
 8001856:	4604      	mov	r4, r0
 8001858:	d14d      	bne.n	80018f6 <_malloc_r+0xde>
 800185a:	6834      	ldr	r4, [r6, #0]
 800185c:	4626      	mov	r6, r4
 800185e:	2e00      	cmp	r6, #0
 8001860:	d140      	bne.n	80018e4 <_malloc_r+0xcc>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	4631      	mov	r1, r6
 8001866:	4638      	mov	r0, r7
 8001868:	eb04 0803 	add.w	r8, r4, r3
 800186c:	f000 f848 	bl	8001900 <_sbrk_r>
 8001870:	4580      	cmp	r8, r0
 8001872:	d13a      	bne.n	80018ea <_malloc_r+0xd2>
 8001874:	6821      	ldr	r1, [r4, #0]
 8001876:	3503      	adds	r5, #3
 8001878:	1a6d      	subs	r5, r5, r1
 800187a:	f025 0503 	bic.w	r5, r5, #3
 800187e:	3508      	adds	r5, #8
 8001880:	2d0c      	cmp	r5, #12
 8001882:	bf38      	it	cc
 8001884:	250c      	movcc	r5, #12
 8001886:	4629      	mov	r1, r5
 8001888:	4638      	mov	r0, r7
 800188a:	f7ff ffa5 	bl	80017d8 <sbrk_aligned>
 800188e:	3001      	adds	r0, #1
 8001890:	d02b      	beq.n	80018ea <_malloc_r+0xd2>
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	442b      	add	r3, r5
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	e00e      	b.n	80018b8 <_malloc_r+0xa0>
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	1b52      	subs	r2, r2, r5
 800189e:	d41e      	bmi.n	80018de <_malloc_r+0xc6>
 80018a0:	2a0b      	cmp	r2, #11
 80018a2:	d916      	bls.n	80018d2 <_malloc_r+0xba>
 80018a4:	1961      	adds	r1, r4, r5
 80018a6:	42a3      	cmp	r3, r4
 80018a8:	6025      	str	r5, [r4, #0]
 80018aa:	bf18      	it	ne
 80018ac:	6059      	strne	r1, [r3, #4]
 80018ae:	6863      	ldr	r3, [r4, #4]
 80018b0:	bf08      	it	eq
 80018b2:	6031      	streq	r1, [r6, #0]
 80018b4:	5162      	str	r2, [r4, r5]
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	4638      	mov	r0, r7
 80018ba:	f104 060b 	add.w	r6, r4, #11
 80018be:	f000 f8cf 	bl	8001a60 <__malloc_unlock>
 80018c2:	f026 0607 	bic.w	r6, r6, #7
 80018c6:	1d23      	adds	r3, r4, #4
 80018c8:	1af2      	subs	r2, r6, r3
 80018ca:	d0b6      	beq.n	800183a <_malloc_r+0x22>
 80018cc:	1b9b      	subs	r3, r3, r6
 80018ce:	50a3      	str	r3, [r4, r2]
 80018d0:	e7b3      	b.n	800183a <_malloc_r+0x22>
 80018d2:	6862      	ldr	r2, [r4, #4]
 80018d4:	42a3      	cmp	r3, r4
 80018d6:	bf0c      	ite	eq
 80018d8:	6032      	streq	r2, [r6, #0]
 80018da:	605a      	strne	r2, [r3, #4]
 80018dc:	e7ec      	b.n	80018b8 <_malloc_r+0xa0>
 80018de:	4623      	mov	r3, r4
 80018e0:	6864      	ldr	r4, [r4, #4]
 80018e2:	e7b2      	b.n	800184a <_malloc_r+0x32>
 80018e4:	4634      	mov	r4, r6
 80018e6:	6876      	ldr	r6, [r6, #4]
 80018e8:	e7b9      	b.n	800185e <_malloc_r+0x46>
 80018ea:	230c      	movs	r3, #12
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4638      	mov	r0, r7
 80018f0:	f000 f8b6 	bl	8001a60 <__malloc_unlock>
 80018f4:	e7a1      	b.n	800183a <_malloc_r+0x22>
 80018f6:	6025      	str	r5, [r4, #0]
 80018f8:	e7de      	b.n	80018b8 <_malloc_r+0xa0>
 80018fa:	bf00      	nop
 80018fc:	20001144 	.word	0x20001144

08001900 <_sbrk_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4d06      	ldr	r5, [pc, #24]	; (800191c <_sbrk_r+0x1c>)
 8001904:	2300      	movs	r3, #0
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	f7fe ffd4 	bl	80008b8 <_sbrk>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_sbrk_r+0x1a>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_sbrk_r+0x1a>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	2000114c 	.word	0x2000114c

08001920 <__sread>:
 8001920:	b510      	push	{r4, lr}
 8001922:	460c      	mov	r4, r1
 8001924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001928:	f000 f8a0 	bl	8001a6c <_read_r>
 800192c:	2800      	cmp	r0, #0
 800192e:	bfab      	itete	ge
 8001930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001932:	89a3      	ldrhlt	r3, [r4, #12]
 8001934:	181b      	addge	r3, r3, r0
 8001936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800193a:	bfac      	ite	ge
 800193c:	6563      	strge	r3, [r4, #84]	; 0x54
 800193e:	81a3      	strhlt	r3, [r4, #12]
 8001940:	bd10      	pop	{r4, pc}

08001942 <__swrite>:
 8001942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001946:	461f      	mov	r7, r3
 8001948:	898b      	ldrh	r3, [r1, #12]
 800194a:	05db      	lsls	r3, r3, #23
 800194c:	4605      	mov	r5, r0
 800194e:	460c      	mov	r4, r1
 8001950:	4616      	mov	r6, r2
 8001952:	d505      	bpl.n	8001960 <__swrite+0x1e>
 8001954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001958:	2302      	movs	r3, #2
 800195a:	2200      	movs	r2, #0
 800195c:	f000 f868 	bl	8001a30 <_lseek_r>
 8001960:	89a3      	ldrh	r3, [r4, #12]
 8001962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800196a:	81a3      	strh	r3, [r4, #12]
 800196c:	4632      	mov	r2, r6
 800196e:	463b      	mov	r3, r7
 8001970:	4628      	mov	r0, r5
 8001972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001976:	f000 b817 	b.w	80019a8 <_write_r>

0800197a <__sseek>:
 800197a:	b510      	push	{r4, lr}
 800197c:	460c      	mov	r4, r1
 800197e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001982:	f000 f855 	bl	8001a30 <_lseek_r>
 8001986:	1c43      	adds	r3, r0, #1
 8001988:	89a3      	ldrh	r3, [r4, #12]
 800198a:	bf15      	itete	ne
 800198c:	6560      	strne	r0, [r4, #84]	; 0x54
 800198e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001996:	81a3      	strheq	r3, [r4, #12]
 8001998:	bf18      	it	ne
 800199a:	81a3      	strhne	r3, [r4, #12]
 800199c:	bd10      	pop	{r4, pc}

0800199e <__sclose>:
 800199e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019a2:	f000 b813 	b.w	80019cc <_close_r>
	...

080019a8 <_write_r>:
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	4d07      	ldr	r5, [pc, #28]	; (80019c8 <_write_r+0x20>)
 80019ac:	4604      	mov	r4, r0
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	602a      	str	r2, [r5, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f7fe ff2d 	bl	8000816 <_write>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_write_r+0x1e>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_write_r+0x1e>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	2000114c 	.word	0x2000114c

080019cc <_close_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	4d06      	ldr	r5, [pc, #24]	; (80019e8 <_close_r+0x1c>)
 80019d0:	2300      	movs	r3, #0
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	602b      	str	r3, [r5, #0]
 80019d8:	f7fe ff39 	bl	800084e <_close>
 80019dc:	1c43      	adds	r3, r0, #1
 80019de:	d102      	bne.n	80019e6 <_close_r+0x1a>
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	b103      	cbz	r3, 80019e6 <_close_r+0x1a>
 80019e4:	6023      	str	r3, [r4, #0]
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	2000114c 	.word	0x2000114c

080019ec <_fstat_r>:
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	4d07      	ldr	r5, [pc, #28]	; (8001a0c <_fstat_r+0x20>)
 80019f0:	2300      	movs	r3, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	602b      	str	r3, [r5, #0]
 80019fa:	f7fe ff34 	bl	8000866 <_fstat>
 80019fe:	1c43      	adds	r3, r0, #1
 8001a00:	d102      	bne.n	8001a08 <_fstat_r+0x1c>
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	b103      	cbz	r3, 8001a08 <_fstat_r+0x1c>
 8001a06:	6023      	str	r3, [r4, #0]
 8001a08:	bd38      	pop	{r3, r4, r5, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000114c 	.word	0x2000114c

08001a10 <_isatty_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4d06      	ldr	r5, [pc, #24]	; (8001a2c <_isatty_r+0x1c>)
 8001a14:	2300      	movs	r3, #0
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	f7fe ff33 	bl	8000886 <_isatty>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_isatty_r+0x1a>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_isatty_r+0x1a>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	2000114c 	.word	0x2000114c

08001a30 <_lseek_r>:
 8001a30:	b538      	push	{r3, r4, r5, lr}
 8001a32:	4d07      	ldr	r5, [pc, #28]	; (8001a50 <_lseek_r+0x20>)
 8001a34:	4604      	mov	r4, r0
 8001a36:	4608      	mov	r0, r1
 8001a38:	4611      	mov	r1, r2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	602a      	str	r2, [r5, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7fe ff2c 	bl	800089c <_lseek>
 8001a44:	1c43      	adds	r3, r0, #1
 8001a46:	d102      	bne.n	8001a4e <_lseek_r+0x1e>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	b103      	cbz	r3, 8001a4e <_lseek_r+0x1e>
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
 8001a50:	2000114c 	.word	0x2000114c

08001a54 <__malloc_lock>:
 8001a54:	4801      	ldr	r0, [pc, #4]	; (8001a5c <__malloc_lock+0x8>)
 8001a56:	f7ff be0b 	b.w	8001670 <__retarget_lock_acquire_recursive>
 8001a5a:	bf00      	nop
 8001a5c:	20001140 	.word	0x20001140

08001a60 <__malloc_unlock>:
 8001a60:	4801      	ldr	r0, [pc, #4]	; (8001a68 <__malloc_unlock+0x8>)
 8001a62:	f7ff be06 	b.w	8001672 <__retarget_lock_release_recursive>
 8001a66:	bf00      	nop
 8001a68:	20001140 	.word	0x20001140

08001a6c <_read_r>:
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	4d07      	ldr	r5, [pc, #28]	; (8001a8c <_read_r+0x20>)
 8001a70:	4604      	mov	r4, r0
 8001a72:	4608      	mov	r0, r1
 8001a74:	4611      	mov	r1, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	602a      	str	r2, [r5, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f7fe feae 	bl	80007dc <_read>
 8001a80:	1c43      	adds	r3, r0, #1
 8001a82:	d102      	bne.n	8001a8a <_read_r+0x1e>
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	b103      	cbz	r3, 8001a8a <_read_r+0x1e>
 8001a88:	6023      	str	r3, [r4, #0]
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
 8001a8c:	2000114c 	.word	0x2000114c

08001a90 <_init>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr

08001a9c <_fini>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr
